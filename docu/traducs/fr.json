{
    "avancé/applications/internet.md.6dc83e2729ce1ef701d1302f05ba3adf": "Applis Internet",
    "avancé/applications/internet.md.8e26eec108c03a2d0f1e718d2607f2cd": "C'est très facile d'incorporer Constellation à vos applications. Le point important est de créer une seule instance de Constellation qui sera utilisée par toutes les partis de votre appli.",
    "avancé/applications/internet.md.88e3890484e51c3ed4974b0535b5f1aa": "Exemple Vue 3",
    "avancé/applications/internet.md.c49685e8c247d8140fb4928c5bce09c8": "Voici un exemple d'extention [Vue.js 3](https://fr.vuejs.org/) qui crée une instance de Constellation et la rend disponible à l'ensemble de votre application.",
    "avancé/applications/internet.md.c0cab063381168e250adbbccae463446": "```TypeScript\n// extentions/constellation.ts\nimport type {App} from 'vue';\n\nimport {mandataire} from '@constl/ipa';\n\nexport default {\n  install: (app: App) => {\n    const client = mandataire.ipa.générerMandataireProc();\n    app.provide('constl', client);\n  },\n};\n\n```",
    "avancé/applications/internet.md.1c8c8b4d18387d7ceb3d44cbebc1f6ef": "Nous enrégistrerons notre extention lors de la création de l'appli :\n",
    "avancé/applications/internet.md.df738f3f63a6946af93b8e69d77db7fa": "```TypeScript\n// index.ts\nimport {createApp} from 'vue';\nimport App from '/@/App.vue';\nimport constellation from './extentions/constellation.js';\n\nconst app = createApp(App);\n\napp.use(constellation);\n\napp.mount('#app');\n```",
    "avancé/applications/internet.md.ddcb982c610fd1ecce5940688cb3e3e5": "Et c'est tout ! Vous pouvez maintenant utiliser Constellation dans l'ensemble de votre appli. Amusez-vous !\n",
    "avancé/applications/internet.md.0a1322564f348f8512442b6afccb03e0": "```Vue\n<script setup lang=\"ts\">\n// composantes/MonCompte.vue\nimport { ref, inject, onMounted, onUnmounted } from 'vue';\nimport type ClientConstellation from \"@constl/ipa\";\n\nconst constellation = inject<ClientConstellation>('constl');\nconst idCompte = ref<string>();\n\nlet fOublierIdCompte: () => Promise<void> | undefined;\nonMounted(async () => {\n    fOublierIdCompte = await constellation.suivreIdBdCompte({ \n        f: id => idCompte.value = id\n    });\n})\n\n// Il faut arrêter le suivi lorsque la composante n'est plus utilisée\nonUnmounted(async () => {\n    if (fOublierIdCompte) await fOublierIdCompte();\n})\n</script>\n\n<template>\n    <h1>Mon compte : {{ idCompte }}</h1>\n</template>\n```\n",
    "avancé/applications/introduction.md.6125574ce9b6ca4cd5bc0d2a40d17cfc": "Développement d'applis",
    "avancé/applications/introduction.md.4ae07aeaa434e6be75c75dd370342450": "Vous pouvez utiliser l'IPA TypeScript de Constellation afin de développer vos propres applis de science citoyenne ou autre sur le réseau Constellation.",
    "avancé/applications/introduction.md.62e3ef8ed8faf4b9cd0dda862e815ad7": "Vous pouvez ainsi développer des applications en tant que sites web statiques, de même que des applications [Électron](https://www.electronjs.org/fr/).\n",
    "avancé/applications/nuées.md.9d00164959d63f9cfed45a0041afe763": "Nuées de données",
    "avancé/applications/nuées.md.83d25fdad7646843df65bc320c6a2939": "L'application la plus fréquente de Constellation dans une application tièrce est sans toute la collection de données distribuées d'un plublique participant à un projet de science citoyenne ou autre. Dans ce cas, les [`nuées`](../../guide/concepts.md#nuée) seront indispensables.",
    "avancé/applications/nuées.md.7b68f913b46eeae64ec56bb64ce80b95": "Cette section offre des instructions détaillées sur l'utilisation de nuées Constellation dans vos propres projets.",
    "avancé/applications/nuées.md.a09c16d2ce50a3ead492c9a24fdf7a4d": "Création de la nuée",
    "avancé/applications/nuées.md.9f733ec8d890f56f646b777a21b3f2f2": "Vous devrez, avant tout, créer l'identifiant de la nuée qui regroupera toutes les données de votre projet.",
    "avancé/applications/nuées.md.87442b3aa59ad709c021fa5b7aaa4c1f": "::: warning\nPrenez soin de créer la nuée sur le compte Constellation que vous entendez utiliser pour gérer votre projet. Celui-ci aura ainsi l'autorisation de modifier la nuée par la suite. \n:::",
    "avancé/applications/nuées.md.effbdbd2b0ba3f0abb40c75c645a3d51": "Génération du code",
    "avancé/applications/électron.md.f99147ddc67fab8ad31f3ba60bea772d": "Applis Électron",
    "avancé/applications/électron.md.b7fa2ccbaa98099d5cf7d3b585ad596d": "Si vous développez une appli Électron, vous pourriez évidemment simplement utiliser Constellation dans le [processus de rendu](https://www.electronjs.org/fr/docs/latest/tutorial/process-model#the-renderer-process) comme s'il s'agissait d'un site web. Les processus rendu, cependant, ont les mêmes limitations que les sites webs - notamment, ils ne peuvent pas accéder au système de fichier de l'ordinateur, et sont limités en mémoire. Afin d'activer les fonctionnalités plus puissantes de Constellation telles la sauvegarde et l'importation automatisées, vous devriez utiliser Constellation dans le [processus principal](https://www.electronjs.org/fr/docs/latest/tutorial/process-model#the-main-process) d'Électron.",
    "avancé/applications/électron.md.98c9b7abc668e835fb91785e768c0200": "Vu que c'est un peu compliqué d'accéder aux fonctionnalités du processus principal à partir du processus de rendu d'où vous voudrez utiliser Constellation (ils on rendu ça [bien compliqué](https://www.electronjs.org/fr/docs/latest/tutorial/tutorial-preload), pour des raisons de sécurité), on vous a créé une petite librairie qui s'occupe de tout ça pour vous !",
    "avancé/applications/électron.md.e0640eb536277ed56ef4ee35db10527d": "Configuration initiale",
    "avancé/applications/électron.md.a2e3ce683d0f6817402c3a9648b78771": "On vous recommande d'initialiser votre projet Électron avec ce [gabarit-ci](https://github.com/cawa-93/vite-electron-builder). Ça nous a sauvé beaucoup de maux de tête.",
    "avancé/applications/électron.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/applications/électron.md.7f0e77b5be0607bc272268b5e3e46a3b": "D'abord, ajoutez `@constl/mandataire-electron-principal` et `@constl/mandataire-electron-rendu` à votre projet :",
    "avancé/applications/électron.md.aac59812eabcd19f4a042cc9a11b7383": "```sh\n$ pnpm add @constl/mandataire-electron-rendu @constl/mandataire-electron-principal\n```",
    "avancé/applications/électron.md.319ffe41a9c317e51cab5eef46b57ebd": "Comment ça fonctionne",
    "avancé/applications/électron.md.4cdb966ec5b653fd71afe18e65488b01": "Le mandataire Électron vous permet de faire rouler Constellation dans le processus principal d'Électron avec tous les avantages (accès aux système de fichiers, plus de mémoire, meilleure connectivité) mais de faire *semblant* qu'il roule dans le processus de rendu Électron. Comme ça, vous pouvez utiliser Constellation dans vos pages de site web (Vue, React, etc.) comme si de rien n'était !\nComment c'est possible ? En bref, ça fonctionne en créant une seule instance de Constellation dans le processus principal, qu'on attachera à chaque fenêtre ouverte de votre appli. Ensuite, on fait un peu de magie pour permettre au processus de rendu de communiquer avec Constellation dans le processus principal.",
    "avancé/applications/électron.md.53b2092b68e0a25ecd5ff4cebe28f780": "Utilisation : processus principal",
    "avancé/applications/électron.md.982fe0661e13eca7a12da2728a010e48": "Dans un fichier séparé, initialisez le gestionnaire qui connectra les fenêtres de votre appli Électron à Constellation.",
    "avancé/applications/électron.md.4d2fa0761694ba512f5e0ee55de0f810": "```TypeScript\n// constellation.ts\nimport { GestionnaireFenêtres } from '@constl/mandataire-electron-principal';\n\nconst enDéveloppement = process.env.NODE_ENV !== 'production';  // Changer selon votre configuration\n\nconst importationIPA = import('@constl/ipa');\n\nconst importationServeur = import('@constl/serveur');  // Uniquement si vous voulez aussi activer un serveur WS local.\n\nexport const gestionnaireFenêtres = new GestionnaireFenêtres({ \n  enDéveloppement,\n  importationIPA,\n  importationServeur,  // Uniquement si vous voulez aussi activer un serveur WS local.\n});\n```",
    "avancé/applications/électron.md.5e5cb2f86a46b9319caefaf58a08b43b": "Connecter chaque nouvelle fenêtre de votre appli à Constellation au moment où vous la créez :\n",
    "avancé/applications/électron.md.261e8d230655c65eba72d319b8b39b37": "```TypeScript\n// main.ts\nimport {BrowserWindow} from 'electron';\nimport { gestionnaireFenêtres } from \"./constellation.ts\"\n\nfenêtre = new BrowserWindow();\ngestionnaireFenêtres.connecterFenêtreÀConstellation(fenêtre);\n```",
    "avancé/applications/électron.md.805f52359e9e9ba9e826009534ddd478": "Et surtout, n'oubliez pas de fermer Constellation lorsqu'on a fini.",
    "avancé/applications/électron.md.eb0819d59c4a9eedd7012742942c0206": "```TypeScript\n// main.ts\napp.on('will-quit', async () => {\n  await gestionnaireFenêtres.fermerConstellation();\n});\n```",
    "avancé/applications/électron.md.fb078bca8cb25b536082a5ba8d1d7ed3": "Utilisation : préchargeur",
    "avancé/applications/électron.md.e2c6f8cf1da0ca7485f3b408fada2913": "Dans votre code préchargeur, vous devez exposer les fonctions suivantes avec `electron.contextBridge.exposeInMainWorld`. Nous recommandons [unplugin-auto-expose](https://www.npmjs.com/package/unplugin-auto-expose), qui simplifie grandement la tâche (si vous avez utilisé le gabarit recommandé [ci-dessus](#configuration-initiale), c'est déjà inclus).",
    "avancé/applications/électron.md.f1a32138b7add3d84a6951d056c10961": "```TypeScript\n// preload.ts\n\nexport {\n  envoyerMessageÀConstellation,\n  écouterMessagesDeConstellation,\n  envoyerMessageÀServeurConstellation,  // Uniquement si vous voulez inclure le serveur WS\n  écouterMessagesDeServeurConstellation,  // Uniquement si vous voulez inclure le serveur WS\n} from '@constl/mandataire-electron-principal';\n```",
    "avancé/applications/électron.md.751c281b6dd8b9b3438efc4c87eb52dc": "Utilisation : Processus de rendu",
    "avancé/applications/électron.md.a14ca5ee122f58cd52c208d89d28cdec": "Vous pouvez maintenant connecter Constellation à votre processus de rendu. Vous devriez utiliser une seule instance de Constellation dans votre application. Voici ci-dessous un exemple avec [Vue.js 3](https://fr.vuejs.org/) et [vuetify](https://next.vuetifyjs.com/).",
    "avancé/applications/électron.md.00f7f8ec240c957f915749d1480b4fb5": "```TypeScript\n// plugins/constellation.ts\n\nimport {\n  envoyerMessageÀConstellation,\n  écouterMessagesDeConstellation,\n  envoyerMessageÀServeurConstellation,\n  écouterMessagesDeServeurConstellation,\n} from '#preload';\nimport type {App} from 'vue';\n\nimport {\n  générerMandataireÉlectronPrincipal,\n  GestionnaireServeur,\n} from '@constl/mandataire-electron-rendu';\n\nexport default {\n  install: (app: App) => {\n    app.provide('constl', générerMandataireÉlectronPrincipal({\n      envoyerMessageÀConstellation,\n      écouterMessagesDeConstellation,\n    }));\n\n    // Uniquement si vous voulez aussi activer un serveur WS local.\n    app.provide('serveurConstl', new GestionnaireServeur({\n      écouterMessagesDeServeurConstellation,\n      envoyerMessageÀServeurConstellation,\n    }));\n  },\n};\n\n```",
    "avancé/applications/électron.md.f965a79489e8622d5409dfb0b07ab38b": "Et voilà, le tour est joué ! Vous pouvez maintenant utiliser Constellation directement dans votre application Électron, dans le processus de rendu :",
    "avancé/applications/électron.md.ad61412c39e5a64ebc2bfd9363d70d49": "```Vue\n<script setup lang=\"ts\">\nimport { ref, inject } from 'vue';\nimport type ClientConstellation from \"@constl/ipa\"\n\nconst constellation = inject<ClientConstellation>('constl');\nconst idBd = ref<string>();\n\nconst créerBd = async () => {\n  idBd.value = await constellation.bds.créerBd({ licence: 'ODbl-1_0' })\n};\n</script>\n```",
    "avancé/applications/électron.md.a567e7e3db99c2a0a5937c7f2af24a29": "Vous pouvez également activer le serveur WS local, ce qui rendra l'instance de Constellation de votre appli\négalement accessible à d'autres programmes locaux sur votre ordinateur. Ceci permet, par exemple,\nde connecter un client [Python](https://github.com/reseau-constellation/client-python) ou \n[Julia](https://github.com/reseau-constellation/Constellation.js) à l'instance Constellation de votre appli.",
    "avancé/applications/électron.md.aa6c5eed138b76000f192ca16e3bbe1e": "```Vue\n<template>\n  <div>\n    <p v-if=\"port\">\n      Serveur actif sur port {{ port }}\n      <v-btn @click=\"fermerServeurLocal\">\n        Fermer le serveur\n      </v-btn>\n    </p>\n    <p v-else>\n      Serveur non initialisé\n      <v-btn @click=\"initialiserServeurLocal\">\n        Initialiser le serveur\n      </v-btn>\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { inject, ref } from 'vue';\n\nconst serveur = inject('serveurConstl');\nconst port = ref<number>();\n\nconst initialiserServeurLocal = async () => {\n  port.value = await serveur.initialiser();  // Ou spécifier le port avec serveur.initialiser(PORT);\n}\n\nconst fermerServeurLocal = async () => {\n  await serveur.fermer()  // Quand on a fini\n  port.value = undefined\n}\n</script>\n```",
    "avancé/autresLangages/introduction.md.610a2fb96f43ee902032d4e471ffa71f": "Autres langages",
    "avancé/autresLangages/introduction.md.52526059f9e47d4f691ed24b4686f5f8": "Constellation a beau être un projet JavaScript, il est possible d'accéder au réseau distribué à partir de clients\nen autres langages informatiques.\nLes clients [Python](./python.md) et [Julia](./julia.md) sont fonctionnels, et le client R est en progrès.",
    "avancé/autresLangages/introduction.md.37ed9dd2867fbd70f1d4e4582786ec1a": "Tous ces clients fonctionnent en ouvrant un serveur WS Constellation local sur votre machine. Le client Python, Julia ou autre communiquera ensuite avec ce serveur local par messages WS et vous permettent d'utiliser Constellation dans le langage de votre choix.",
    "avancé/autresLangages/introduction.md.075471d9cac9e92b818c224835cb3e1d": "Vous devrez donc toujours installer Constellation sur votre machine avant de pouvoir utiliser les clients d'autres langages.\nLa manière la plus facile est d'installer [l'interface graphique](https://réseau-constellation.ca/téléchargements) et puis d'activer le serveur WS sur la page de configuration. Alternativement, vous pouvez installer le serveur WS de Constellation sans interface graphique. Vous aurez besoin de [Node.js](https://nodejs.org/fr/) et de [pnpm](https://pnpm.io/fr/).",
    "avancé/autresLangages/introduction.md.a3172dd367104139f38b7882230f12f8": "Si nécessaire, installer pnpm :",
    "avancé/autresLangages/introduction.md.a2077e2a953e1dccdeb0f67723b4e45d": "```sh\n$ npm add -g pnpm\n```",
    "avancé/autresLangages/introduction.md.26685e840a5b38673f900dcd5f1aaa18": "Et puis installer Constellation :",
    "avancé/autresLangages/introduction.md.8828c5e0ecde155d38cc567f846a6c89": "```sh\n$ pnpm global add -g @constl/ipa @constl/serveur\n```\n",
    "avancé/autresLangages/julia.md.2344521e389d6897ae7af9abf16e7ccc": "Julia",
    "avancé/autresLangages/julia.md.618eb0ab2bebf47127ec12d506ebb9f9": "Le client Julia vous permet d'accéder au réseau Constellation à partir d'un programme en [Julia](https://julialang.org/).",
    "avancé/autresLangages/julia.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/autresLangages/julia.md.149fb6b00d83e742a61157319840ccd3": "Ce paquet est tout nouveau et n'est pas encore publié sur le dépôt de paquets Julia. Mais si vous êtes impatiente, vous pouvez l'installer ainsi :",
    "avancé/autresLangages/julia.md.1c1e13de9c621165376d5a5ca1b6e5c0": "```\npkg> add https://github.com/reseau-constellation/Constellation.jl.git\n```",
    "avancé/autresLangages/julia.md.2f5a71cea28bf345757d21b8c467b7c4": "Utilisation",
    "avancé/autresLangages/julia.md.9b91fcaf07c4f953f93817cb536d0918": "Vous pouvez accéder à toutes les fonctions de Constellation de type action ou suivi avec le client Julia. Les actions sont les fonctions qui vous redonnent immédiatement une valeur, tandis que les [fonctions de suivi](../../ipa/introduction.md#quelques-concepts) sont celles qui écoutent pour des changements du réseau et vous renvoient les nouvelles données en temps réel, au fur et à mesure qu'elles changent.",
    "avancé/autresLangages/julia.md.8436b713297e90a27c8dd3d1106ca02d": "Initialisation",
    "avancé/autresLangages/julia.md.d87dd01eac78636e8f3f72cecb1fabb7": "Vous devrez d'abord initialiser un nœud Constellation local sur votre machine. Vous pouvez le lancer manuellement à travers l'interface, ou bien le lancer directement en Julia :",
    "avancé/autresLangages/julia.md.a1f9a7c131871f401965e003de2286aa": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n        # Faire quelque chose avec Constellation...\n    end\nend\n\n# Ou, si vous avez lancé le nœud local à travers l'interface, notez le numéro de port et puis lancer le client directement\nport = 5123  # Changer comme nécessaire\n\nConstellation.avecClient(port) do client\n    # Faire quelque chose avec Constellation...\nend\n```",
    "avancé/autresLangages/julia.md.b953d23a8d952b16516c7272134dd7e7": "Actions et suivis",
    "avancé/autresLangages/julia.md.56c5897d04bb64ca09d45bbe8a454637": "Pour appeller une fonction d'action, utilisez `Constellation.action`. Cette fonction prend le client, le nom de la fonction Constellation telle que [documentée](../../ipa/introduction.md) et puis, s'il y a lieu, un dictionnaire des paramètres de la fonction.",
    "avancé/autresLangages/julia.md.c45aaee5c487951d24dd24b9700a05e0": "Pour appeller une fonction de suivi, utilisez `Constellation.suivi`. Cette fonction prend les mêmes paramètres que `Constellation.action`, mais mettra les résultats à jour automatiquement chaque fois que ceux-ci changent.",
    "avancé/autresLangages/julia.md.93cd33819cd475a24fd276d4eb89ba54": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n        \n        # Vous pouvez appeler une fonction sans argument...\n        idCompte = Constellation.action(client, \"obtIdCompte\")\n\n        # ...ou avec arguments\n        idBd = Constellation.action(client, \"bds.créerBd\", Dict([(\"licence\", \"ODbl-1_0\")]))\n\n        # Nous pouvons aussi appeler des fonctions de suivi\n        Constellation.action(client, \"bds.ajouterNomsBd\", Dict([(\"id\", idBd), (\"noms\", Dict([(\"fr\", \"Météo\"), (\"த\", \"காலநிலை\")]))]))\n        \n        dicNoms = Dict([])\n        réponse = Constellation.suivre(client, \"bds.suivreNomsBd\", Dict([(\"id\", idBd)])) do noms\n            dicNoms = noms\n        end\n        \n        print(dicNoms)\n\n        # Annuler le suivi\n        réponse[\"fOublier\"]()  \n        \n        # Il est probablement plus commode d'obtenir une image instantanée du résultat\n        nomsÀCetInstant = Constellation.suivreUneFois(client, \"bds.suivreNomsBd\", Dict([(\"id\", idBd)]))\n\n    end\nend\n\n```",
    "avancé/autresLangages/julia.md.52f486bb58526a3f3ec6c1c85cbcab91": "Fonctions raccourci",
    "avancé/autresLangages/julia.md.737ba690ccc9b2e58d3be2048ab2d911": "À venir",
    "avancé/autresLangages/julia.md.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "avancé/autresLangages/julia.md.c4471074038db9fac9d1d3686d6a9801": "Les fonctions de recherche fonctionnent comme `Constellation.suivi`, mais elles envoient deux fonctions en guise de réponse plutôt qu'une seule : une pour annuler la recherche (`fOublier`), et une pour modifier le nombre de résultats désirés (`fChangerN`).",
    "avancé/autresLangages/julia.md.46ea2bbadd87a7c02e2d58dcbfbcc154": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n        \n        # Créer 5 variables pour rechercher\n        variables = [Constellation.action(client, \"variables.créerVariable\", Dict([(\"catégorie\", \"numérique\")])) for _ in 1:4]\n\n        résultatsRecherche = []\n        réponse = Constellation.suivre(\n            client, \"recherche.rechercherVariableSelonNom\", Dict([(\"nomVariable\", \"humidité\"), (\"nRésultatsDésirés\", 3)])\n        ) do résultat\n            résultatsRecherche = résultat\n        end\n\n        # Nos fonctions de contrôle\n        fOublier = réponse[\"fOublier\"]\n        fChangerN = réponse[\"fChangerN\"]\n\n        # Détecter nouvelles variables\n        Constellation.action(client, \"variables.ajouterNomsVariable\", Dict([(\"id\", variables[1]), (\"noms\", Dict([(\"fr\", \"Humidite\")]))]))\n        Constellation.action(client, \"variables.ajouterNomsVariable\", Dict([(\"id\", variables[2]), (\"noms\", Dict([(\"fr\", \"humidite\")]))]))\n        \n        print([r[\"id\"] for r in résultatsRecherche] == [variables[2], variables[1]])\n\n        # Diminuer N\n        fChangerN(1)\n        sleep(1)  # Laisser le temps que ça aie effet\n        print(length(résultatsRecherche))  # == 1\n        print(résultatsRecherche[1][\"id\"] == variables[2])  # Le meilleur résultat devrait être retenu\n\n        # Améliorer résultat recherche\n        Constellation.action(client, \"variables.ajouterNomsVariable\", Dict([(\"id\", variables[3]), (\"noms\", Dict([(\"fr\", \"humidité\")]))]))\n        print(résultatsRecherche[1][\"id\"])  # == variables[3]\n\n        # Augmenter N\n        fChangerN(4)\n        sleep(1)\n        print(length(résultatsRecherche))  # == 3\n\n        # Arrêter le suivi\n        fOublier()\n\n        # Maintenant, les résultats ne sont plus réactifs\n        Constellation.action(client, \"variables.ajouterNomsVariable\", Dict([(\"id\", variables[4]), (\"noms\", Dict([(\"fr\", \"humidité\")]))]))\n        print(length(résultatsRecherche))  # Toujours égal à 3\n\n    end\nend\n```",
    "avancé/autresLangages/python.md.a7f5f35426b927411fc9231b56382173": "Python",
    "avancé/autresLangages/python.md.115827304eab7ef960b4a8eadf73fc24": "[![Paquet Python](https://github.com/reseau-constellation/client-python/actions/workflows/test.yaml/badge.svg)](https://github.com/reseau-constellation/client-python/actions/workflows/test.yaml)",
    "avancé/autresLangages/python.md.d5981d9c337925154edf66040348b0dc": "Cette librarie offre un client [Constellation](https://reseau-constellation.github.io/constellation)\npour [Python](https://python.org). Elle fonctionne en lançant\nun [serveur ws Constellation](https://github.com/reseau-constellation/serveur-ws)\nlocal, avec lequel elle gère ensuite la communication par websocket.",
    "avancé/autresLangages/python.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/autresLangages/python.md.fdc99817bb499bc397bb6d1a396e0860": "Vous pouvez installer ConstellationPy avec `poetry` :",
    "avancé/autresLangages/python.md.b01aac45e9b80b799541c739b4c01736": "```sh\n$ poetry add constellationPy\n```",
    "avancé/autresLangages/python.md.a49c3ca9033290e652a6d2b39d27adf4": "... ou bien avec `pip`",
    "avancé/autresLangages/python.md.e5ba3f667f3bf12335e54e090459b9f9": "```sh\n$ pip install constellationPy\n```",
    "avancé/autresLangages/python.md.14e3491b18c0f1adacde335b945a30ac": "::: tip\nSi le serveur Constellation n'est pas déjà installé sur votre machine, ConstellationPy l'installera automatiquement pour\nvous. Pour ce faire, vous devrez au tout minimum avoir [Node.js](https://nodejs.org/fr/)\ninstallé localement.\n:::",
    "avancé/autresLangages/python.md.2f5a71cea28bf345757d21b8c467b7c4": "Utilisation",
    "avancé/autresLangages/python.md.c4a430f55f0f770ffa80b9b5c3918e0d": "ConstellationPy est une libraries **asynchrone** basée sur [trio](https://trio.readthedocs.io). Étant donné que le serveur\nConstellation est fondamentalement asynchrone aussi, c'était la décision naturelle.",
    "avancé/autresLangages/python.md.8753c8cea0e1de7e7700a3d26aee7081": "Cependant, nous comprenons bien que la grande majorité des utilisatrices et utilisateurs de Python n'ont aucune idée de\nce qu'est la programmation asynchrone, ni aucun goût ou raison de l'apprendre. C'est pour cela que ConstellationPy vous\noffre également une IPA synchrone.",
    "avancé/autresLangages/python.md.b15b28ca5b47a116b8ff2da3136f5097": "::: tip\nVous ne savez pas ce que « synchrone » ou « asynchrone » veulent dire ? Ne vous en faites pas et utilisez l'IPA synchrone. « Synchrone » est le terme technique pour le style de code « normal » Python que vous connaissez bien. Si vous voulez en savoir plus, [voici](https://adrienjoly.com/cours-nodejs/sync-vs-async.html) une belle présentation de la différence entre les deux (en JavaScript).\n:::",
    "avancé/autresLangages/python.md.829c80b59f37d6de4be7fd39a1bb6434": "IPA synchrone",
    "avancé/autresLangages/python.md.2b02ef97037f2e78829c1b38f5f47b53": "En premier lieu, nous devons lancer le serveur Constellation. C'est absolument nécessaire, à moins que vous n'aviez déjà lancé un serveur Constellation [manuellement](https://github.com/reseau-constellation/serveur-ws/blob/master/README.md#ligne-de-commande), lorsque, par exemple, vous voulez exécuter plusieurs codes Python qui utilisent Constellation en parallèle sans dupliquer le serveur (oui, c'est bien possible) !",
    "avancé/autresLangages/python.md.5f9d0fa2cb9974075320ddbefc7b5f8d": "::: warning\nAttention ! L'IPA synchrone fonctionne bien pour des petites tâches (p. ex., récupérer un ou deux jeux de données), mais l'IPA asynchrone est beaucoup plus efficace si vous traitez de grands nombres de données ou de requêtes à Constellation. Si vous avez besoin d'accéder beaucoup de différentes bases de données Constellation, peut-être que ça vaudrait la peine, après tout, [d'apprendre](https://trio.readthedocs.io/en/stable/tutorial.html) comment utiliser ces drôles de `async` et `await` en Python.\n:::",
    "avancé/autresLangages/python.md.c3df59443006c16e3a2365f849e75ad5": "Donc, on commence. La façon la plus sure, c'est d'utiliser un bloc `with`, car celui-ci fermera automatiquement le\nserveur une fois que vous aurez terminé avec. **Cette syntaxe permettra aussi au client Constellation de détecter\nautomatiquement le port auquel il devra se connecter.**",
    "avancé/autresLangages/python.md.1515e176675b095361dc71006212e201": "```python\nfrom constellationPy import Serveur, ClientSync\n\nwith Serveur():\n    client = ClientSync()\n    données = client.appelerUneFonction()\n    ...\n\n```",
    "avancé/autresLangages/python.md.c43a009e611961159379c73285ef1ac1": "Vous pouvez aussi lancer le client Constellation manuellement. Cette option est particulièrement utile si vous voulez \nobtenir les données les plus à jour du réseau.\nN'oubliez pas que Constellation est un *réseau* d'utilisatrices et d'utilisateurs comme vous ! Il n'y\na donc pas de « serveur central » Constellation en tant que tel pour garder une copie des données. \nSi les données qui vous intéressent sont sur\nl'ordinateur ou le téléphone d'une autre participante au réseau, cela peut prendre un peu de temps\npour que votre nœud local puisse se connecter à la nuée d'autres nœuds Constellation et reçoive\nles données les plus récentes. Comme règle générale, le plus longtemps le nœud reste en ligne,\nle plus de connexions et de données il obtiendra.",
    "avancé/autresLangages/python.md.61070332a1ef6c4afe7a9a4dc415cc34": "Vous pouvez donc lancer votre nœud local à l'aide de la ligne de commande. Vous pouvez utiliser\nn'importe quel port libre (ici 5001). Vous pouvez le laisser rouler aussi longtemps que vous voudrez,\nil y se synchronisera automatiquement avec le réseau Constellation.\nTout client pyConstellation que vous lancerez en même temps obtiendra ainsi les données les plus\nà jour disponibles.",
    "avancé/autresLangages/python.md.7b83e584ea0f33b7c4789d96238ecc06": "::: tip\nNote : pour installer Constellation pour la première fois, faites rouler le code suivant une seule fois sur votre ordinateur :",
    "avancé/autresLangages/python.md.daa901f9281eb3968f70707337705749": "```python\nfrom constellationPy import mettre_constellation_à_jour\n\nmettre_constellation_à_jour()\n```\n",
    "avancé/autresLangages/python.md.e441fcf4a7686817fe868bf38a5c2c07": ":::",
    "avancé/autresLangages/python.md.2f9241e1a79c1cdbf69d23b9d483b4f5": "Vous pourrez ensuite invoquer le serveur Constellation ainsi :\n",
    "avancé/autresLangages/python.md.82169a9d1b444a29355d5d287ce2b223": "```shell\nconstl lancer --port 5001 -b\n```",
    "avancé/autresLangages/python.md.3133db4849d952065eaf90dcacc1f967": "Vous ne savez pas quel port mettre ? Lancez tout simplement `constl lancer` et puis Constellation\nvous donnera le numéro du port libre qu'elle aura trouvé.",
    "avancé/autresLangages/python.md.e427e8baec166d3396b0e5cc15ecae78": "Vu que vous avez déjà lancé votre propre serveur Constellation, vous devrez spécifier le port manuellement dans le client :",
    "avancé/autresLangages/python.md.034f46d0749deb4f832431d1fc41936a": "```python\nfrom constellationPy import ClientSync\n\nclient = ClientSync(port=5001)\n...\n\n```",
    "avancé/autresLangages/python.md.28855846c7f24bed24a84a988b34336d": "::: tip\nNote : vous pouvez également spécifier le port du client sur `Client` et `ouvrir_client` (voir ci-dessous).\n:::",
    "avancé/autresLangages/python.md.70936993fd5c7cb9cee4d33dc8d9fbf5": "Fonctions disponibles",
    "avancé/autresLangages/python.md.e07d82927641097eecf7f7e08ee3c551": "Toutes* les fonctions de l'IPA (Interface de programmation\nd'application) [Constellation](https://github.com/reseau-constellation/ipa) sont disponibles.",
    "avancé/autresLangages/python.md.57dc0340365e5a37a100a349a34d0548": "::: tip\nNote : vous pouvez appeler les fonctions Constellation en forme kebab (`ma_fonction`, style Python) ou bien chameau (`maFonction`, style JavaScript). À titre d'exemple :",
    "avancé/autresLangages/python.md.669b24861035b4609e3d9d135a676aee": "```python\nfrom constellationPy import ClientSync, Serveur\n\nwith Serveur():\n    client = ClientSync()\n\n    résultatChameau = client.obtIdOrbite()\n    résultat_kebab = client.obt_id_orbite()\n\n    print(résultatChameau == résultat_kebab)\n```\n",
    "avancé/autresLangages/python.md.1565a8d3a5c9290a4b16eecc6dab43c1": "Vous pouvez également accéder les sous-objets de Constellation (`profil`, `bds`, `tableaux`, et ainsi de suite) :",
    "avancé/autresLangages/python.md.4efa48c6171c073fc32920e23d596033": "```python\nfrom constellationPy import ClientSync, Serveur\n\nwith Serveur():\n    client = ClientSync()\n\n    client.profil.sauvegarder_nom(langue=\"fr\", nom=\"moi !\")\n    client.bds.créer_bd(licence=\"ODbl-1.0\")\n\n```",
    "avancé/autresLangages/python.md.1af2c724739b24e71e0bb285bdab2c4f": "Fonctions bien commodes",
    "avancé/autresLangages/python.md.fa639800302f701725000a3b378f054b": "L'IPA du client Python vous offre aussi quelques fonctions plus commodes qui n'existent pas dans l'IPA original de\nConstellation :",
    "avancé/autresLangages/python.md.932d2acd7a667064879abf1b464b17ec": "```python\nfrom constellationPy import ClientSync, Serveur\n\nid_tableau = \"/orbitdb/zdpu...\"\n\nwith Serveur():\n    client = ClientSync()\n    données = client.obt_données_tableau(id_tableau=id_tableau)\n```",
    "avancé/autresLangages/python.md.212eefd21ad20ffabd7a2765cf48c3b8": "Vous pouvez également obtenir les données en format Pandas, y compris avec les colonnes identifiées selon\nle nom des variables correspondantes dans la langue de votre choix, si elle est disponible :",
    "avancé/autresLangages/python.md.5673de53a9d07f2e9ec8bf26e1673f5f": "```python\nfrom constellationPy import ClientSync, Serveur\n\nid_tableau = \"/orbitdb/zdpu...\"\n\nwith Serveur():\n    client = ClientSync()\n    données = client.obt_données_tableau(id_tableau=id_tableau, langues=[\"fr\", \"es\"], formatDonnées=\"pandas\")\n```",
    "avancé/autresLangages/python.md.c7bce479b32e9a65c2e7ac869835185e": "**Quelques points importants**",
    "avancé/autresLangages/python.md.44b64fd15caec5d1629b400e8e7bffc1": "* Les fonctions plus obscures qui prennent plus qu'une autre fonction comme argument (p.\n  ex. `client.suivreBdDeFonction`) ne fonctionnent pas avec le client Python. Ne vous en faites pas. Elles sont obscures\n  pour une raison. Laissez-les en paix. Vous avez amplement de quoi vous amuser avec le reste de l'IPA.\n* Vous **devez** utiliser des paramètres nommés (p. ex., `client.bds.créerBd(licence=\"ODbl-1.0\")`). Si vous ne le\n  faites pas (`client.bds.créerBd(\"ODbl-1.0\")`), ça va vous créer des ennuis. Les noms des paramètres doivent être\n  les mêmes que dans l'IPA Constellation JavaScript (p. ex., l'exemple précédent provient de la version JavaSCript \n  `client.bds.créerBd({ licence: \"ODbl-1.0\" })`).\n* Avec le client synchrone, les fonctions de suivi (voir ci-dessous) doivent être appelées avec une fonction vide (p.\n  ex., `lambda: pass` ou bien tout simplement `fais_rien`) à la place de la fonction de suivi.\n* Vous vous demandez où trouver tous ces drôles de « id tableau » pour les bases de données qui vous intéressent ? Il\n  s'agit de l'identifiant unique d'un tableau ou d'une base de données, que vous pouvez récupérer lorsque vous créez la\n  base de données, ou bien visuellement avec\n  l'[appli Constellation](https://reseau-constellation.github.io/constellation)\n  (recherchez l'icône lien 🔗).",
    "avancé/autresLangages/python.md.19a5e0fd789a0ad602bff1acc5497710": "Fonctions de suivi",
    "avancé/autresLangages/python.md.d3a5e0a40efe35bd996dc7be9fde2363": "Constellation, dans sa version asynchrone JavaScript, offre des fonctions qui, plutôt que de rendre le résultat\nimmédiatement, *suivent* le résultat à travers le temps et vous notifient (selon une fonction que vous choisissez)\nchaque fois que le résultat change. La grande majorité des fonctions utiles de l'IPA de Constellation (p.\nex., `client.tableaux.suivreDonnées`) sont de ce genre.",
    "avancé/autresLangages/python.md.750df6bc3855afe2e91c31b7aca4d208": "Évidemment, ce comportement n'est pas util dans un programme synchrone. Le client synchrone `ClientSync`\ns'occupe donc de vous rendre le résultat, sans tracas. Il vous suffira de passer une fonction vide là où la fonction\noriginale s'attendait à avoir la fonction de suivi. Par exemple, si l'on appellerait la fonction comme suit dans\nConstellation JavaScript,",
    "avancé/autresLangages/python.md.3138f50fd9dce3bb3a98a3bc5028e51c": "```javascript\nconst données = await client.tableaux.suivreDonnées({ idTableau: id_tableau, f: fSuivi });\n```",
    "avancé/autresLangages/python.md.0d452872865160603df133d1acff6dc4": "Ici, en Python, nous ferons ainsi :",
    "avancé/autresLangages/python.md.ce9b45919c8ef7da15892268bad75daf": "```python\nfrom constellationPy import ClientSync, Serveur, fais_rien\n\nid_tableau = \"/orbitdb/zdpu...\"\nwith Serveur():\n    client = ClientSync()\n\n    mes_données = client.tableaux.suivre_données(id_tableau=id_tableau, f=fais_rien)\n```",
    "avancé/autresLangages/python.md.a0cea101eb6ca687074ddb2d74cfdfa9": "IPA asynchrone",
    "avancé/autresLangages/python.md.628297ee0cb40bf684658295af1bc812": "L'IPA asynchrone doit être utilisée avec [trio](https://trio.readthedocs.io/). Il a les mêmes fonctions que l'IPA\nsynchrone, mais dois être invoqué dans un bloc `async with ouvrir_client() as client:`",
    "avancé/autresLangages/python.md.9060bac37ea40213f5f53309e36ee023": "```python\nimport trio\n\nfrom constellationPy import Serveur, ouvrir_client\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def principale():\n    with Serveur():\n        async with ouvrir_client() as client:\n            données = await client.obt_données_tableau(id_tableau=id_tableau)\n            print(données)\n            ...\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/python.md.bc5cf2aa32ab07ade8583336735b822c": "Fonctions de suivi et `une_fois`",
    "avancé/autresLangages/python.md.5b0cfa1e91846b1cb37e33b73b634594": "Tel que mentionné ci-dessus, la majorité des fonctions utiles de Constellation sont des fonctions de suivi. Nous devons\nles appeler avec une fonction qui sera invoquée à chaque fois que le résultat sera mis à jour.",
    "avancé/autresLangages/python.md.458356b7497fc279d708ee55ba47d61f": "```python\nimport trio\n\nfrom constellationPy import Serveur, ouvrir_client\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def principale():\n    with Serveur():\n        async with ouvrir_client() as client:\n            # Suivre les données du réseau pour 15 secondes, et imprimer les résultats au fur et à mesure\n            # qu'ils nous parviennent du réseau\n            oublier_données = await client.tableaux.suivre_données(id_tableau=id_tableau, f=print)\n            await trio.sleep(15)\n\n            oublier_données()  # Maintenant on ne recevra plus les mises à jour des données\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/python.md.0a9a3fa3d70da7e6c78104b230ff9501": "Mais en Python, il est probable que, au lieu de vouloir suivre le résultat de la fonction à travers le temps, vous\npréférerez obtenir les données présentes et puis poursuivre vos analyses. La fonction `une_fois`\nvous permet de faire justement cela :",
    "avancé/autresLangages/python.md.a301ed55e08f9906e49976d432db1727": "```python\nimport trio\n\nfrom constellationPy import Serveur, ouvrir_client, une_fois\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def principale():\n    with Serveur():\n        async with ouvrir_client() as client:\n            # On doit définir une fonction auxiliaire qui ne prend que la fonction de suivi\n            # en tant qu'argument\n            async def f_données(f):\n                return await client.tableaux.suivre_données(id_tableau=id_tableau, f=f)\n\n            # La fonction `une_fois` appellera `f_données`, attendra le premier résultat,\n            # et nous renverra celui-ci.\n            données = await une_fois(f_données, client)\n\n            return données\n\n\nmes_données = trio.run(principale)\nprint(mes_données)\n```",
    "avancé/autresLangages/python.md.3921b958a3d441de037496a9f857cad2": "Utilisation avancée",
    "avancé/autresLangages/python.md.1e653dafe765cbce4c27c4ea98df72af": "Voici un exemple un peu plus avancé. Si vous avez plusieurs coroutines Python que vous voulez exécuter en parallèle avec\nConstellation, vous pouvez créer une pouponnière `trio` et la réutiliser pour les deux coroutines en invoquant `Client`\ndirectement.",
    "avancé/autresLangages/python.md.ada668fea30b6cd05074e28eeb148e6f": "```python\nimport trio\nfrom constellationPy import Client\n\nrésultats = {}\n\n\nasync def coroutine1(client):\n    idBd = await client.bds.créerBd(licence=\"ODbl-1_0\")\n    résultats[\"1\"] = idBd\n\n\nasync def coroutine2(client):\n    idBd = await client.bds.créerBd(licence=\"ODbl-1_0\")\n    résultats[\"2\"] = idBd\n\n\nasync def principale():\n    async with trio.open_nursery() as pouponnière:\n        async with Client(pouponnière) as client:\n            await client.connecter()  # À ne pas oublier ! Sinon je ne suis pas responsable.\n\n            pouponnière.start_soon(coroutine1, client)\n            pouponnière.start_soon(coroutine2, client)\n\n\ntrio.run(principale)\n\nprint(résultats)\n```",
    "avancé/autresLangages/python.md.7b4cac65638951683d00c50dd6597dc0": "Ceci peut aussi être utile avec\nles [canaux](https://trio.readthedocs.io/en/stable/reference-core.html#using-channels-to-pass-values-between-tasks)\nde `trio` pour communiquer entre les coroutines :",
    "avancé/autresLangages/python.md.aa601189e42ea1d0b8d72e8f2ff1ebea": "```python\nimport trio\nfrom constellationPy import Client\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def coroutine_constellation(pouponnière, canal_envoie):\n    async with Client(pouponnière) as client:\n        await client.connecter()  # À ne pas oublier ! Sinon je ne suis pas responsable.\n\n        données = await client.obt_données_tableau(id_tableau=id_tableau)\n\n        async with canal_envoie:\n            await canal_envoie.send(données)\n\n\nasync def une_autre_coroutine(canal_réception):\n    async with canal_réception:\n        async for message in canal_réception:\n            print(message)  # En réalité, faire quelque chose d'asynchrone, comme écrire au disque\n\n\nasync def principale():\n    async with trio.open_nursery() as pouponnière:\n        canal_envoie, canal_réception = trio.open_memory_channel(0)\n\n        pouponnière.start_soon(coroutine_constellation, pouponnière, canal_envoie)\n        pouponnière.start_soon(une_autre_coroutine, canal_réception)\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/python.md.73bf8ac6bf013233660c2f7b62fabf4e": "Traitement des erreurs",
    "avancé/autresLangages/python.md.13a62ba6f5d2d1d69bd86669297536c3": "Vous pouvez aussi initialiser `Client` avec un canal `trio` pour recevoir les erreurs. Si le client ou le serveur\nencontre une erreur, celle-ci sera envoyée au canal erreur au lieu de soulever une erreur et d'arrêter exécution du\nprogramme. Cette option peut être utile lorsque vous ne voulez pas qu'une erreur sur une requête arrête toute\nl'exécution du logiciel.",
    "avancé/autresLangages/python.md.3f0e84957696ae24105b34df76eae5ce": "```python\nimport trio\n\nfrom constellationPy import Serveur, Client\n\n\nasync def coroutine_client(pouponnière, canal_envoie_erreur):\n    async with canal_envoie_erreur:\n        async with Client(pouponnière) as client:\n            await client.connecter(canal_envoie_erreur)  # À ne pas oublier ! Sinon je ne suis pas responsable.\n            # Faire quelque chose avec le client\n\n\nasync def coroutine_erreurs(canal_reçoie_erreurs):\n    async with canal_reçoie_erreurs:\n        async for erreur in canal_reçoie_erreurs:\n            print(erreur)  # Ou écrire à un fichier journal sur le disque...\n\n\nasync def principale():\n    with Serveur():\n        async with trio.open_nursery() as pouponnière:\n            canal_envoie_erreur, canal_reçoie_erreur = trio.open_memory_channel(0)\n\n            pouponnière.start_soon(coroutine_client, pouponnière, canal_envoie_erreur)\n            pouponnière.start_soon(coroutine_erreurs, canal_reçoie_erreur)\n\n\ntrio.run(principale)\n```",
    "exemples/diffusion.md.6bac750358f0e788f6eaa7e33c5f4fdd": "Diffusion de données",
    "exemples/scienceCitoyenne.md.23171fe4fd6ef39d7a0b5e888493cf86": "Science citoyenne",
    "guide/concepts.md.65e6385ed34ec95b4c7dd1a319ccc9ce": "Concepts clefs",
    "guide/concepts.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "guide/concepts.md.577d7068826de925ea2aec01dbadf5e4": "Client",
    "guide/concepts.md.46cb6d6f08c3ac10a63b5c40da5205c4": "Le [client](/ipa/client.md) est le point central de Constellation. Chaque compte correspond à un client Constellation.",
    "guide/concepts.md.820c6916ebfb13d1738ab6a13cf0a69b": "Profil",
    "guide/concepts.md.a31e9938812a4b60402bf63eae093b7e": "Le [profil](/ipa/profil.md) de Constellation organise les information du compte d'utilisateur.",
    "guide/concepts.md.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "guide/concepts.md.e41f5c842a1830506814ddccc2d4696e": "Les [mots-clefs](/ipa/motsClefs.md) servent à indexer les bases de données.",
    "guide/concepts.md.059c8595193d0680e728c17de17b3169": "Bases de données",
    "guide/concepts.md.884b83f2d41bce4d903923f8224ead9c": "L'unité centrale de Constellation est la [base de données](/ipa/bds.md).",
    "guide/concepts.md.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "guide/concepts.md.3caae57bd1cbf86ae2f0c6c0f909284e": "Chaque base de données à un ou plusieurs [tableaux](/ipa/tableaux.md).",
    "guide/concepts.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "guide/concepts.md.a2df67abfee4160ccc50409ed742af44": "Chaque colonne d'un tableau est associée à une [variable](/ipa/variables.md).",
    "guide/concepts.md.683aa9561cfe5618d140710d10917697": "Projet",
    "guide/concepts.md.583aff017b20237d19b1f594670cb546": "Un [projet](/ipa/projets.md) regroupe plusieurs bases de données traitant du même sujet.",
    "guide/concepts.md.836d64c92151a341b114b051cb4cbc83": "Réseau",
    "guide/concepts.md.28cfb07fd0072c217d16dc7e3a950751": "Le [réseau](/ipa/réseau.md) vous permet d'accéder aux informations des autres membres connectés.",
    "guide/concepts.md.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "guide/concepts.md.6997a2541cba500fc84221bed5f83bc8": "Vous pouvez également [rechercher](/ipa/recherche.md) les données qui vous intéressent.",
    "guide/concepts.md.bc54c637e9230a4e9f41e88b14c53f8a": "Nuée",
    "guide/concepts.md.6de730f41669d5a037957b01fb1bbfb1": "Les [nuées](/ipa/nuées.md) vous permettent de créer des projets de science citoyenne et de collecter toutes les contributions de vos participants à la même place.\n",
    "guide/installation.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "guide/installation.md.1aed75df7f82dd20d973718c7eb67e1f": "Constellation peut être installé sur votre ordinateur ou bien accédé à travers l'[appli Internet](https://réseau-constellation.ca). Si vous l'installez, cela peut être fait avec ou sans l'interface graphique. ",
    "guide/installation.md.3582ca59615ca0d8f7741c163a5dcec6": "Il y a plusieurs avantages à installer Constellation sur votre ordinateur plutôt que d'utiliser l'appli en ligne. Premièrement, vous aurez accès à plus de mémoire, l'appli en ligne étant limitée par la mémoire de votre navigateur. En plus, la version installée offre plus de fonctionnalités, tel le partage automatique de vos données à base d'un fichier local et la sauvegarde automatique des données Constellation sur votre ordinateur.",
    "guide/installation.md.420cfa938e93985f61b6520554e50be5": "Fonctionnalité",
    "guide/installation.md.439bd2638ac0bc5f268b65e7a3268b03": "Constellation navigateur",
    "guide/installation.md.cedce24b39179850faf2080a51cb1a7c": "https://réseau-constellation.ca",
    "guide/installation.md.4487bf37ddf3e5ad692767bde2c5ac35": "Constellation installée",
    "guide/installation.md.a879041545c4ac1ad2442f03502d04ac": "https://réseau-constellation.ca/téléchargements",
    "guide/installation.md.16e218b46bbbdad91a11ea9b6556795d": "Exportation manuelle",
    "guide/installation.md.fa3bf6e4f7d17c9beb330c0d59fcffad": "✅",
    "guide/installation.md.35df84b70aa95d4d9d43ddc5e921780b": "Exportation automatisée",
    "guide/installation.md.9f7cc089afd4067764f9649e7cc6d108": "❌",
    "guide/installation.md.84c1f542ecd2f109b45831fbb6f009ad": "Importation manuelle (URL ou fichier)",
    "guide/installation.md.a65fd33cafeb136c5435087b7f26fdf7": "Importation automatisée (URL)",
    "guide/installation.md.fc158b3dee9596e3d01fad7e4d4ac67f": "Importation automatisée (fichier)",
    "guide/installation.md.2865252c83551b61bd7d2673a640fc43": "Mémoire",
    "guide/installation.md.720d64f6868f86dd2bc53ae4dde28d81": "Navigateur",
    "guide/installation.md.b222ce1d25f19d7b8ca005440c794baf": "Système",
    "guide/installation.md.372a7746cfaa469aa546b97afd492a34": "Connectivité TCP",
    "guide/installation.md.a04758249c2b73c0882ef7c9d152bcf4": "Connectivité WebRTC",
    "guide/installation.md.65f048fbee5572ff9589cb6dc1bdff61": "Connectivité WebTransport",
    "guide/installation.md.5877deac64b7ef1f971940c028d8b37f": "✅ (Pas Firefox)",
    "guide/installation.md.771520b6c257449cc5cdc8cde7fde571": "Interface graphique",
    "guide/installation.md.2feb7f938fc35ca187ac3d1028769228": "C'est la façon la plus facile d'installer et d'utiliser Constellation. En plus, on est bien fièrs de notre jolie interface. Vous pouvez télécharger la version la plus récente [ici](https://réseau-constellation.ca/téléchargements).",
    "guide/installation.md.c6af851d6f9c90d6080559048b301e23": "Autres logiciels",
    "guide/installation.md.51042022d1929eac7789a9e8612d4546": "Si vous préférez travailler avec du code, qu'il s'agisse de JavaScript, Python, Julia ou R, il vous est possible d'utiliser Constellation dans ces langages, avec ou sans l'interface graphique ci-dessus. Voir notre [guide avancé](../avancé/autresLangages/introduction.md) pour démarrer.\n",
    "guide/introduction.md.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "guide/introduction.md.c7382476a0ca3126a14275ddc8d1db50": "Constellation est un logiciel de bases de données scientifiques distribuées. Il vous permet de collecter et de diffuser vos données scientifiques sans serveur ou dépôt centralisé.",
    "guide/introduction.md.aa70c25516cd01074da0db4da6ae9203": "![systèmeCentralisé](/images/systèmeCentralisé.svg)",
    "guide/introduction.md.cdfe5fce7ccb84099f3e781afd8200cb": "Philosophie générale",
    "guide/introduction.md.789762f8d2363cb623d5dc9e1c26f048": "**Ouvert** : Les données scientifiques devraient être ouvertes et accessibles. Toutes les données partagées sur Constellation sont publiques. (Si vous travaillez en recherche clinique, ce n'est peut-être pas le logiciel pour vous.)",
    "guide/introduction.md.0f35e84c735d830aa08dc76174b428e3": "**Source ouverte** : Tous les logiciels de l'univers Constellation sont distribués sous licence libre.",
    "guide/introduction.md.82879b7ea27a5e64f03b5b60c23a5d25": "**Multilingue** : Le monde est une place multilingue ; le monde de la recherche, lui, ne l'est malheureusement pas autant. Beaucoup de données sont collectées dans des régions du monde et ensuite publiées dans des langues que les personnes qui les ont fournies ne parlent pas. Cependant, la structure des logiciels que nous utilisons façonne notre pensée, pour le mieux ou pour le pire. Beaucoup de logiciels de bases de données (Excel, MongoDB, etc.) ne permettent qu'un seul nom par colonne ou champ ; nous sommes ainsi entraînés à entrer des données monolingues. Nous avons donc conceptualisé Constellation afin qu'elle guide ses utilisateurs et utilisatrices vers une meilleure inclusion. Chaque objet en Constellation, soit-ce votre profil, une variable ou une base de données, peut être nommé en autant de langues que vous voulez. Vos données apparaîtront donc dans la langue préférée de chacune de vos utilisatrices finales.\n",
    "guide/pairÀPair.md.1ee0d4547f071b9a894f352230f2e349": "Systèmes pair à pair",
    "guide/pairÀPair.md.67c23830f2c00112c67ee629e15106c7": "Afin de bien comprendre Constellation, c'est peut-être util de comprendre ce qu'est un système distribué ou pair à pair. Premièrement, ils ne sont pas exactement la même chose. Un système pair à pair, c'est un système qui, contrairement à votre courriel ou à Google, ne nécessite pas de serveur central pour fonctionner. Chouette, n'est-ce pas ?",
    "guide/pairÀPair.md.3e606eb02f3fb76f67238da6425f14a5": "Les systèmes pair à pair peuvent être **décentralisés** ou bien **distribués**. Dans un système décentralisé, le logiciel est trop gros ou compliqué pour fonctionner sur la majorité des téléphones ou ordinateurs des participants au réseau. Donc, certains participants au réseau qui ont les gros ordinateurs nécessaires servent de point contact et de service pour la majorité des autres participants. À la fin, c'est beaucoup comme un système centralisé.",
    "guide/pairÀPair.md.d475104d9c024370bc6dd9bd05445925": "![distribuéVsDécentralisé](/images/distribu%C3%A9D%C3%A9centralis%C3%A9.svg)",
    "guide/pairÀPair.md.f0780bb55d237c85505789214977c92b": "Au contraire, dans un système distribué, tout les participants sont égaux les un aux autres. Certains peuvent être connectés avec des machines plus puissantes ou avec plus de mémoire, bien sûr, mais tous intéragissent d'égal à égal dans le réseau.",
    "guide/pairÀPair.md.43f793a266f47fe63fa9712ee2b0e7bc": "::: info\nConstellation n'est **pas** une chaîne de bloques !",
    "guide/pairÀPair.md.fa99a54b17e70959d782a6c58369262b": "Les systèmes pair à pair ont malheureusement une mauvaise réputation, peut-être parce que la majorité des premiers logiciels populaires étaient des platformes de partage de médias piratées. Ensuite sont arrivé les cryptomonnaies basées sur les chaînes de bloques, qui ont fréquemment bien mérité leur réputation en tant que [pyramides de Ponzi](https://web3isgoinggreat.com/) et trous noirs énergétiques [notoirement inefficaces](https://www.usenix.org/publications/loginonline/web3-fraud) pour toute application utile.",
    "guide/pairÀPair.md.5934e9a91adaaba6cecc6afd0d814e55": "Donc nous répétons : Constellation est un système distribué de pair \n en pair, mais **pas** une chaîne de bloques !\n:::",
    "guide/pairÀPair.md.1bd65175ff4de393cb180fe3cd7b65bd": "Mais pourquoi pas une chaîne de bloques ?",
    "guide/pairÀPair.md.18cf43d6371f119610559599bb8f7f80": "Premièrement, parce que c'est ben trop cher. Chaque transaction sur une chaîne de bloques comme Éthereum coûte de la fausse argent (cryptomonnaies), que vous devez malheureusement achetter avec de la vraie argent. Et les fluctuations des prix sont bien entendu complètement hors de notre contrôle. Pourquoi créer un système de données distribuées pour améliorer la souveraineté des données pour ensuite devoir payer des personnes anonymes une somme d'argent variable pour le privilège d'écrire à nos propres bases de données ?",
    "guide/pairÀPair.md.ca569386dfa31dee7746e16ec8e598a1": "Et deuxièmement, c'est complètement inutil. Les chaînes de bloques sont nécessaires pour les cryptomonnaies et leurs transactions financières. Mais nous, on veut partager des données scientifiques. Nous n'avons rien à faire avec de l'argent ou des transactions financières.",
    "guide/pairÀPair.md.8aa8708c8ab480a264059db3ef104c00": "Donc oublions tout ça. Constellation fonctionne de manière complètement distribuée, entièrement sur les dispositifs de ses utilisatrices et utilisateurs.",
    "guide/pairÀPair.md.319ffe41a9c317e51cab5eef46b57ebd": "Comment ça fonctionne",
    "guide/pairÀPair.md.19fd4d103bc4cc03b0289badd335535e": "Lorsque vous sauvegardez des données sur Constellation, celles-ci sont sauvegardées sur votre appareil local, et y resteront toujours disponibles.",
    "guide/pairÀPair.md.707172a5227853ba4a85f8388dd18a5a": "::: tip\nSi vous sauvegardez vos données sur un système sur le « nuage » comme les documents Google, vous aurez peut-être remarqué que vos données n'apparaissent plus lorsque vous (ou Google !) est hors ligne. L'avantage d'un système local comme Constellation est que vous êtes toujours garanti d'avoir accès à vos données, parce qu'elles demeurent toujours sur votre dispositif.\n:::",
    "guide/pairÀPair.md.5f06d27f1d1f6c966799699e875210a0": "Le logiciel Constellation recherche également d'autres utilisatrices et utilisateurs du réseau et vous permet d'accéder et de visualiser leurs données. La magie d'un système distribué est qu'il permet aux tièrces personnes de partager, **mais pas de modifier**, les données des autres. Si vous vivez au Québec et vous partagez vos données scientifiques et avant fermez votre téléphone pour aller dormir, vos données ne seront plus disponible sur le réseau jusqu'à votre réveil, heure de l'est. Mais, si quelqu'un d'autre, disons au Botswana, les a déjà accédées, elles seront automatiquement repartagées et disponibles sur le réseau à partir du nouveau dispositif, toute prêtes pour le réveil de vos collègues de l'Inde au Japon ! Donc, contrairement à un système centralisé, sur Constellation, **le plus populaires vos données, le plus disponibles elles seront.**",
    "guide/pairÀPair.md.b3ba68d046007191d210493241962b57": "Mais comment empêchons-nous les autres personnes de modifier vos données avant de les partager ? Chaque changement que vous apportez à vos données est accompagné d'une signature que uniquement votre compte peut générer. Si quelqu'un d'autre essaie de modifier vos données, la signature deviendra invalide et les changements frauduleux seront automatiquement rejetés par le réseau.",
    "guide/pairÀPair.md.f99eaf959b2fa98f9d26110b7ee69877": "Au niveau technique",
    "guide/pairÀPair.md.1201032be1d433f215a347b37df39b92": "Pour ceux et celles qui ça amuse, Constellation est construit sur [bd-orbite](https://orbitdb.org), un logiciel de bases de données distribuées, lui-même construit sur [libp2p](https://libp2p.io) et le Système de fichiers interplanétaire [SFIP](https://ipfs.io/). Toutes les bases de données sur Constellation sont composées de multiples bases de données orbite, tandis que les fichiers (images, vidéos) sont sauvegardés directement sur SFIP.",
    "guide/utilisation.md.d5bb003ce36879c62a5a14ab6c6b9899": "```typescript\nimport { client } from \"@constl/ipa\"\n```",
    "guide/utilisation.md.9825945ba0b42852b25159f253784bcd": "```typescript\nimport { clientTravailleur } from \"@constl/ipa\"\n```",
    "guide/utilisation.md.12e0ebbb2a4f15a4de2f98ddafcc58b4": "```typescript\nimport { clientDirecte } from \"@constl/ipa\"\n```",
    "images/distribuéDécentralisé.svg.841ec8dc6975331c9a40d1cde0136f2d": "\n    Centralisé\n  ",
    "images/distribuéDécentralisé.svg.d8d956db397c3f51b1fbaaebe3fab689": "\n    Décentralisé\n  ",
    "images/distribuéDécentralisé.svg.c201ce3d54275139a41ae346a4cabe16": "\n    Distribué\n  ",
    "index.md.6105347ebb9825ac754615ca55ff3b0c": "---\n",
    "index.md.7fa636f954e15940783e9019804b72e6": "layout: home",
    "index.md.ef2dd2721535b78cadd850e87aeb717e": "hero:\n  name: Constellation\n  text: Le réseau distribué pour les données scientifiques\n  tagline: Partagez et récoltez des données scientifiques sur un réseau ouvert de pair à pair, tout en favorisant la transparence et la souveraineté des données.\n  image: https://réseau-constellation.ca/img/logo.2a562100.svg\n  actions:\n    - theme: brand\n      text: Lire le guide\n      link: /guide/introduction\n    - theme: alt\n      text: Essayer l'appli\n      link: https://réseau-constellation.ca/?lg=fr\n    - theme: alt\n      text: Installer\n      link: https://réseau-constellation.ca/téléchargements/?lg=fr\n    - theme: alt\n      text: Voir sur GitHub\n      link: https://github.com/reseau-constellation/",
    "index.md.6401f55ffadb5f1cbb3a2df8ed292ce0": "features:\n  - icon: 🤝🏽\n    title: Partage de données\n    link: exemples/diffusion\n    linkText: En savoir plus\n    details: Partagez des données scientifiques existantes sur le réseau Constellation. Vous pouvez automatiser l'importation de LibreOffice, Excel ou autre.\n  - icon: 🔎\n    title: Science citoyenne\n    link: exemples/scienceCitoyenne\n    linkText: Démarrer votre projet\n    details: Lancez un projet de science citoyenne distribué et sans serveur central. Les données demeureront sur les dispositifs de vos utilisatrices et utilisateurs.\n  - title: Transparence et souveraineté\n    icon: 🪟\n    link: /guide/pairÀPair\n    linkText: En savoir plus\n    details: Constellation intègre des contrôles de qualité des données, tout en gardant une structure distribuée qui protège la souveraineté et l'accès aux données à long terme.\n  - title: En ligne ou locale\n    icon: 🧑🏿‍💻\n    link: guide/installation\n    linkText: Démarrer maintenant\n    details: Constellation peut être utilisé en tant qu'appli en ligne ou bien en tant que logiciel installable sur votre ordinateur.",
    "ipa/introduction.md.a9481779f7b67d266a7bea72bf865418": "Interface de programmation d'application (IPA)",
    "ipa/introduction.md.da8316088231392f4520b467a303fe56": "L'interface de programmation d'application (IPA) de Constellation vous permet d'utiliser Constellation dans vos propres logiciels et applications. Cette section documente les fonctions de Constellation en JavaScript/TypeScript, son langage principa. Pour utiliser Constellation dans d'autres langages informatiques, voir la section sur les [autres langages](/avancé/autresLangages/introduction.md).",
    "ipa/introduction.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "ipa/introduction.md.f00b68af3887e20a2dd95fb7c60ccf6c": "Pour ajouter l'IPA de Constellation à votre projet, installez la librarie `@constl/ipa`:",
    "ipa/introduction.md.70447c763fadeb680dc33019bf99386c": "```sh\n$ pnpm add @constl/ipa\n```",
    "ipa/introduction.md.45b58d8b40ea345b859f45496ee33616": "Quelques concepts",
    "ipa/introduction.md.0a2d45b563a5a44fa7a987f5aabb81b2": "Constellation étant une base de données distribuée **et locale**, les données sont immédiatement disponibles sur le dispositif, mais peuvent changer avec le temps si des nouvelles données sont obtenues du réseau. Cette différence avec les bases de données centralisées mène à quelques différences conceptuelles dans notre façon d'écrire le code.",
    "ipa/introduction.md.e24aa1c5d9d39c846754ef8028927a01": "Pour obtenir des données d'un système centralisé, on écrirait quelque chose du genre :\n",
    "ipa/introduction.md.a0190a0f5913d934ea3f2177704923b9": "```TypeScript\nconst BD = ouvrirConnexionÀBaseDeDonnéesÀLautreBoutDuMonde(\"Mon mot de passe\")\n\nconst imageDeProfil = (await BD.rechercher({id: \"ID de compte\"})).image;\n```",
    "ipa/introduction.md.a554ba883164e5f0d5b77ebcd2e28880": "Mais si jamais la personne change son image, nous n'avons aucune façon de le savoir. Il va falloir rafraîchir la page, ou bien faire quelque chose de bien inefficace et laid, et redemander les données à toutes les 5 secondes :",
    "ipa/introduction.md.b0e856d8a4765ed71f4b1b9a894712ee": "```TypeScript\nlet imageDeProfil: string|undefined\nsetInterval(async ()=>{\n    imageDeProfil = (await BD.rechercher({id: \"ID de compte\"})).image;\n}, 5000)\n```",
    "ipa/introduction.md.722db3f93e122433fce2c17e9323be3b": "Constellation est bien plus simple. On ne demande pas à Constellation de nous donner la réponse à notre requète, mais plutôt de nous prévenir chaque fois que la réponse change ! Ça prend un peu de temps à s'y habituer, mais c'est bien plus pratique.",
    "ipa/introduction.md.75d9281edda77edf79b4a672fbb252c5": "```TypeScript\nimport ClientConstellation from \"@constl/ipa\"\n\nconst client = ClientConstellation();\n\nlet image: Uint8Array | null;\n\nconst oublierImage = await client.profil.suivreImage({ \n    idCompte: \"id du compte qui m'intéresse\",\n    f: x => image.value = x \n});\n\n// Arrêter le suivi\nawait oublierImage();\n```",
    "ipa/introduction.md.266218bdd2c65376850e9ccda89703d8": "Comme ça, chaque fois que l'image de profil de cette personne changera sur le réseau, vous obtiendrez automagiquement la valeur à jour dans la variable `image`. Notez que chaque fonction de suivi retourne une fonction d'oubli; lorsque vous l'invoquez, le suivi des résultats sera interrompu.",
    "ipa/introduction.md.c6c4da2805eba5a54c6c287a8bb98e14": "Ou bien, si vous préférez un exemple plus complet avec Vue.js :",
    "ipa/introduction.md.c52348a21289b5cb05a62a5656cdb14f": "```Vue\n<template>\n    <img :src=\"imageURL\" />\n</template>\n\n<script setup lang=\"ts\">\nimport ClientConstellation from \"@constl/ipa\"\nimport { ref, inject, computed, onMounted, onUnmounted } from \"vue\";\n\nconst client = inject<ClientConstellation>(\"constl\")  // Initialiser le client dans une extention Vue\n\nconst image = ref<Uint8Array | null>();\n\nconst imageURL = computed(() => {\n    if (image.value){\n        return URL.createObjectURL(\n            new Blob([image.value.buffer], { type: `image/png` })\n        );\n    } else {\n        return undefined\n    }\n})\nlet oublierImage: undefined | () => Promise<void>\n\nonMounted(async () => {\n    // Mettre l'image à jour chaque fois qu'elle change\n    oublierImage = await client.profil.suivreImage({ \n        idCompte: \"id du compte qui m'intéresse\",\n        f: x => image.value = x \n    });\n})\nonUnmounted(async () => {\n    // Éviter une fuite de mémoire lorsqu'on ferme la composante\n    if (oublierImage) await oublierImage();\n})\n\n</script>\n\n```\n",
    "ipa/profil.md.820c6916ebfb13d1738ab6a13cf0a69b": "Profil",
    "ipa/profil.md.fbd87f963b49393598dee322719939a2": "Le `profil` organise toutes les informations de profil (nom, image, contact) de l'utilisateur.",
    "ipa/profil.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/profil.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/profil.md.91024bee1500cf7293c806932b9fbf1f": "Plutôt qu'un identifiant d'utilisateur ou d'utilisatrice, dans Constellation, chaque personne présente son nom dans autant de langues qu'elle le souhaite.",
    "ipa/profil.md.477bc1d1ee56e75045a6fd96e97ad194": "`client.profil.sauvegarderNom({ langue, nom })`",
    "ipa/profil.md.0fa44b69a81f76fae928074d6bea9e57": "Sauvegarde le nom de l'utilisateur dans une langue donnée.",
    "ipa/profil.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/profil.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/profil.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/profil.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/profil.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/profil.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/profil.md.008073913906a40a1072a64e660cda72": "Le nom de l'utilisatrice.",
    "ipa/profil.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/profil.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/profil.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/profil.md.3ed3fb0a796c0de11263c87e8afc6ae8": "```ts\n\nimport ClientConstellation from \"@constl/ipa\";\nconst client = ClientConstellation();\n\nawait client.profil.sauvegarderNom({ langue: \"fr\", nom: \"C'est bien moi !\" });\n\n```",
    "ipa/profil.md.59943ade14d690d1178c79e490fc537e": "`client.profil.effacerNom({ langue })`",
    "ipa/profil.md.a16d6d677626041c6d71f0681ca9a65e": "Efface la traduction du nom de l'utilisateur dans une langue donnée.",
    "ipa/profil.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/profil.md.e98edd73e6f8b7f0bc12e1ea09f94336": "```ts\nimport ClientConstellation from \"@constl/ipa\";\nconst client = ClientConstellation();\n\nawait client.profil.effacerNom({ langue: \"fr\" });\n```",
    "ipa/profil.md.5cd17061713d9d2a41a8942c0c9addba": "`client.profil.suivreNoms({ f, idCompte? })`",
    "ipa/profil.md.7bd89046217aba51c330a9e61b91970b": "Suit les noms (traduits en différentes langues) de l'utilisatrice.",
    "ipa/profil.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/profil.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/profil.md.26ddb0d3469a369f9f7626342bd01b96": "Une fonction qui sera appelée avec les noms de l'utilisatrice chaque fois qu'ils changent",
    "ipa/profil.md.25a66eb2e8a25669f9fa3f1189a8e0eb": "`idCompte?`",
    "ipa/profil.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/profil.md.1c65ebee6106d20fce9404b649ee0815": "L'id du compte de l'utilisateur. Par défaut, sera l'utilisateur courrant.",
    "ipa/profil.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/profil.md.df56dae86c89f997f073ac53bec7dae6": "`() => Promise<void>`",
    "ipa/profil.md.a3114cc0600f655d58f2de301cd67038": "Fonction à appeler pour arrêter le suivi",
    "ipa/profil.md.afd50bce662a801e0222e6a7466d9aab": "```ts\nimport ClientConstellation from \"@constl/ipa\";\nconst client = ClientConstellation();\n\nconst fOublierNoms = await client.profil.suivreNoms({ f: noms => console.log(noms) });\nawait fOublierNoms();\n```",
    "ipa/profil.md.be53a0541a6d36f6ecb879fa2c584b08": "Image",
    "ipa/profil.md.1e3fb022fcbee6061156f6625f8e4b15": "`client.profil.sauvegarderImage({ image })`",
    "ipa/profil.md.d595aea974661d61bb2c5afbddad5d44": "Sauvegarde une image de profil.",
    "ipa/profil.md.a94480ce7c3cee3a35330c424305586e": "`image`",
    "ipa/profil.md.76705eee3297a07ed0ae3723e378f96d": "`import(\"ipfs-core-types/src/utils\").ImportCandidate`",
    "ipa/profil.md.ed7742836191169aa028cc314d3b2c60": "Le fichier de l'image.",
    "ipa/profil.md.3387dce2e336a7143f9891186a830ec0": "```ts\n\nimport ClientConstellation from \"@constl/ipa\";\nconst client = ClientConstellation();\n\nconst image = fs.readFileSync(\"mon image locale.jpeg\");\nawait client.profil.sauvegarderImage({ image });\n\n```",
    "ipa/profil.md.3134e531777bba0713fbe65b3ae1e3ef": "`client.profil.effacerImage()`",
    "ipa/profil.md.85784357cb0e3014bac6943c11df9a5a": "Efface l'image de profil.",
    "ipa/profil.md.b2962cd4e40c1428dc973a6142432c81": "```ts\nimport ClientConstellation from \"@constl/ipa\";\nconst client = ClientConstellation();\n\nawait client.profil.effacerImage();\n```",
    "ipa/profil.md.1d4604fcf2c9bfa82ab2ffd96845436d": "`client.profil.suivreImage({ f, idCompte? })`",
    "ipa/profil.md.11f2029696eb35b53ef488188ca04d48": "Suit l'image de profil de l'utilisatrice.",
    "ipa/profil.md.b4f475c421cef7bc3825070568cc8006": "`(image: Uint8Array) => void`",
    "ipa/profil.md.0b0cf7773a43d9ec7df7432467322b26": "Une fonction qui sera appelée avec l'image chaque fois que celle-ci change.",
    "ipa/profil.md.1bc6d2c612c5979695d74053b8599ff9": "```ts\nimport { ref } from 'vue';\nimport ClientConstellation from \"@constl/ipa\";\nconst client = ClientConstellation();\n\nconst image = ref<Uint8Array>();\nconst fOublierImage = await client.profil.suivreImage({ f: x => image.value = x });\nawait fOublierImage();\n```",
    "ipa/profil.md.bbaff12800505b22a853e8b7f4eb6a22": "Contact",
    "ipa/variables.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/variables.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/variables.md.8c6b7f206708b567f49f36edb123c060": "Catégorie",
    "ipa/variables.md.ece0971cbecbb2fa54d0cb09a08fcf52": "Unité",
    "nav.0.text.6602bbeb2956c035fb4cb5e844a4861b": "Guide",
    "nav.1.text.f45c1c0a2cc7150d2ef7af26c4265544": "Appli",
    "nav.1.link.cedce24b39179850faf2080a51cb1a7c": "https://réseau-constellation.ca",
    "pied.message.0921d67919ecf0874fab3e560f6fc7a0": "Disponible sous licence AGPL-3.0",
    "pied.copyright.c87033cbb65d6ff52f6376e2cf2d9c77": "© 2021+ Contributeurs Constellation",
    "panneau.0.text.6602bbeb2956c035fb4cb5e844a4861b": "Guide",
    "panneau.0.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "panneau.0.items.1.text.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "panneau.0.items.2.text.d4390e0d6ef1cad7b9e07133f2cfc008": "Pair à pair",
    "panneau.0.items.3.text.0460583622f03a52d7693094d6fa2452": "Concepts",
    "panneau.1.text.9a103932a77831a6270ab0002f15b3d5": "Exemples",
    "panneau.1.items.0.text.23171fe4fd6ef39d7a0b5e888493cf86": "Science citoyenne",
    "panneau.1.items.1.text.6bac750358f0e788f6eaa7e33c5f4fdd": "Diffusion de données",
    "panneau.2.text.8fc523b9c07fd1b49bda2fd8e57d9cdb": "Avancé",
    "panneau.2.items.0.text.610a2fb96f43ee902032d4e471ffa71f": "Autres langages",
    "panneau.2.items.0.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "panneau.2.items.0.items.1.text.a7f5f35426b927411fc9231b56382173": "Python",
    "panneau.2.items.0.items.2.text.2344521e389d6897ae7af9abf16e7ccc": "Julia",
    "panneau.2.items.1.text.6125574ce9b6ca4cd5bc0d2a40d17cfc": "Développement d'applis",
    "panneau.2.items.1.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "panneau.2.items.1.items.1.text.6dc83e2729ce1ef701d1302f05ba3adf": "Applis Internet",
    "panneau.2.items.1.items.2.text.f99147ddc67fab8ad31f3ba60bea772d": "Applis Électron",
    "panneau.2.items.1.items.3.text.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "panneau.2.items.2.text.e7b1ab212701e884363972b6be3e2593": "Mandataires",
    "panneau.2.items.3.text.4780fe2d3dfbaa3be7b6b2a4446dfcab": "Configuration SFIP et Orbite",
    "panneau.3.text.40dfb1449b924e60bb6b65c5d16a43df": "Documentation IPA",
    "panneau.3.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "panneau.3.items.1.text.577d7068826de925ea2aec01dbadf5e4": "Client",
    "panneau.3.items.2.text.820c6916ebfb13d1738ab6a13cf0a69b": "Profil",
    "panneau.3.items.3.text.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "panneau.3.items.4.text.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "panneau.3.items.5.text.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "panneau.3.items.6.text.059c8595193d0680e728c17de17b3169": "Bases de données",
    "panneau.3.items.7.text.cbdf99436836fee4fcd8aa74a49ef09f": "Projets",
    "panneau.3.items.8.text.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "panneau.3.items.9.text.836d64c92151a341b114b051cb4cbc83": "Réseau",
    "panneau.3.items.10.text.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "titre.974724855beee3a55e93d0b47b1ee3d9": "Constellation"
}