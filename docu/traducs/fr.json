{
    "avancé/applications/internet.md.6dc83e2729ce1ef701d1302f05ba3adf": "Applis Internet",
    "avancé/applications/internet.md.f03a70b562a4d80f2179da235b8032f3": "C'est très facile d'incorporer Constellation à vos applications. Le point important est de créer une seule instance de Constellation qui sera utilisée par toutes les composantes de votre appli.",
    "avancé/applications/internet.md.88e3890484e51c3ed4974b0535b5f1aa": "Exemple Vue 3",
    "avancé/applications/internet.md.c49685e8c247d8140fb4928c5bce09c8": "Voici un exemple d'extention [Vue.js 3](https://fr.vuejs.org/) qui crée une instance de Constellation et la rend disponible à l'ensemble de votre application.",
    "avancé/applications/internet.md.90ed81fec74780fe2dcd6f074d2b1728": "```TypeScript\n// extentions/constellation.ts\nimport type {App} from 'vue';\n\nimport { générerClient } from '@constl/ipa';\n\nexport default {\n  install: (app: App) => {\n    const client = générerClient({});\n    app.provide('constl', client);\n  },\n};\n\n```",
    "avancé/applications/internet.md.ab32990e25beddab5464783b9af3cb81": "Nous enrégistrerons notre extention lors de la création de l'appli :",
    "avancé/applications/internet.md.df738f3f63a6946af93b8e69d77db7fa": "```TypeScript\n// index.ts\nimport {createApp} from 'vue';\nimport App from '/@/App.vue';\nimport constellation from './extentions/constellation.js';\n\nconst app = createApp(App);\n\napp.use(constellation);\n\napp.mount('#app');\n```",
    "avancé/applications/internet.md.74671c4065eafbc40639b7d0e9c04916": "Et c'est tout ! Vous pouvez maintenant utiliser Constellation dans l'ensemble de votre appli. Amusez-vous !",
    "avancé/applications/internet.md.ae5d9a7030b7f13926e1b4e9c690973d": "```Vue\n<script setup lang=\"ts\">\n// composantes/MonCompte.vue\nimport { ref, inject, onMounted, onUnmounted } from 'vue';\nimport type ClientConstellation from \"@constl/ipa\";\n\nconst constellation = inject<ClientConstellation>('constl');\nconst idCompte = ref<string>();\n\nlet fOublierIdCompte: () => Promise<void> | undefined;\nonMounted(async () => {\n    fOublierIdCompte = await constellation.suivreIdCompte({ \n        f: id => idCompte.value = id\n    });\n})\n\n// Il faut arrêter le suivi lorsque la composante n'est plus utilisée\nonUnmounted(async () => {\n    if (fOublierIdCompte) await fOublierIdCompte();\n})\n</script>\n\n<template>\n    <h1>Mon compte : {{ idCompte }}</h1>\n</template>\n```\n",
    "avancé/applications/introduction.md.6125574ce9b6ca4cd5bc0d2a40d17cfc": "Développement d'applis",
    "avancé/applications/introduction.md.4ae07aeaa434e6be75c75dd370342450": "Vous pouvez utiliser l'IPA TypeScript de Constellation afin de développer vos propres applis de science citoyenne ou autre sur le réseau Constellation.",
    "avancé/applications/introduction.md.0face1c9c933af618b2e822c56423ada": "Vous pouvez ainsi développer des applications en tant que [sites web](./internet.md) statiques, de même que des applications [Électron](./électron.md).",
    "avancé/applications/introduction.md.de1f59cdd61051b582152278d35df93c": "Projets utilisant Constellation",
    "avancé/applications/introduction.md.06e542caa57d341e3d5d64e2a3cd45ad": "Si vous développez un projet utilisant Constellation, [contactez-nous](julien.malard@mail.mcgill.ca) (ou, encore mieux, [ajoutez-le vous-même](https://github.com/reseau-constellation/ipa/edit/main/docu/src/avancé/applications/introduction.md)) et nous vous donnerons un peu de publicité ici.\n",
    "avancé/applications/nuées.md.9d00164959d63f9cfed45a0041afe763": "Nuées de données",
    "avancé/applications/nuées.md.83d25fdad7646843df65bc320c6a2939": "L'application la plus fréquente de Constellation dans une application tièrce est sans toute la collection de données distribuées d'un plublique participant à un projet de science citoyenne ou autre. Dans ce cas, les [`nuées`](../../guide/concepts.md#nuée) seront indispensables.",
    "avancé/applications/nuées.md.7b68f913b46eeae64ec56bb64ce80b95": "Cette section offre des instructions détaillées sur l'utilisation de nuées Constellation dans vos propres projets.",
    "avancé/applications/nuées.md.a09c16d2ce50a3ead492c9a24fdf7a4d": "Création de la nuée",
    "avancé/applications/nuées.md.9f733ec8d890f56f646b777a21b3f2f2": "Vous devrez, avant tout, créer l'identifiant de la nuée qui regroupera toutes les données de votre projet.",
    "avancé/applications/nuées.md.87442b3aa59ad709c021fa5b7aaa4c1f": "::: warning\nPrenez soin de créer la nuée sur le compte Constellation que vous entendez utiliser pour gérer votre projet. Celui-ci aura ainsi l'autorisation de modifier la nuée par la suite. \n:::",
    "avancé/applications/nuées.md.effbdbd2b0ba3f0abb40c75c645a3d51": "Génération du code",
    "avancé/applications/nuées.md.0758881a497c631d96315e4f62773f36": "Nous y travaillons... revenez plus tard, ou, encore mieux, [contactez-nous !](mailto:julien.malard@mail.mcgill.ca)",
    "avancé/applications/électron.md.f99147ddc67fab8ad31f3ba60bea772d": "Applis Électron",
    "avancé/applications/électron.md.b7fa2ccbaa98099d5cf7d3b585ad596d": "Si vous développez une appli Électron, vous pourriez évidemment simplement utiliser Constellation dans le [processus de rendu](https://www.electronjs.org/fr/docs/latest/tutorial/process-model#the-renderer-process) comme s'il s'agissait d'un site web. Les processus rendu, cependant, ont les mêmes limitations que les sites webs - notamment, ils ne peuvent pas accéder au système de fichier de l'ordinateur, et sont limités en mémoire. Afin d'activer les fonctionnalités plus puissantes de Constellation telles la sauvegarde et l'importation automatisées, vous devriez utiliser Constellation dans le [processus principal](https://www.electronjs.org/fr/docs/latest/tutorial/process-model#the-main-process) d'Électron.",
    "avancé/applications/électron.md.98c9b7abc668e835fb91785e768c0200": "Vu que c'est un peu compliqué d'accéder aux fonctionnalités du processus principal à partir du processus de rendu d'où vous voudrez utiliser Constellation (ils on rendu ça [bien compliqué](https://www.electronjs.org/fr/docs/latest/tutorial/tutorial-preload), pour des raisons de sécurité), on vous a créé une petite librairie qui s'occupe de tout ça pour vous !",
    "avancé/applications/électron.md.e0640eb536277ed56ef4ee35db10527d": "Configuration initiale",
    "avancé/applications/électron.md.a2e3ce683d0f6817402c3a9648b78771": "On vous recommande d'initialiser votre projet Électron avec ce [gabarit-ci](https://github.com/cawa-93/vite-electron-builder). Ça nous a sauvé beaucoup de maux de tête.",
    "avancé/applications/électron.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/applications/électron.md.7f0e77b5be0607bc272268b5e3e46a3b": "D'abord, ajoutez `@constl/mandataire-electron-principal` et `@constl/mandataire-electron-rendu` à votre projet :",
    "avancé/applications/électron.md.aac59812eabcd19f4a042cc9a11b7383": "```sh\n$ pnpm add @constl/mandataire-electron-rendu @constl/mandataire-electron-principal\n```",
    "avancé/applications/électron.md.319ffe41a9c317e51cab5eef46b57ebd": "Comment ça fonctionne",
    "avancé/applications/électron.md.4cdb966ec5b653fd71afe18e65488b01": "Le mandataire Électron vous permet de faire rouler Constellation dans le processus principal d'Électron avec tous les avantages (accès aux système de fichiers, plus de mémoire, meilleure connectivité) mais de faire *semblant* qu'il roule dans le processus de rendu Électron. Comme ça, vous pouvez utiliser Constellation dans vos pages de site web (Vue, React, etc.) comme si de rien n'était !\nComment c'est possible ? En bref, ça fonctionne en créant une seule instance de Constellation dans le processus principal, qu'on attachera à chaque fenêtre ouverte de votre appli. Ensuite, on fait un peu de magie pour permettre au processus de rendu de communiquer avec Constellation dans le processus principal.",
    "avancé/applications/électron.md.53b2092b68e0a25ecd5ff4cebe28f780": "Utilisation : processus principal",
    "avancé/applications/électron.md.982fe0661e13eca7a12da2728a010e48": "Dans un fichier séparé, initialisez le gestionnaire qui connectra les fenêtres de votre appli Électron à Constellation.",
    "avancé/applications/électron.md.4d2fa0761694ba512f5e0ee55de0f810": "```TypeScript\n// constellation.ts\nimport { GestionnaireFenêtres } from '@constl/mandataire-electron-principal';\n\nconst enDéveloppement = process.env.NODE_ENV !== 'production';  // Changer selon votre configuration\n\nconst importationIPA = import('@constl/ipa');\n\nconst importationServeur = import('@constl/serveur');  // Uniquement si vous voulez aussi activer un serveur WS local.\n\nexport const gestionnaireFenêtres = new GestionnaireFenêtres({ \n  enDéveloppement,\n  importationIPA,\n  importationServeur,  // Uniquement si vous voulez aussi activer un serveur WS local.\n});\n```",
    "avancé/applications/électron.md.dd22e2862c6d1d3520612deb540bf340": "Connecter chaque nouvelle fenêtre de votre appli à Constellation au moment où vous la créez :",
    "avancé/applications/électron.md.261e8d230655c65eba72d319b8b39b37": "```TypeScript\n// main.ts\nimport {BrowserWindow} from 'electron';\nimport { gestionnaireFenêtres } from \"./constellation.ts\"\n\nfenêtre = new BrowserWindow();\ngestionnaireFenêtres.connecterFenêtreÀConstellation(fenêtre);\n```",
    "avancé/applications/électron.md.805f52359e9e9ba9e826009534ddd478": "Et surtout, n'oubliez pas de fermer Constellation lorsqu'on a fini.",
    "avancé/applications/électron.md.eb0819d59c4a9eedd7012742942c0206": "```TypeScript\n// main.ts\napp.on('will-quit', async () => {\n  await gestionnaireFenêtres.fermerConstellation();\n});\n```",
    "avancé/applications/électron.md.fb078bca8cb25b536082a5ba8d1d7ed3": "Utilisation : préchargeur",
    "avancé/applications/électron.md.e2c6f8cf1da0ca7485f3b408fada2913": "Dans votre code préchargeur, vous devez exposer les fonctions suivantes avec `electron.contextBridge.exposeInMainWorld`. Nous recommandons [unplugin-auto-expose](https://www.npmjs.com/package/unplugin-auto-expose), qui simplifie grandement la tâche (si vous avez utilisé le gabarit recommandé [ci-dessus](#configuration-initiale), c'est déjà inclus).",
    "avancé/applications/électron.md.f1a32138b7add3d84a6951d056c10961": "```TypeScript\n// preload.ts\n\nexport {\n  envoyerMessageÀConstellation,\n  écouterMessagesDeConstellation,\n  envoyerMessageÀServeurConstellation,  // Uniquement si vous voulez inclure le serveur WS\n  écouterMessagesDeServeurConstellation,  // Uniquement si vous voulez inclure le serveur WS\n} from '@constl/mandataire-electron-principal';\n```",
    "avancé/applications/électron.md.751c281b6dd8b9b3438efc4c87eb52dc": "Utilisation : Processus de rendu",
    "avancé/applications/électron.md.a14ca5ee122f58cd52c208d89d28cdec": "Vous pouvez maintenant connecter Constellation à votre processus de rendu. Vous devriez utiliser une seule instance de Constellation dans votre application. Voici ci-dessous un exemple avec [Vue.js 3](https://fr.vuejs.org/) et [vuetify](https://next.vuetifyjs.com/).",
    "avancé/applications/électron.md.00f7f8ec240c957f915749d1480b4fb5": "```TypeScript\n// plugins/constellation.ts\n\nimport {\n  envoyerMessageÀConstellation,\n  écouterMessagesDeConstellation,\n  envoyerMessageÀServeurConstellation,\n  écouterMessagesDeServeurConstellation,\n} from '#preload';\nimport type {App} from 'vue';\n\nimport {\n  générerMandataireÉlectronPrincipal,\n  GestionnaireServeur,\n} from '@constl/mandataire-electron-rendu';\n\nexport default {\n  install: (app: App) => {\n    app.provide('constl', générerMandataireÉlectronPrincipal({\n      envoyerMessageÀConstellation,\n      écouterMessagesDeConstellation,\n    }));\n\n    // Uniquement si vous voulez aussi activer un serveur WS local.\n    app.provide('serveurConstl', new GestionnaireServeur({\n      écouterMessagesDeServeurConstellation,\n      envoyerMessageÀServeurConstellation,\n    }));\n  },\n};\n\n```",
    "avancé/applications/électron.md.f965a79489e8622d5409dfb0b07ab38b": "Et voilà, le tour est joué ! Vous pouvez maintenant utiliser Constellation directement dans votre application Électron, dans le processus de rendu :",
    "avancé/applications/électron.md.ad61412c39e5a64ebc2bfd9363d70d49": "```Vue\n<script setup lang=\"ts\">\nimport { ref, inject } from 'vue';\nimport type ClientConstellation from \"@constl/ipa\"\n\nconst constellation = inject<ClientConstellation>('constl');\nconst idBd = ref<string>();\n\nconst créerBd = async () => {\n  idBd.value = await constellation.bds.créerBd({ licence: 'ODbl-1_0' })\n};\n</script>\n```",
    "avancé/applications/électron.md.a567e7e3db99c2a0a5937c7f2af24a29": "Vous pouvez également activer le serveur WS local, ce qui rendra l'instance de Constellation de votre appli\négalement accessible à d'autres programmes locaux sur votre ordinateur. Ceci permet, par exemple,\nde connecter un client [Python](https://github.com/reseau-constellation/client-python) ou \n[Julia](https://github.com/reseau-constellation/Constellation.js) à l'instance Constellation de votre appli.",
    "avancé/applications/électron.md.aa6c5eed138b76000f192ca16e3bbe1e": "```Vue\n<template>\n  <div>\n    <p v-if=\"port\">\n      Serveur actif sur port {{ port }}\n      <v-btn @click=\"fermerServeurLocal\">\n        Fermer le serveur\n      </v-btn>\n    </p>\n    <p v-else>\n      Serveur non initialisé\n      <v-btn @click=\"initialiserServeurLocal\">\n        Initialiser le serveur\n      </v-btn>\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { inject, ref } from 'vue';\n\nconst serveur = inject('serveurConstl');\nconst port = ref<number>();\n\nconst initialiserServeurLocal = async () => {\n  port.value = await serveur.initialiser();  // Ou spécifier le port avec serveur.initialiser(PORT);\n}\n\nconst fermerServeurLocal = async () => {\n  await serveur.fermer()  // Quand on a fini\n  port.value = undefined\n}\n</script>\n```",
    "avancé/autresLangages/introduction.md.610a2fb96f43ee902032d4e471ffa71f": "Autres langages",
    "avancé/autresLangages/introduction.md.57dbbb4affa5f251700f41ed33689e14": "Constellation a beau être un projet JavaScript, il est possible d'accéder au réseau distribué à partir de clients\ndans d'autres langages informatiques. Des clients sont disposibles dans les langages suivants :",
    "avancé/autresLangages/introduction.md.a4115841d4fe7e07730833861b9218c9": "* [Python](./python.md) : Fonctionnel\n* [Julia](./julia.md) : Fonctionnel\n* [R](https://github.com/reseau-constellation/client-r) : En progrès.\n* Autres langages : Si vous développez un client Constellation dans un autre langage, [contactez-nous](mailto:julien.malard@mail.mcgill.ca) et nous l'annoncerons ici.",
    "avancé/autresLangages/introduction.md.37ed9dd2867fbd70f1d4e4582786ec1a": "Tous ces clients fonctionnent en ouvrant un serveur WS Constellation local sur votre machine. Le client Python, Julia ou autre communiquera ensuite avec ce serveur local par messages WS et vous permettent d'utiliser Constellation dans le langage de votre choix.",
    "avancé/autresLangages/introduction.md.51c2d1e3a6562233de2c4ae6cd55f977": "Vous devrez donc toujours installer Constellation sur votre machine avant de pouvoir utiliser ces clients. La manière la plus facile est d'installer [l'interface graphique](https://réseau-constellation.ca/téléchargements) et puis d'activer le serveur WS sur la page de configuration. Alternativement, vous pouvez installer le serveur WS de Constellation sans interface graphique. Vous aurez besoin de [Node.js](https://nodejs.org/fr/) et de [pnpm](https://pnpm.io/fr/).",
    "avancé/autresLangages/introduction.md.a3172dd367104139f38b7882230f12f8": "Si nécessaire, installer pnpm :",
    "avancé/autresLangages/introduction.md.a2077e2a953e1dccdeb0f67723b4e45d": "```sh\n$ npm add -g pnpm\n```",
    "avancé/autresLangages/introduction.md.26685e840a5b38673f900dcd5f1aaa18": "Et puis installer Constellation :",
    "avancé/autresLangages/introduction.md.8828c5e0ecde155d38cc567f846a6c89": "```sh\n$ pnpm global add -g @constl/ipa @constl/serveur\n```\n",
    "avancé/autresLangages/julia.md.2344521e389d6897ae7af9abf16e7ccc": "Julia",
    "avancé/autresLangages/julia.md.618eb0ab2bebf47127ec12d506ebb9f9": "Le client Julia vous permet d'accéder au réseau Constellation à partir d'un programme en [Julia](https://julialang.org/).",
    "avancé/autresLangages/julia.md.bfa3e7273801dcb63d1d84be3f1f0665": "![Client Julia](https://github.com/reseau-constellation/Constellation.jl/actions/workflows/CI.yml/badge.svg)",
    "avancé/autresLangages/julia.md.d1903769971ea2bbfc3a4b946adf7384": "https://github.com/reseau-constellation/Constellation.jl/actions/workflows/CI.yml",
    "avancé/autresLangages/julia.md.d31c9f13dc7c336b1b8559b75f237866": "![Couverture](https://codecov.io/gh/reseau-constellation/Constellation.jl/branch/principale/graph/badge.svg?token=1HbFsyDC8y)",
    "avancé/autresLangages/julia.md.61fc4e351d32c883e00af79050ad419a": "https://codecov.io/gh/reseau-constellation/Constellation.jl",
    "avancé/autresLangages/julia.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/autresLangages/julia.md.1a6ff76dc6e43ff37675b76c67d7a53e": "Vous pouvez installer le client Julia ainsi :",
    "avancé/autresLangages/julia.md.448d9dabaebe06792141bba3471c88b2": "```\npkg> add Constellation\n```",
    "avancé/autresLangages/julia.md.2f5a71cea28bf345757d21b8c467b7c4": "Utilisation",
    "avancé/autresLangages/julia.md.67ca94b43c9d3b44ca2d046728da46eb": "Vous pouvez accéder à toutes les fonctions de Constellation de type action ou suivi avec le client Julia. Les actions sont les fonctions qui vous redonnent immédiatement une valeur, tandis que les [fonctions de suivi](../../ipa/introduction.md#quelques-concepts) sont celles qui écoutent des changements du réseau et vous renvoient les nouvelles données en temps réel, au fur et à mesure qu'elles changent.",
    "avancé/autresLangages/julia.md.8436b713297e90a27c8dd3d1106ca02d": "Initialisation",
    "avancé/autresLangages/julia.md.d87dd01eac78636e8f3f72cecb1fabb7": "Vous devrez d'abord initialiser un nœud Constellation local sur votre machine. Vous pouvez le lancer manuellement à travers l'interface, ou bien le lancer directement en Julia :",
    "avancé/autresLangages/julia.md.a1f9a7c131871f401965e003de2286aa": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n        # Faire quelque chose avec Constellation...\n    end\nend\n\n# Ou, si vous avez lancé le nœud local à travers l'interface, notez le numéro de port et puis lancer le client directement\nport = 5123  # Changer comme nécessaire\n\nConstellation.avecClient(port) do client\n    # Faire quelque chose avec Constellation...\nend\n```",
    "avancé/autresLangages/julia.md.b953d23a8d952b16516c7272134dd7e7": "Actions et suivis",
    "avancé/autresLangages/julia.md.56c5897d04bb64ca09d45bbe8a454637": "Pour appeller une fonction d'action, utilisez `Constellation.action`. Cette fonction prend le client, le nom de la fonction Constellation telle que [documentée](../../ipa/introduction.md) et puis, s'il y a lieu, un dictionnaire des paramètres de la fonction.",
    "avancé/autresLangages/julia.md.c45aaee5c487951d24dd24b9700a05e0": "Pour appeller une fonction de suivi, utilisez `Constellation.suivi`. Cette fonction prend les mêmes paramètres que `Constellation.action`, mais mettra les résultats à jour automatiquement chaque fois que ceux-ci changent.",
    "avancé/autresLangages/julia.md.4a20b41ca271a75a1556ee90535aeb44": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n        \n        # Vous pouvez appeler une fonction sans argument...\n        idCompte = Constellation.action(client, \"obtIdCompte\")\n\n        # ...ou avec arguments\n        idBd = Constellation.action(client, \"bds.créerBd\", Dict([(\"licence\", \"ODbl-1_0\")]))\n\n        # Nous pouvons aussi appeler des fonctions de suivi\n        Constellation.action(client, \"bds.sauvegarderNomsBd\", Dict([(\"idBd\", idBd), (\"noms\", Dict([(\"fr\", \"Météo\"), (\"த\", \"காலநிலை\")]))]))\n        \n        dicNoms = Dict([])\n        réponse = Constellation.suivre(client, \"bds.suivreNomsBd\", Dict([(\"id\", idBd)])) do noms\n            dicNoms = noms\n        end\n        \n        print(dicNoms)\n\n        # Annuler le suivi\n        réponse[\"fOublier\"]()  \n        \n        # Il est probablement plus commode d'obtenir une image instantanée du résultat\n        nomsÀCetInstant = Constellation.suivreUneFois(client, \"bds.suivreNomsBd\", Dict([(\"id\", idBd)]))\n\n    end\nend\n\n```",
    "avancé/autresLangages/julia.md.52f486bb58526a3f3ec6c1c85cbcab91": "Fonctions raccourci",
    "avancé/autresLangages/julia.md.a03511f437de942c7f2e122128249f3c": "Quelques fonctions spéciales vous permettent d'effectuer rapidement des actions communes, dont `Constellation.obtDonnéesTableau` qui permet d'obtenir les données d'un `Tableau` Constellation et `Constellation.obtDonnéesNuée` qui résume les données d'une `Nuée`, tous en format [`DataFrames.DataFrame`](https://dataframes.juliadata.org/stable/).",
    "avancé/autresLangages/julia.md.5362d167a92242f3a6e1395e5f48f068": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n\n        # Obtenir les données d'un Tableau\n        donnéesTableau = Constellation.obtDonnéesTableau(client, idTableau)\n\n        # Obtenir les données d'une Nuée, en français si possible, sinon en alemand\n        donnéesRéseau = Constellation.obtDonnéesNuée(client, idNuée, clefTableau, [\"fr\", \"de\"])\n    end\nend\n```",
    "avancé/autresLangages/julia.md.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "avancé/autresLangages/julia.md.c4471074038db9fac9d1d3686d6a9801": "Les fonctions de recherche fonctionnent comme `Constellation.suivi`, mais elles envoient deux fonctions en guise de réponse plutôt qu'une seule : une pour annuler la recherche (`fOublier`), et une pour modifier le nombre de résultats désirés (`fChangerN`).",
    "avancé/autresLangages/julia.md.27a626c3f4652a28495d5fe6fc34b776": "```Julia\nimport Constellation\n\n# D'abord, lancer le nœud local\nConstellation.avecServeur() do port\n    Constellation.avecClient(port) do client\n        \n        # Créer 5 variables pour rechercher\n        variables = [Constellation.action(client, \"variables.créerVariable\", Dict([(\"catégorie\", \"numérique\")])) for _ in 1:4]\n\n        résultatsRecherche = []\n        réponse = Constellation.suivre(\n            client, \"recherche.rechercherVariableSelonNom\", Dict([(\"nomVariable\", \"humidité\"), (\"nRésultatsDésirés\", 3)])\n        ) do résultat\n            résultatsRecherche = résultat\n        end\n\n        # Nos fonctions de contrôle\n        fOublier = réponse[\"fOublier\"]\n        fChangerN = réponse[\"fChangerN\"]\n\n        # Détecter nouvelles variables\n        Constellation.action(client, \"variables.sauvegarderNomsVariable\", Dict([(\"idVariable\", variables[1]), (\"noms\", Dict([(\"fr\", \"Humidite\")]))]))\n        Constellation.action(client, \"variables.sauvegarderNomsVariable\", Dict([(\"idVariable\", variables[2]), (\"noms\", Dict([(\"fr\", \"humidite\")]))]))\n        \n        print([r[\"id\"] for r in résultatsRecherche] == [variables[2], variables[1]])\n\n        # Diminuer N\n        fChangerN(1)\n        sleep(1)  # Laisser le temps que ça aie effet\n        print(length(résultatsRecherche))  # == 1\n        print(résultatsRecherche[1][\"id\"] == variables[2])  # Le meilleur résultat devrait être retenu\n\n        # Améliorer résultat recherche\n        Constellation.action(client, \"variables.sauvegarderNomsVariable\", Dict([(\"idVariable\", variables[3]), (\"noms\", Dict([(\"fr\", \"humidité\")]))]))\n        print(résultatsRecherche[1][\"id\"])  # == variables[3]\n\n        # Augmenter N\n        fChangerN(4)\n        sleep(1)\n        print(length(résultatsRecherche))  # == 3\n\n        # Arrêter le suivi\n        fOublier()\n\n        # Maintenant, les résultats ne sont plus réactifs\n        Constellation.action(client, \"variables.sauvegarderNomsVariable\", Dict([(\"idVariable\", variables[4]), (\"noms\", Dict([(\"fr\", \"humidité\")]))]))\n        print(length(résultatsRecherche))  # Toujours égal à 3\n\n    end\nend\n```",
    "avancé/autresLangages/nouveauxLangages.md.bb0c7e5159e187193d3ad0cea7a94f74": "Nouveaux langages",
    "avancé/autresLangages/nouveauxLangages.md.a74b1f7c85300524f06d4a35be381cca": "Si vous voulez développer un client Constellation pour un autre langage informatique, vous pouvez utiliser la spécification ci-dessous afin de développer une interface dans le langage de votre choix qui communiquera avec le nœud Constellation.",
    "avancé/autresLangages/nouveauxLangages.md.c3598b43c6971db1473de381602e0df6": "Les clients existants (JavaScript, Python, Julia et R) implémentent tous cette interface.",
    "avancé/autresLangages/nouveauxLangages.md.505abdb548e040f8592fe6c8299d869c": "Spécification générale",
    "avancé/autresLangages/nouveauxLangages.md.a7d5a48876629d69840ea3fd6d261cd8": "Le client devra communiquer avec le nœud Constellation par l'entremise de WebSockets. Vous pouvez accéder les fonctions action, de suivi ou de recherche de Constellation. Les actions sont les fonctions qui vous redonnent immédiatement une valeur, tandis que les [fonctions de suivi](../../ipa/introduction.md#quelques-concepts) sont celles qui écoutent les changements du réseau et vous renvoient les nouvelles données en temps réel, au fur et à mesure qu'elles changent.",
    "avancé/autresLangages/nouveauxLangages.md.06df33001c1d7187fdd81ea1f5b277aa": "Actions",
    "avancé/autresLangages/nouveauxLangages.md.d9d0fd325c0f81c2e50ef69c13d168c4": "Pour invoquer une action Constellation, le client devra envoyer un message de la forme suivante :",
    "avancé/autresLangages/nouveauxLangages.md.608a74974ea74073609755f0e4e8499c": "```TypeScript\ninterface MessageActionPourTravailleur extends MessagePourTravailleur {\n  type: \"action\";\n  id: string;  // Un identifiant unique (qui sera inclut dans le message de retour avec le résultat de la requète)\n  fonction: string[];  // Le nom de la fonction Constellation, en forme de liste\n  args: { [key: string]: unknown };  // Les arguments de la fonction Constellation\n}\n```",
    "avancé/autresLangages/nouveauxLangages.md.d4df24922c80f517c7f840bfc23268e6": "Il recevra ensuite, du serveur, un message de la forme suivante :",
    "avancé/autresLangages/nouveauxLangages.md.96b389c7bcda9bb8758f39e015a6cbf1": "```TypeScript\ninterface MessageActionDeTravailleur extends MessageDeTravailleur {\n  type: \"action\";\n  id: string;  // Le même identifiant qu'inclus dans le message `MessageActionPourTravailleur` originalement envoyé au serveur\n  résultat: unknown;  // Le résultat de la fonction\n}\n```",
    "avancé/autresLangages/nouveauxLangages.md.b81f39aa49196ad3d8a977e91206d617": "À titre d'exemple, la fonction suivante de l'[IPA Constellation](https://github.com/reseau-constellation/ipa) crée une nouvelle base de données.\n",
    "avancé/autresLangages/nouveauxLangages.md.d2ee0d28e16283c47696caa3bcf8539a": "```TypeScript\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" })\n```",
    "avancé/autresLangages/nouveauxLangages.md.8d1fe2529a92484d145abbdbd3e55fbf": "Afin d'invoquer la même fonction par le serveur Constellation, nous enverrons un message comme suit (utilisant le module [uuid](https://www.npmjs.com/package/uuid) pour générer un identifiant unique pour la requète). L'exemple de code est donné en TypeScript, mais pourrait être en n'importe quel\nlangage informatique.",
    "avancé/autresLangages/nouveauxLangages.md.69efb66bf8d0ad09d7fae429cb03af99": "```TypeScript\nimport { v4 as uuidv4 } from 'uuid';\n\nconst id = uuidv4();\n\nconst message: MessageActionPourTravailleur = {\n  type: \"action\",\n  id,\n  fonction: [\"bds\", \"créerBd\"],\n  args: { \"licence\": \"ODbl-1_0\" },\n}\n\n// Envoyer le message par WS au serveur sur le port connecté.\n```",
    "avancé/autresLangages/nouveauxLangages.md.26374d8a6319e1a4d4dca7b8e4fc7c61": "Et nous recevrons une réponse comme tel :",
    "avancé/autresLangages/nouveauxLangages.md.c8f34a348dbef894dc4e8562829e7423": "```Json\n{\n  \"type\": \"action\",\n  \"id\": \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n  \"résultat\": \"/orbitdb/...\"\n}\n```",
    "avancé/autresLangages/nouveauxLangages.md.cf683392ff9d0e3c2358c141eaee3a3f": "Suivis",
    "avancé/autresLangages/nouveauxLangages.md.e913af3ee58cec52091398941468eb04": "Les fonctions qui suivent les résultats d'une requète à travers le temps, plutôt que je redonner un résultat ponctuel dans le temps, sont un peu plus compliquées. La fonction suivante suis les noms d'une variable :",
    "avancé/autresLangages/nouveauxLangages.md.c56268d6db62167b1b6ca0a9ed6af1be": "```TypeScript\nconst idDeMaVariable = \"/orbitdb/...\"  // Selon la variable qui vous intéresse ; générée par `client.variables.créerVariable`\nconst fOublier = await client.variables.suivreNomsVariable({ id: idDeMaVariable, f: console.log });\n\n// Annuler le suivi\nawait fOublier();\n```",
    "avancé/autresLangages/nouveauxLangages.md.79a00b36fde0b7a8e093409503122255": "Pour invoquer la même fonction par le serveur, nous enverrons le message suivant :",
    "avancé/autresLangages/nouveauxLangages.md.9ba9da825962854a069afdb4331c37bf": "```TypeScript\nimport { v4 as uuidv4 } from 'uuid';\n\nconst id = uuidv4();\n\nconst message: MessageSuivrePourTravailleur = {\n  type: \"suivre\",\n  id,\n  fonction: [\"variables\", \"suivreNomsVariable\"],\n  args: { id: idDeMaVariable },\n  nomArgFonction: \"f\",  // Nom de l'argument correspondant à la fonction de suivi\n}\n\n// Envoyer le message par WS au serveur sur le port connecté.\n```",
    "avancé/autresLangages/nouveauxLangages.md.fccb5f62c1861ee29f6452e953ca6834": "Et nous recevrons une réponse comme tel lorsque le suivi est amorcé :",
    "avancé/autresLangages/nouveauxLangages.md.bf77bee678851a958ca2d9a6640262ae": "```Json\n{\n  \"type\": \"suivrePrêt\",\n  \"id\": \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n}\n```",
    "avancé/autresLangages/nouveauxLangages.md.50efdfd008c3f6c31b085cb52b3f2eea": "Et des messages suiveront avec les résultats en temps réel de la recherche :",
    "avancé/autresLangages/nouveauxLangages.md.53b96bfe484f62192825f63890291dfc": "```Json\n{\n  \"type\": \"suivre\",\n  \"id\": \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n  \"résultat\": { \"fr\": \"Précipitation\", \"த\": \"பொழிவு\" }\n}\n```",
    "avancé/autresLangages/nouveauxLangages.md.e91efeb7c8c5c5e920af7c5fc85b0ab2": "Pour annuler le suivi, envoyer le message suivant :",
    "avancé/autresLangages/nouveauxLangages.md.94a7605e135241e892b2e5a61ee52fd7": "```TypeScript\nconst message: MessageRetourPourTravailleur = {\n  type: \"retour\",\n  id,\n  fonction: \"fOublier\"\n}\n\n// Envoyer le message par WS au serveur sur le port connecté.\n```",
    "avancé/autresLangages/nouveauxLangages.md.6e1955929b386406815e38f7bbc6860d": "Recherches",
    "avancé/autresLangages/nouveauxLangages.md.d849f2d786f03f03ce046c836190903a": "Une recherche s'éffectue de manière similaire à un suivi, mais elle retourne également une fonction pour changer le nombre de résultats désirés.",
    "avancé/autresLangages/nouveauxLangages.md.38efc7698037cd957027c2653ba4557a": "```TypeScript\nconst { \n  fOublier, \n  fChangerN\n} = await client.recherche.rechercherBdSelonNom({ \n  nomBd: \"météo\", \n  f: console.log, \n  nRésultatsDésirés: 30 \n});\n\n// Demander plus de résultats\nawait fChangerN(40);\n\n// Annuler la recherche\nawait fOublier();\n```",
    "avancé/autresLangages/nouveauxLangages.md.ece9ede14fa85e540561a99573c11812": "```TypeScript\nimport { v4 as uuidv4 } from 'uuid';\n\nconst id = uuidv4();\n\nconst message: MessageSuivrePourTravailleur = {\n  type: \"suivre\",\n  id,\n  fonction: [\"recherche\", \"rechercherBdSelonNom\"],\n  args: { nomBd: \"météo\", nRésultatsDésirés: 30 },\n  nomArgFonction: \"f\",  // Nom de l'argument correspondant à la fonction de suivi\n}\n\n// Envoyer le message par WS au serveur sur le port connecté.\n```",
    "avancé/autresLangages/nouveauxLangages.md.397a5df8efc036a0475cb5be855dcd6c": "Et nous recevrons une réponse comme suit lorsque la recherche est amorcée :",
    "avancé/autresLangages/nouveauxLangages.md.dda68069a53af59966ba489a4c85b576": "```Json\n{\n  \"type\": \"suivrePrêt\",\n  \"id\": \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n  \"fonctions\": [\"fOublier\", \"fChangerN\"]\n}\n```",
    "avancé/autresLangages/nouveauxLangages.md.5882449f18db40f4974f57101e25127e": "Pour changer le nombre de résultats désirés, il suffit d'envoyer un message comme suit :",
    "avancé/autresLangages/nouveauxLangages.md.f565f11aa687b197c20f158cd3beffa4": "```TypeScript\nconst message: MessageRetourPourTravailleur = {\n  type: \"retour\",\n  id,\n  fonction: \"fChangerN\",\n  args: [40]\n}\n\n// Envoyer le message par WS au serveur sur le port connecté.\n```",
    "avancé/autresLangages/nouveauxLangages.md.0d73930820309223e904f7793848ab93": "Erreurs",
    "avancé/autresLangages/nouveauxLangages.md.275f66838d3e43f43a586a39bd22fffb": "Si le serveur a des difficultés, il enverra un message d'erreur. Le champ `id` est facultatif et sera présent si l'erreur provient spécifiquement d'une requète particulière.",
    "avancé/autresLangages/nouveauxLangages.md.e46d5228bf0dc398ec4ea3e18c3b5ccc": "```Json\n{\n  \"type\": \"erreur\",\n  \"id\": \"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed\",\n  \"erreur\": \"Message d'erreur tel que rencontré par le serveur.\"\n}\n```\n",
    "avancé/autresLangages/nœudLocal.md.be3169e3127dfdc26720c2c879e4b7d9": "Nœud local",
    "avancé/autresLangages/nœudLocal.md.3a42ae330715b19bcafdeef794921f36": "![Serveur WS](https://github.com/reseau-constellation/serveur-ws/actions/workflows/tests.yml/badge.svg)",
    "avancé/autresLangages/nœudLocal.md.e7eea8b5bc5b9d123607b990a2f05e5d": "https://github.com/reseau-constellation/serveur-ws/actions/workflows/tests.yml",
    "avancé/autresLangages/nœudLocal.md.f1a2ee3e4a41bea26bd09872831fce40": "La librairie `@constl/serveur` vous permet de créer un nœud local Constellation et de le rendre accessible à d'autres logiciels sur votre machine par l'entremise d'un serveur WS local.",
    "avancé/autresLangages/nœudLocal.md.aa5570c62769402fa05a7f1cec5ef14e": "::: warning\n⚠️ Ce serveur **local** n'est pas apte à être utilisé en tant que serveur publique ! Entre autres limitations, **il n'y a aucun contrôle d'authentification et il donne accès illimité à un environnement Node.js**. Il est donc configuré afin d'être uniquement disponible sur localhost. Ce serveur est dédié uniquement à la communication entre processus sur le même ordinateur, lorsque différents processus veulent accéder au même nœud Constellation local.",
    "avancé/autresLangages/nœudLocal.md.102adcb9923a1cd1804daecf5b3a0845": "**N'exposez jamais le serveur WS Constellation sur un port publique.**\n:::",
    "avancé/autresLangages/nœudLocal.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/autresLangages/nœudLocal.md.2e5b48c8af32b402b03b4455d511ada6": "Vous pouvez installer le serveur local Constellation ainsi :",
    "avancé/autresLangages/nœudLocal.md.6520ed3c8d95da69febad8fb79c0f14d": "```shell\n$ pnpm add @constl/serveur\n```\n",
    "avancé/autresLangages/nœudLocal.md.2f5a71cea28bf345757d21b8c467b7c4": "Utilisation",
    "avancé/autresLangages/nœudLocal.md.5ee9f17e305a9f474bdc8a7b4fe5a551": "Si vous voulez tout simplement utiliser Constellation avec Python ou R, veuillez installer les librairies respectives [constellation-py](https://github.com/reseau-constellation/client-python), [Constellation.jl](https://github.com/reseau-constellation/Consellation.jl) et [constellation-R](https://github.com/reseau-constellation/client-r) (en progrès). Celles-ci se chargeront automatiquement de lancer le serveur Constellation.",
    "avancé/autresLangages/nœudLocal.md.fa1fd650717a904e072ecea83e7f24f8": "Installation globale",
    "avancé/autresLangages/nœudLocal.md.3d6e423cc1b62bdfb9ccad205df97379": "L'installation globale vous permet de lancer un nœud local Constellation de la ligne de commande. Si vous comptez simplement utiliser le serveur Constellation (y compris pour une analyse en Python, en R ou en Julia), installez-le comme suit :",
    "avancé/autresLangages/nœudLocal.md.866081caca954c02c759012668c6ef5c": "```shell\n$ pnpm add -g @constl/serveur @constl/ipa\n```",
    "avancé/autresLangages/nœudLocal.md.8151b60814fa20347742ac33bfd533ac": "Ligne de commande",
    "avancé/autresLangages/nœudLocal.md.07d88e341270868fbcb1704442cd20b6": "Vous pourrez ensuite lancer le nœud local en spécifiant (ou non) le port, l'identifiant de compte, et les dossiers à utiliser pour sauvegarder les données de votre compte :",
    "avancé/autresLangages/nœudLocal.md.3d9b1734d7baa9b4e95b308d76d7b7b4": "`$ constl lancer [-p <port>] [--compte <id-compte>] [--doss-orbite <dossierOrbite>] [--doss-sfip <dossierSFIP>]`",
    "avancé/autresLangages/nœudLocal.md.8157bc4f8ed0019e44cf981b3f40f391": "Si vous ne comprennez pas ce que font les options de compte ou de dossier, laissez-les vides et inquiétez-vous pas ; ça fonctionnera pareil.",
    "avancé/autresLangages/nœudLocal.md.176acbcb2baf684c2c538e68e13ae94a": "Pour obtenir le numéro de la version :",
    "avancé/autresLangages/nœudLocal.md.8a6a592c809bdbadc79a8718cacfe3ee": "```shell\n$ constl version\n```",
    "avancé/autresLangages/nœudLocal.md.f452abef3d276ae8a44e48e912f20baa": "Pour obtenir de l'aide :",
    "avancé/autresLangages/nœudLocal.md.63b8dc2300b23ee97c1741f794bc31c0": "```shell\n$ constl -a\n```",
    "avancé/autresLangages/nœudLocal.md.2b4233c9702c93b484e10c29d8963780": "Utilisation dans un autre projet",
    "avancé/autresLangages/nœudLocal.md.f311af917a0fd5924eb1643a7e510f0f": "Si vous voulez incorporer le serveur Constellation dans une autre librairie\nJavaScript, vous pouvez l'installer ainsi :",
    "avancé/autresLangages/nœudLocal.md.44b5caec8dfc8da4ddde9cf25f428981": "```shell\n$ pnpm add @constl/serveur\n```",
    "avancé/autresLangages/nœudLocal.md.0efb9d3f1a3a1d6eb10bae55e4bdd8cd": "Vous pourrez ensuite importer le serveur dans votre propre code et le lancer programmatiquement.",
    "avancé/autresLangages/nœudLocal.md.f92608a5cc005e76a95972af6ef48c1f": "::: tip \nConstellation elle-même (`@constl/ipa`) est spécifiée en tant que dépendance pair du serveur Constellation. Vous pouvez donc installer la version de Constellation qui vous convient.\n:::",
    "avancé/autresLangages/nœudLocal.md.e8904b85798ee05da76034f4df6ea420": "Serveur",
    "avancé/autresLangages/nœudLocal.md.497536c1b63d30c285fbf9fc9ccc5efb": "```JavaScript\nimport { lancerServeur } from \"@constl/serveur\";\n\nconst { fermerServeur, port } = await lancerServeur();\n\n// `port` contient maintenant le numéro de port à utiliser dans le client\n\n// Lorsqu'on a fini :\nfermerServeur();\n\n```",
    "avancé/autresLangages/nœudLocal.md.03702932b2e0d39fd17c6feb715895cd": "Invoqué sans configuration, `lancerServeur` trouvera un port disponible sur `localhost` et redonnera cette valeur dans la variable `port`. Vous pouvez également spécifier une configuration Constellation plus précise :",
    "avancé/autresLangages/nœudLocal.md.06e3fa1d29b2ce1cd3cdf299cbe56044": "```TypeScript\nimport { lancerServeur } from \"@constl/serveur\";\n\nconst { fermerServeur, port } = await lancerServeur({\n  port: 5003,\n  optsConstellation: {\n    orbite: {\n      dossier: \"mon-dossier-orbite\",  // Dossier pour bd-orbite\n      sfip: {\n        dossier: \"mon-dossier-sfip\"  // Dossier du Système de fichiers interplanétaire\n      }\n    },\n  }\n});\n\n```",
    "avancé/autresLangages/nœudLocal.md.577d7068826de925ea2aec01dbadf5e4": "Client",
    "avancé/autresLangages/nœudLocal.md.c2075744999c61424f119741b2b29aa4": "Vous voudrez aussi probablement utiliser le client websocket qui est aussi disponible dans cette librairie. Celui-ci peut être lancé dans un processus séparé, se connecte au serveur local Constellation et vous pemettra de l'utiliser comme s'il s'agissait d'une instance Constellation normale. Alternativement, vous pouvez vous connecter au serveur à partir d'un autre langage informatique.",
    "avancé/autresLangages/nœudLocal.md.a9de0e46213950031b43478fd2d9aea9": "```TypeScript\nimport { lancerClient } from \"@constl/serveur\";\n\nconst port = 5001  // Ou une autre valeur, selon `lancerServeur`\nconst { client, fermerClient } = lancerClient(port);\n\n// On peut maintenant appeler des fonctions sur le client comme s'il\n// s'agissait d'un client Constellation ordinaire :\nlet noms = {};\nconst oublierNoms = await client.profil.suivreNoms(x => noms = x);\n\n// Pour arrêter le suivi :\noublierNoms();\n\n// Lorsqu'on a fini :\nfermerClient();\n\n```",
    "avancé/autresLangages/python.md.a7f5f35426b927411fc9231b56382173": "Python",
    "avancé/autresLangages/python.md.d5981d9c337925154edf66040348b0dc": "Cette librarie offre un client [Constellation](https://reseau-constellation.github.io/constellation)\npour [Python](https://python.org). Elle fonctionne en lançant\nun [serveur ws Constellation](https://github.com/reseau-constellation/serveur-ws)\nlocal, avec lequel elle gère ensuite la communication par websocket.",
    "avancé/autresLangages/python.md.2913bf83c05ce6562530c04c9fdc2317": "![Paquet Python](https://github.com/reseau-constellation/client-python/actions/workflows/test.yaml/badge.svg)",
    "avancé/autresLangages/python.md.dc6d718bcb69c6c219d104f05ab05730": "https://github.com/reseau-constellation/client-python/actions/workflows/test.yaml",
    "avancé/autresLangages/python.md.23d5a733a2917f7e73ac37e9522307c7": "![codecov](https://codecov.io/gh/reseau-constellation/client-python/branch/master/graph/badge.svg?token=F5dfS5Epsg)",
    "avancé/autresLangages/python.md.58f22f131c8ac30942c3ec4324165706": "https://codecov.io/gh/reseau-constellation/client-python",
    "avancé/autresLangages/python.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "avancé/autresLangages/python.md.fdc99817bb499bc397bb6d1a396e0860": "Vous pouvez installer ConstellationPy avec `poetry` :",
    "avancé/autresLangages/python.md.b01aac45e9b80b799541c739b4c01736": "```sh\n$ poetry add constellationPy\n```",
    "avancé/autresLangages/python.md.a49c3ca9033290e652a6d2b39d27adf4": "... ou bien avec `pip`",
    "avancé/autresLangages/python.md.e5ba3f667f3bf12335e54e090459b9f9": "```sh\n$ pip install constellationPy\n```",
    "avancé/autresLangages/python.md.14e3491b18c0f1adacde335b945a30ac": "::: tip\nSi le serveur Constellation n'est pas déjà installé sur votre machine, ConstellationPy l'installera automatiquement pour\nvous. Pour ce faire, vous devrez au tout minimum avoir [Node.js](https://nodejs.org/fr/)\ninstallé localement.\n:::",
    "avancé/autresLangages/python.md.2f5a71cea28bf345757d21b8c467b7c4": "Utilisation",
    "avancé/autresLangages/python.md.c4a430f55f0f770ffa80b9b5c3918e0d": "ConstellationPy est une libraries **asynchrone** basée sur [trio](https://trio.readthedocs.io). Étant donné que le serveur\nConstellation est fondamentalement asynchrone aussi, c'était la décision naturelle.",
    "avancé/autresLangages/python.md.8753c8cea0e1de7e7700a3d26aee7081": "Cependant, nous comprenons bien que la grande majorité des utilisatrices et utilisateurs de Python n'ont aucune idée de\nce qu'est la programmation asynchrone, ni aucun goût ou raison de l'apprendre. C'est pour cela que ConstellationPy vous\noffre également une IPA synchrone.",
    "avancé/autresLangages/python.md.b15b28ca5b47a116b8ff2da3136f5097": "::: tip\nVous ne savez pas ce que « synchrone » ou « asynchrone » veulent dire ? Ne vous en faites pas et utilisez l'IPA synchrone. « Synchrone » est le terme technique pour le style de code « normal » Python que vous connaissez bien. Si vous voulez en savoir plus, [voici](https://adrienjoly.com/cours-nodejs/sync-vs-async.html) une belle présentation de la différence entre les deux (en JavaScript).\n:::",
    "avancé/autresLangages/python.md.829c80b59f37d6de4be7fd39a1bb6434": "IPA synchrone",
    "avancé/autresLangages/python.md.2b02ef97037f2e78829c1b38f5f47b53": "En premier lieu, nous devons lancer le serveur Constellation. C'est absolument nécessaire, à moins que vous n'aviez déjà lancé un serveur Constellation [manuellement](https://github.com/reseau-constellation/serveur-ws/blob/master/README.md#ligne-de-commande), lorsque, par exemple, vous voulez exécuter plusieurs codes Python qui utilisent Constellation en parallèle sans dupliquer le serveur (oui, c'est bien possible) !",
    "avancé/autresLangages/python.md.5f9d0fa2cb9974075320ddbefc7b5f8d": "::: warning\nAttention ! L'IPA synchrone fonctionne bien pour des petites tâches (p. ex., récupérer un ou deux jeux de données), mais l'IPA asynchrone est beaucoup plus efficace si vous traitez de grands nombres de données ou de requêtes à Constellation. Si vous avez besoin d'accéder beaucoup de différentes bases de données Constellation, peut-être que ça vaudrait la peine, après tout, [d'apprendre](https://trio.readthedocs.io/en/stable/tutorial.html) comment utiliser ces drôles de `async` et `await` en Python.\n:::",
    "avancé/autresLangages/python.md.c3df59443006c16e3a2365f849e75ad5": "Donc, on commence. La façon la plus sure, c'est d'utiliser un bloc `with`, car celui-ci fermera automatiquement le\nserveur une fois que vous aurez terminé avec. **Cette syntaxe permettra aussi au client Constellation de détecter\nautomatiquement le port auquel il devra se connecter.**",
    "avancé/autresLangages/python.md.1515e176675b095361dc71006212e201": "```python\nfrom constellationPy import Serveur, ClientSync\n\nwith Serveur():\n    client = ClientSync()\n    données = client.appelerUneFonction()\n    ...\n\n```",
    "avancé/autresLangages/python.md.c43a009e611961159379c73285ef1ac1": "Vous pouvez aussi lancer le client Constellation manuellement. Cette option est particulièrement utile si vous voulez \nobtenir les données les plus à jour du réseau.\nN'oubliez pas que Constellation est un *réseau* d'utilisatrices et d'utilisateurs comme vous ! Il n'y\na donc pas de « serveur central » Constellation en tant que tel pour garder une copie des données. \nSi les données qui vous intéressent sont sur\nl'ordinateur ou le téléphone d'une autre participante au réseau, cela peut prendre un peu de temps\npour que votre nœud local puisse se connecter à la nuée d'autres nœuds Constellation et reçoive\nles données les plus récentes. Comme règle générale, le plus longtemps le nœud reste en ligne,\nle plus de connexions et de données il obtiendra.",
    "avancé/autresLangages/python.md.01445f6959f8413638b7dfad60c2a38e": "Vous pouvez donc lancer votre nœud local à l'aide de la ligne de commande. Vous pouvez utiliser\nn'importe quel port libre (ici `5001`). Vous pouvez le laisser rouler aussi longtemps que vous voudrez,\nil y se synchronisera automatiquement avec le réseau Constellation.\nTout client pyConstellation que vous lancerez en même temps obtiendra ainsi les données les plus\nà jour disponibles.",
    "avancé/autresLangages/python.md.7b83e584ea0f33b7c4789d96238ecc06": "::: tip\nNote : pour installer Constellation pour la première fois, faites rouler le code suivant une seule fois sur votre ordinateur :",
    "avancé/autresLangages/python.md.daa901f9281eb3968f70707337705749": "```python\nfrom constellationPy import mettre_constellation_à_jour\n\nmettre_constellation_à_jour()\n```\n",
    "avancé/autresLangages/python.md.e441fcf4a7686817fe868bf38a5c2c07": ":::",
    "avancé/autresLangages/python.md.235b0922ff54c246abccd789ac7c6998": "Vous pourrez ensuite invoquer le serveur Constellation ainsi :",
    "avancé/autresLangages/python.md.96af275fa3af9549d56d509ebd6e782d": "```shell\n$ constl lancer --port 5001 -b\n```",
    "avancé/autresLangages/python.md.3133db4849d952065eaf90dcacc1f967": "Vous ne savez pas quel port mettre ? Lancez tout simplement `constl lancer` et puis Constellation\nvous donnera le numéro du port libre qu'elle aura trouvé.",
    "avancé/autresLangages/python.md.e427e8baec166d3396b0e5cc15ecae78": "Vu que vous avez déjà lancé votre propre serveur Constellation, vous devrez spécifier le port manuellement dans le client :",
    "avancé/autresLangages/python.md.034f46d0749deb4f832431d1fc41936a": "```python\nfrom constellationPy import ClientSync\n\nclient = ClientSync(port=5001)\n...\n\n```",
    "avancé/autresLangages/python.md.28855846c7f24bed24a84a988b34336d": "::: tip\nNote : vous pouvez également spécifier le port du client sur `Client` et `ouvrir_client` (voir ci-dessous).\n:::",
    "avancé/autresLangages/python.md.70936993fd5c7cb9cee4d33dc8d9fbf5": "Fonctions disponibles",
    "avancé/autresLangages/python.md.e07d82927641097eecf7f7e08ee3c551": "Toutes* les fonctions de l'IPA (Interface de programmation\nd'application) [Constellation](https://github.com/reseau-constellation/ipa) sont disponibles.",
    "avancé/autresLangages/python.md.57dc0340365e5a37a100a349a34d0548": "::: tip\nNote : vous pouvez appeler les fonctions Constellation en forme kebab (`ma_fonction`, style Python) ou bien chameau (`maFonction`, style JavaScript). À titre d'exemple :",
    "avancé/autresLangages/python.md.77547ed5c186e9b57c21d0113f1208f7": "```python\nfrom constellationPy import ClientSync, Serveur\n\nwith Serveur():\n    client = ClientSync()\n\n    résultatChameau = client.obtIdDispositif()\n    résultat_kebab = client.obt_id_dispositif()\n\n    print(résultatChameau == résultat_kebab)\n```\n",
    "avancé/autresLangages/python.md.1565a8d3a5c9290a4b16eecc6dab43c1": "Vous pouvez également accéder les sous-objets de Constellation (`profil`, `bds`, `tableaux`, et ainsi de suite) :",
    "avancé/autresLangages/python.md.9b3882ecacef9e9ebf5e16c9d02de358": "```python\nfrom constellationPy import ClientSync, Serveur\n\nwith Serveur():\n    client = ClientSync()\n\n    client.profil.sauvegarder_nom(langue=\"fr\", nom=\"moi !\")\n    client.bds.créer_bd(licence=\"ODbl-1_0\")\n\n```",
    "avancé/autresLangages/python.md.1af2c724739b24e71e0bb285bdab2c4f": "Fonctions bien commodes",
    "avancé/autresLangages/python.md.fa639800302f701725000a3b378f054b": "L'IPA du client Python vous offre aussi quelques fonctions plus commodes qui n'existent pas dans l'IPA original de\nConstellation :",
    "avancé/autresLangages/python.md.932d2acd7a667064879abf1b464b17ec": "```python\nfrom constellationPy import ClientSync, Serveur\n\nid_tableau = \"/orbitdb/zdpu...\"\n\nwith Serveur():\n    client = ClientSync()\n    données = client.obt_données_tableau(id_tableau=id_tableau)\n```",
    "avancé/autresLangages/python.md.212eefd21ad20ffabd7a2765cf48c3b8": "Vous pouvez également obtenir les données en format Pandas, y compris avec les colonnes identifiées selon\nle nom des variables correspondantes dans la langue de votre choix, si elle est disponible :",
    "avancé/autresLangages/python.md.5673de53a9d07f2e9ec8bf26e1673f5f": "```python\nfrom constellationPy import ClientSync, Serveur\n\nid_tableau = \"/orbitdb/zdpu...\"\n\nwith Serveur():\n    client = ClientSync()\n    données = client.obt_données_tableau(id_tableau=id_tableau, langues=[\"fr\", \"es\"], formatDonnées=\"pandas\")\n```",
    "avancé/autresLangages/python.md.c7bce479b32e9a65c2e7ac869835185e": "**Quelques points importants**",
    "avancé/autresLangages/python.md.8e135dc5dc48f76c74d189d42b668270": "* Les fonctions plus obscures qui prennent plus qu'une autre fonction comme argument (p. ex. `client.suivreBdDeFonction`) ne fonctionnent pas avec le client Python. Ne vous en faites pas. Elles sont obscures pour une raison. Laissez-les en paix. Vous avez amplement de quoi vous amuser avec le reste de l'IPA.\n* Vous **devez** utiliser des paramètres nommés (p. ex., `client.bds.créerBd(licence=\"ODbl-1_0\")`). Si vous ne le faites pas (`client.bds.créerBd(\"ODbl-1_0\")`), ça va vous créer des ennuis. Les noms des paramètres doivent être les mêmes que dans l'IPA Constellation JavaScript (p. ex., l'exemple précédent provient de la version JavaSCript `client.bds.créerBd({ licence: \"ODbl-1_0\" })`).\n* Avec le client synchrone, les fonctions de suivi (voir ci-dessous) doivent être appelées avec une fonction vide (p. ex., `lambda: pass` ou bien tout simplement `fais_rien`) à la place de la fonction de suivi.\n* Vous vous demandez où trouver tous ces drôles de « id tableau » pour les bases de données qui vous intéressent ? Il s'agit de l'identifiant unique d'un tableau ou d'une base de données, que vous pouvez récupérer lorsque vous créez la base de données, ou bien visuellement avec l'[appli Constellation](https://reseau-constellation.github.io/constellation) (recherchez l'icône lien 🔗).",
    "avancé/autresLangages/python.md.19a5e0fd789a0ad602bff1acc5497710": "Fonctions de suivi",
    "avancé/autresLangages/python.md.d16b349d77e465678bc5573b8edf0d6f": "Constellation, dans sa version asynchrone JavaScript, offre des fonctions qui, plutôt que de rendre le résultat immédiatement, *suivent* le résultat à travers le temps et vous notifient (selon une fonction que vous choisissez) chaque fois que le résultat change. La grande majorité des fonctions utiles de l'IPA de Constellation (p. ex., `client.tableaux.suivreDonnées`) sont de ce genre.",
    "avancé/autresLangages/python.md.750df6bc3855afe2e91c31b7aca4d208": "Évidemment, ce comportement n'est pas util dans un programme synchrone. Le client synchrone `ClientSync`\ns'occupe donc de vous rendre le résultat, sans tracas. Il vous suffira de passer une fonction vide là où la fonction\noriginale s'attendait à avoir la fonction de suivi. Par exemple, si l'on appellerait la fonction comme suit dans\nConstellation JavaScript,",
    "avancé/autresLangages/python.md.3138f50fd9dce3bb3a98a3bc5028e51c": "```javascript\nconst données = await client.tableaux.suivreDonnées({ idTableau: id_tableau, f: fSuivi });\n```",
    "avancé/autresLangages/python.md.0d452872865160603df133d1acff6dc4": "Ici, en Python, nous ferons ainsi :",
    "avancé/autresLangages/python.md.ce9b45919c8ef7da15892268bad75daf": "```python\nfrom constellationPy import ClientSync, Serveur, fais_rien\n\nid_tableau = \"/orbitdb/zdpu...\"\nwith Serveur():\n    client = ClientSync()\n\n    mes_données = client.tableaux.suivre_données(id_tableau=id_tableau, f=fais_rien)\n```",
    "avancé/autresLangages/python.md.a0cea101eb6ca687074ddb2d74cfdfa9": "IPA asynchrone",
    "avancé/autresLangages/python.md.628297ee0cb40bf684658295af1bc812": "L'IPA asynchrone doit être utilisée avec [trio](https://trio.readthedocs.io/). Il a les mêmes fonctions que l'IPA\nsynchrone, mais dois être invoqué dans un bloc `async with ouvrir_client() as client:`",
    "avancé/autresLangages/python.md.9060bac37ea40213f5f53309e36ee023": "```python\nimport trio\n\nfrom constellationPy import Serveur, ouvrir_client\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def principale():\n    with Serveur():\n        async with ouvrir_client() as client:\n            données = await client.obt_données_tableau(id_tableau=id_tableau)\n            print(données)\n            ...\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/python.md.bc5cf2aa32ab07ade8583336735b822c": "Fonctions de suivi et `une_fois`",
    "avancé/autresLangages/python.md.5b0cfa1e91846b1cb37e33b73b634594": "Tel que mentionné ci-dessus, la majorité des fonctions utiles de Constellation sont des fonctions de suivi. Nous devons\nles appeler avec une fonction qui sera invoquée à chaque fois que le résultat sera mis à jour.",
    "avancé/autresLangages/python.md.458356b7497fc279d708ee55ba47d61f": "```python\nimport trio\n\nfrom constellationPy import Serveur, ouvrir_client\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def principale():\n    with Serveur():\n        async with ouvrir_client() as client:\n            # Suivre les données du réseau pour 15 secondes, et imprimer les résultats au fur et à mesure\n            # qu'ils nous parviennent du réseau\n            oublier_données = await client.tableaux.suivre_données(id_tableau=id_tableau, f=print)\n            await trio.sleep(15)\n\n            oublier_données()  # Maintenant on ne recevra plus les mises à jour des données\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/python.md.0a9a3fa3d70da7e6c78104b230ff9501": "Mais en Python, il est probable que, au lieu de vouloir suivre le résultat de la fonction à travers le temps, vous\npréférerez obtenir les données présentes et puis poursuivre vos analyses. La fonction `une_fois`\nvous permet de faire justement cela :",
    "avancé/autresLangages/python.md.a301ed55e08f9906e49976d432db1727": "```python\nimport trio\n\nfrom constellationPy import Serveur, ouvrir_client, une_fois\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def principale():\n    with Serveur():\n        async with ouvrir_client() as client:\n            # On doit définir une fonction auxiliaire qui ne prend que la fonction de suivi\n            # en tant qu'argument\n            async def f_données(f):\n                return await client.tableaux.suivre_données(id_tableau=id_tableau, f=f)\n\n            # La fonction `une_fois` appellera `f_données`, attendra le premier résultat,\n            # et nous renverra celui-ci.\n            données = await une_fois(f_données, client)\n\n            return données\n\n\nmes_données = trio.run(principale)\nprint(mes_données)\n```",
    "avancé/autresLangages/python.md.3921b958a3d441de037496a9f857cad2": "Utilisation avancée",
    "avancé/autresLangages/python.md.1e653dafe765cbce4c27c4ea98df72af": "Voici un exemple un peu plus avancé. Si vous avez plusieurs coroutines Python que vous voulez exécuter en parallèle avec\nConstellation, vous pouvez créer une pouponnière `trio` et la réutiliser pour les deux coroutines en invoquant `Client`\ndirectement.",
    "avancé/autresLangages/python.md.ada668fea30b6cd05074e28eeb148e6f": "```python\nimport trio\nfrom constellationPy import Client\n\nrésultats = {}\n\n\nasync def coroutine1(client):\n    idBd = await client.bds.créerBd(licence=\"ODbl-1_0\")\n    résultats[\"1\"] = idBd\n\n\nasync def coroutine2(client):\n    idBd = await client.bds.créerBd(licence=\"ODbl-1_0\")\n    résultats[\"2\"] = idBd\n\n\nasync def principale():\n    async with trio.open_nursery() as pouponnière:\n        async with Client(pouponnière) as client:\n            await client.connecter()  # À ne pas oublier ! Sinon je ne suis pas responsable.\n\n            pouponnière.start_soon(coroutine1, client)\n            pouponnière.start_soon(coroutine2, client)\n\n\ntrio.run(principale)\n\nprint(résultats)\n```",
    "avancé/autresLangages/python.md.7b4cac65638951683d00c50dd6597dc0": "Ceci peut aussi être utile avec\nles [canaux](https://trio.readthedocs.io/en/stable/reference-core.html#using-channels-to-pass-values-between-tasks)\nde `trio` pour communiquer entre les coroutines :",
    "avancé/autresLangages/python.md.aa601189e42ea1d0b8d72e8f2ff1ebea": "```python\nimport trio\nfrom constellationPy import Client\n\nid_tableau = \"/orbitdb/zdpu...\"\n\n\nasync def coroutine_constellation(pouponnière, canal_envoie):\n    async with Client(pouponnière) as client:\n        await client.connecter()  # À ne pas oublier ! Sinon je ne suis pas responsable.\n\n        données = await client.obt_données_tableau(id_tableau=id_tableau)\n\n        async with canal_envoie:\n            await canal_envoie.send(données)\n\n\nasync def une_autre_coroutine(canal_réception):\n    async with canal_réception:\n        async for message in canal_réception:\n            print(message)  # En réalité, faire quelque chose d'asynchrone, comme écrire au disque\n\n\nasync def principale():\n    async with trio.open_nursery() as pouponnière:\n        canal_envoie, canal_réception = trio.open_memory_channel(0)\n\n        pouponnière.start_soon(coroutine_constellation, pouponnière, canal_envoie)\n        pouponnière.start_soon(une_autre_coroutine, canal_réception)\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/python.md.73bf8ac6bf013233660c2f7b62fabf4e": "Traitement des erreurs",
    "avancé/autresLangages/python.md.13a62ba6f5d2d1d69bd86669297536c3": "Vous pouvez aussi initialiser `Client` avec un canal `trio` pour recevoir les erreurs. Si le client ou le serveur\nencontre une erreur, celle-ci sera envoyée au canal erreur au lieu de soulever une erreur et d'arrêter exécution du\nprogramme. Cette option peut être utile lorsque vous ne voulez pas qu'une erreur sur une requête arrête toute\nl'exécution du logiciel.",
    "avancé/autresLangages/python.md.3f0e84957696ae24105b34df76eae5ce": "```python\nimport trio\n\nfrom constellationPy import Serveur, Client\n\n\nasync def coroutine_client(pouponnière, canal_envoie_erreur):\n    async with canal_envoie_erreur:\n        async with Client(pouponnière) as client:\n            await client.connecter(canal_envoie_erreur)  # À ne pas oublier ! Sinon je ne suis pas responsable.\n            # Faire quelque chose avec le client\n\n\nasync def coroutine_erreurs(canal_reçoie_erreurs):\n    async with canal_reçoie_erreurs:\n        async for erreur in canal_reçoie_erreurs:\n            print(erreur)  # Ou écrire à un fichier journal sur le disque...\n\n\nasync def principale():\n    with Serveur():\n        async with trio.open_nursery() as pouponnière:\n            canal_envoie_erreur, canal_reçoie_erreur = trio.open_memory_channel(0)\n\n            pouponnière.start_soon(coroutine_client, pouponnière, canal_envoie_erreur)\n            pouponnière.start_soon(coroutine_erreurs, canal_reçoie_erreur)\n\n\ntrio.run(principale)\n```",
    "avancé/autresLangages/r.md.e1e1d3d40573127e9ee0480caf1283d6": "R",
    "avancé/autresLangages/r.md.b80e15fbcfacbc972c2e45d908ffce7c": "Nous y [travaillons](https://github.com/reseau-constellation/client-r) :)",
    "avancé/autresLangages/r.md.a9a7ed251076ede38209e5fe1b56b059": "![R-CMD-check](https://github.com/reseau-constellation/client-r/actions/workflows/R-CMD-check.yaml/badge.svg)",
    "avancé/autresLangages/r.md.1a2b3d6fefbb699690d26ee66d36a678": "https://github.com/reseau-constellation/client-r/actions/workflows/R-CMD-check.yaml",
    "exemples/diffusion.md.6bac750358f0e788f6eaa7e33c5f4fdd": "Diffusion de données",
    "exemples/diffusion.md.4d4caefe907f2ac789db35f68c708462": "pageAccueil",
    "exemples/diffusion.md.8e1e7ab0f32e8ab98d606b3227124816": "Voici comment changer la langue",
    "exemples/diffusion.md.e916af5808a5126e59d8526d47f846ec": "changerLangue",
    "exemples/diffusion.md.0758881a497c631d96315e4f62773f36": "Nous y travaillons... revenez plus tard, ou, encore mieux, [contactez-nous !](mailto:julien.malard@mail.mcgill.ca)",
    "exemples/scienceCitoyenne.md.23171fe4fd6ef39d7a0b5e888493cf86": "Science citoyenne",
    "exemples/scienceCitoyenne.md.0758881a497c631d96315e4f62773f36": "Nous y travaillons... revenez plus tard, ou, encore mieux, [contactez-nous !](mailto:julien.malard@mail.mcgill.ca)",
    "guide/concepts.md.3b06a600ea241135bf10bf6ced7c0c4e": "Terminologie Constellation",
    "guide/concepts.md.024522401307638b0f34b7f331ce93a8": "Constellation ressemble beaucoup à un tableau LibreOffice ou Excel, mais avec quelques fonctionnalités en plus. ",
    "guide/concepts.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "guide/concepts.md.577d7068826de925ea2aec01dbadf5e4": "Client",
    "guide/concepts.md.46cb6d6f08c3ac10a63b5c40da5205c4": "Le [client](/ipa/client.md) est le point central de Constellation. Chaque compte correspond à un client Constellation.",
    "guide/concepts.md.820c6916ebfb13d1738ab6a13cf0a69b": "Profil",
    "guide/concepts.md.a31e9938812a4b60402bf63eae093b7e": "Le [profil](/ipa/profil.md) de Constellation organise les information du compte d'utilisateur.",
    "guide/concepts.md.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "guide/concepts.md.e41f5c842a1830506814ddccc2d4696e": "Les [mots-clefs](/ipa/motsClefs.md) servent à indexer les bases de données.",
    "guide/concepts.md.059c8595193d0680e728c17de17b3169": "Bases de données",
    "guide/concepts.md.884b83f2d41bce4d903923f8224ead9c": "L'unité centrale de Constellation est la [base de données](/ipa/bds.md).",
    "guide/concepts.md.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "guide/concepts.md.3caae57bd1cbf86ae2f0c6c0f909284e": "Chaque base de données à un ou plusieurs [tableaux](/ipa/tableaux.md).",
    "guide/concepts.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "guide/concepts.md.a2df67abfee4160ccc50409ed742af44": "Chaque colonne d'un tableau est associée à une [variable](/ipa/variables.md).",
    "guide/concepts.md.683aa9561cfe5618d140710d10917697": "Projet",
    "guide/concepts.md.583aff017b20237d19b1f594670cb546": "Un [projet](/ipa/projets.md) regroupe plusieurs bases de données traitant du même sujet.",
    "guide/concepts.md.836d64c92151a341b114b051cb4cbc83": "Réseau",
    "guide/concepts.md.28cfb07fd0072c217d16dc7e3a950751": "Le [réseau](/ipa/réseau.md) vous permet d'accéder aux informations des autres membres connectés.",
    "guide/concepts.md.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "guide/concepts.md.6997a2541cba500fc84221bed5f83bc8": "Vous pouvez également [rechercher](/ipa/recherche.md) les données qui vous intéressent.",
    "guide/concepts.md.bc54c637e9230a4e9f41e88b14c53f8a": "Nuée",
    "guide/concepts.md.371816c36333ef5c036316b26f798af1": "Les [nuées](/ipa/nuées.md) vous permettent de créer des projets de science citoyenne et de regrouper toutes les contributions de vos participants à la même place.\n",
    "guide/installation.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "guide/installation.md.1aed75df7f82dd20d973718c7eb67e1f": "Constellation peut être installé sur votre ordinateur ou bien accédé à travers l'[appli Internet](https://réseau-constellation.ca). Si vous l'installez, cela peut être fait avec ou sans l'interface graphique. ",
    "guide/installation.md.3582ca59615ca0d8f7741c163a5dcec6": "Il y a plusieurs avantages à installer Constellation sur votre ordinateur plutôt que d'utiliser l'appli en ligne. Premièrement, vous aurez accès à plus de mémoire, l'appli en ligne étant limitée par la mémoire de votre navigateur. En plus, la version installée offre plus de fonctionnalités, tel le partage automatique de vos données à base d'un fichier local et la sauvegarde automatique des données Constellation sur votre ordinateur.",
    "guide/installation.md.420cfa938e93985f61b6520554e50be5": "Fonctionnalité",
    "guide/installation.md.439bd2638ac0bc5f268b65e7a3268b03": "Constellation navigateur",
    "guide/installation.md.cedce24b39179850faf2080a51cb1a7c": "https://réseau-constellation.ca",
    "guide/installation.md.4487bf37ddf3e5ad692767bde2c5ac35": "Constellation installée",
    "guide/installation.md.a879041545c4ac1ad2442f03502d04ac": "https://réseau-constellation.ca/téléchargements",
    "guide/installation.md.16e218b46bbbdad91a11ea9b6556795d": "Exportation manuelle",
    "guide/installation.md.fa3bf6e4f7d17c9beb330c0d59fcffad": "✅",
    "guide/installation.md.35df84b70aa95d4d9d43ddc5e921780b": "Exportation automatisée",
    "guide/installation.md.9f7cc089afd4067764f9649e7cc6d108": "❌",
    "guide/installation.md.84c1f542ecd2f109b45831fbb6f009ad": "Importation manuelle (URL ou fichier)",
    "guide/installation.md.a65fd33cafeb136c5435087b7f26fdf7": "Importation automatisée (URL)",
    "guide/installation.md.fc158b3dee9596e3d01fad7e4d4ac67f": "Importation automatisée (fichier)",
    "guide/installation.md.2865252c83551b61bd7d2673a640fc43": "Mémoire",
    "guide/installation.md.720d64f6868f86dd2bc53ae4dde28d81": "Navigateur",
    "guide/installation.md.b222ce1d25f19d7b8ca005440c794baf": "Système",
    "guide/installation.md.372a7746cfaa469aa546b97afd492a34": "Connectivité TCP",
    "guide/installation.md.a04758249c2b73c0882ef7c9d152bcf4": "Connectivité WebRTC",
    "guide/installation.md.65f048fbee5572ff9589cb6dc1bdff61": "Connectivité WebTransport",
    "guide/installation.md.5877deac64b7ef1f971940c028d8b37f": "✅ (Pas Firefox)",
    "guide/installation.md.771520b6c257449cc5cdc8cde7fde571": "Interface graphique",
    "guide/installation.md.2feb7f938fc35ca187ac3d1028769228": "C'est la façon la plus facile d'installer et d'utiliser Constellation. En plus, on est bien fièrs de notre jolie interface. Vous pouvez télécharger la version la plus récente [ici](https://réseau-constellation.ca/téléchargements).",
    "guide/installation.md.610a2fb96f43ee902032d4e471ffa71f": "Autres langages",
    "guide/installation.md.51042022d1929eac7789a9e8612d4546": "Si vous préférez travailler avec du code, qu'il s'agisse de JavaScript, Python, Julia ou R, il vous est possible d'utiliser Constellation dans ces langages, avec ou sans l'interface graphique ci-dessus. Voir notre [guide avancé](../avancé/autresLangages/introduction.md) pour démarrer.\n",
    "guide/introduction.md.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "guide/introduction.md.c7382476a0ca3126a14275ddc8d1db50": "Constellation est un logiciel de bases de données scientifiques distribuées. Il vous permet de collecter et de diffuser vos données scientifiques sans serveur ou dépôt centralisé.",
    "guide/introduction.md.fa1a3763f39d164de2a5bc5d2408839e": "Qu'est-ce qu'un système distribué ?",
    "guide/introduction.md.6edb103ca23b39527483b6b23f1ae78c": "Dans une système distribué, il n'y a pas de serveur qui contrôle les interactions entres utilisateurs. Les personnes participant au réseau communiquent donc directement entre elles. C'est plus résilient et plus amusant !",
    "guide/introduction.md.e43f15596da876faeae78a43b6e4f911": "systèmeCentralisé",
    "guide/introduction.md.cdfe5fce7ccb84099f3e781afd8200cb": "Philosophie générale",
    "guide/introduction.md.789762f8d2363cb623d5dc9e1c26f048": "**Ouvert** : Les données scientifiques devraient être ouvertes et accessibles. Toutes les données partagées sur Constellation sont publiques. (Si vous travaillez en recherche clinique, ce n'est peut-être pas le logiciel pour vous.)",
    "guide/introduction.md.0f35e84c735d830aa08dc76174b428e3": "**Source ouverte** : Tous les logiciels de l'univers Constellation sont distribués sous licence libre.",
    "guide/introduction.md.1f50f67a2497010907cc496c42b484a4": "**Multilingue** : Le monde est une place multilingue ; le monde de la recherche, lui, ne l'est malheureusement pas autant. Beaucoup de données sont collectées dans des régions du monde et ensuite publiées dans des langues que les personnes qui les ont fournies ne parlent pas. Cependant, la structure des logiciels que nous utilisons façonne notre pensée, pour le mieux ou pour le pire. Beaucoup de logiciels de bases de données (Excel, MongoDB, etc.) ne permettent qu'un seul nom par colonne ou champ ; nous sommes ainsi entraînés à entrer des données monolingues. Nous avons donc conceptualisé Constellation afin qu'elle guide ses utilisateurs et utilisatrices vers une meilleure inclusion. Chaque objet en Constellation, soit-ce votre profil, une variable ou une base de données, peut être nommé en autant de langues que vous voulez. Vos données apparaîtront donc dans la langue préférée de chacune de vos utilisatrices finales.",
    "guide/introduction.md.2008942696e38781c82b49048e6523f4": "Comment ça se compare à ... ?",
    "guide/introduction.md.420cfa938e93985f61b6520554e50be5": "Fonctionnalité",
    "guide/introduction.md.974724855beee3a55e93d0b47b1ee3d9": "Constellation",
    "guide/introduction.md.c1d81af5835844b4e9d936910ded8fdc": "Excel",
    "guide/introduction.md.b0afab5771111fcd93ee6058d65ce4c0": "https://fr.wikipedia.org/wiki/Microsoft_Excel",
    "guide/introduction.md.7295efe445ba3b01a1d2927e5ed55140": "LibreOffice",
    "guide/introduction.md.03c04b7d869dc441ebafdf948db32682": "https://fr.libreoffice.org/",
    "guide/introduction.md.f5f9dfcba1f7d139ec1df2ba8b1d450e": "Docs Google",
    "guide/introduction.md.de9a7d2aff275370a9a7465d64a27e8f": "https://www.google.com/intl/fr/drive/",
    "guide/introduction.md.73db297b34bc330b9f0ef4ba80fbb507": "BD sur serveur (",
    "guide/introduction.md.206e3718af092fd1d12f80cae771ccac": "MongoDB",
    "guide/introduction.md.989a018e25a4bac7ca922b2543be141d": "https://www.mongodb.com/fr-fr",
    "guide/introduction.md.fc763cb31e9938f37737394681228f83": ", ",
    "guide/introduction.md.9778840a0100cb30c982876741b0b5a2": "SQL",
    "guide/introduction.md.65a026f938588b7d482bfee1321a8328": "https://sql.sh/",
    "guide/introduction.md.9371d7a2e3ae86a00aab4771e39d255d": ")",
    "guide/introduction.md.d14b96d82641bf52ca118c740e9af67a": "Collaboration simultanée",
    "guide/introduction.md.fa3bf6e4f7d17c9beb330c0d59fcffad": "✅",
    "guide/introduction.md.9f7cc089afd4067764f9649e7cc6d108": "❌",
    "guide/introduction.md.8feab4b09af3183f15319b199aab06f2": "Fonctionne hors ligne",
    "guide/introduction.md.43b9103e36b3373c46826f31d8070787": "Photos, vidéos",
    "guide/introduction.md.2fb0283c86ff0ec7dbaff56b953ddf6f": "Contrôle local des données",
    "guide/introduction.md.5a9a8c49a5a14d9ca6ce0f1ca5c57d10": "Si le serveur vous appartient",
    "guide/introduction.md.a2c3a93748ee815855cd5a25967b9d8f": "Intégration avec vos applis",
    "guide/introduction.md.7fc71c5868e651dd8f11433dfc79a285": "Source ouverte",
    "guide/introduction.md.0911dbeccf82cf4b93ea4b03e106b5dd": "C'est compliqué",
    "guide/introduction.md.9d2a7701f9f645b027a884db87e9d781": "https://www.zdnet.fr/actualites/mongodb-la-nouvelle-licence-sspl-fait-grincer-des-dents-dans-l-open-source-39879413.htm",
    "guide/pairÀPair.md.1ee0d4547f071b9a894f352230f2e349": "Systèmes pair à pair",
    "guide/pairÀPair.md.67c23830f2c00112c67ee629e15106c7": "Afin de bien comprendre Constellation, c'est peut-être util de comprendre ce qu'est un système distribué ou pair à pair. Premièrement, ils ne sont pas exactement la même chose. Un système pair à pair, c'est un système qui, contrairement à votre courriel ou à Google, ne nécessite pas de serveur central pour fonctionner. Chouette, n'est-ce pas ?",
    "guide/pairÀPair.md.3e606eb02f3fb76f67238da6425f14a5": "Les systèmes pair à pair peuvent être **décentralisés** ou bien **distribués**. Dans un système décentralisé, le logiciel est trop gros ou compliqué pour fonctionner sur la majorité des téléphones ou ordinateurs des participants au réseau. Donc, certains participants au réseau qui ont les gros ordinateurs nécessaires servent de point contact et de service pour la majorité des autres participants. À la fin, c'est beaucoup comme un système centralisé.",
    "guide/pairÀPair.md.d83f2614bf8e30ab161dd956b33f580b": "distribuéVsDécentralisé",
    "guide/pairÀPair.md.f0780bb55d237c85505789214977c92b": "Au contraire, dans un système distribué, tout les participants sont égaux les un aux autres. Certains peuvent être connectés avec des machines plus puissantes ou avec plus de mémoire, bien sûr, mais tous intéragissent d'égal à égal dans le réseau.",
    "guide/pairÀPair.md.43f793a266f47fe63fa9712ee2b0e7bc": "::: info\nConstellation n'est **pas** une chaîne de bloques !",
    "guide/pairÀPair.md.fa99a54b17e70959d782a6c58369262b": "Les systèmes pair à pair ont malheureusement une mauvaise réputation, peut-être parce que la majorité des premiers logiciels populaires étaient des platformes de partage de médias piratées. Ensuite sont arrivé les cryptomonnaies basées sur les chaînes de bloques, qui ont fréquemment bien mérité leur réputation en tant que [pyramides de Ponzi](https://web3isgoinggreat.com/) et trous noirs énergétiques [notoirement inefficaces](https://www.usenix.org/publications/loginonline/web3-fraud) pour toute application utile.",
    "guide/pairÀPair.md.5934e9a91adaaba6cecc6afd0d814e55": "Donc nous répétons : Constellation est un système distribué de pair \n en pair, mais **pas** une chaîne de bloques !\n:::",
    "guide/pairÀPair.md.1bd65175ff4de393cb180fe3cd7b65bd": "Mais pourquoi pas une chaîne de bloques ?",
    "guide/pairÀPair.md.18cf43d6371f119610559599bb8f7f80": "Premièrement, parce que c'est ben trop cher. Chaque transaction sur une chaîne de bloques comme Éthereum coûte de la fausse argent (cryptomonnaies), que vous devez malheureusement achetter avec de la vraie argent. Et les fluctuations des prix sont bien entendu complètement hors de notre contrôle. Pourquoi créer un système de données distribuées pour améliorer la souveraineté des données pour ensuite devoir payer des personnes anonymes une somme d'argent variable pour le privilège d'écrire à nos propres bases de données ?",
    "guide/pairÀPair.md.ca569386dfa31dee7746e16ec8e598a1": "Et deuxièmement, c'est complètement inutil. Les chaînes de bloques sont nécessaires pour les cryptomonnaies et leurs transactions financières. Mais nous, on veut partager des données scientifiques. Nous n'avons rien à faire avec de l'argent ou des transactions financières.",
    "guide/pairÀPair.md.8aa8708c8ab480a264059db3ef104c00": "Donc oublions tout ça. Constellation fonctionne de manière complètement distribuée, entièrement sur les dispositifs de ses utilisatrices et utilisateurs.",
    "guide/pairÀPair.md.319ffe41a9c317e51cab5eef46b57ebd": "Comment ça fonctionne",
    "guide/pairÀPair.md.19fd4d103bc4cc03b0289badd335535e": "Lorsque vous sauvegardez des données sur Constellation, celles-ci sont sauvegardées sur votre appareil local, et y resteront toujours disponibles.",
    "guide/pairÀPair.md.707172a5227853ba4a85f8388dd18a5a": "::: tip\nSi vous sauvegardez vos données sur un système sur le « nuage » comme les documents Google, vous aurez peut-être remarqué que vos données n'apparaissent plus lorsque vous (ou Google !) est hors ligne. L'avantage d'un système local comme Constellation est que vous êtes toujours garanti d'avoir accès à vos données, parce qu'elles demeurent toujours sur votre dispositif.\n:::",
    "guide/pairÀPair.md.5f06d27f1d1f6c966799699e875210a0": "Le logiciel Constellation recherche également d'autres utilisatrices et utilisateurs du réseau et vous permet d'accéder et de visualiser leurs données. La magie d'un système distribué est qu'il permet aux tièrces personnes de partager, **mais pas de modifier**, les données des autres. Si vous vivez au Québec et vous partagez vos données scientifiques et avant fermez votre téléphone pour aller dormir, vos données ne seront plus disponible sur le réseau jusqu'à votre réveil, heure de l'est. Mais, si quelqu'un d'autre, disons au Botswana, les a déjà accédées, elles seront automatiquement repartagées et disponibles sur le réseau à partir du nouveau dispositif, toute prêtes pour le réveil de vos collègues de l'Inde au Japon ! Donc, contrairement à un système centralisé, sur Constellation, **le plus populaires vos données, le plus disponibles elles seront.**",
    "guide/pairÀPair.md.b3ba68d046007191d210493241962b57": "Mais comment empêchons-nous les autres personnes de modifier vos données avant de les partager ? Chaque changement que vous apportez à vos données est accompagné d'une signature que uniquement votre compte peut générer. Si quelqu'un d'autre essaie de modifier vos données, la signature deviendra invalide et les changements frauduleux seront automatiquement rejetés par le réseau.",
    "guide/pairÀPair.md.f99eaf959b2fa98f9d26110b7ee69877": "Au niveau technique",
    "guide/pairÀPair.md.1201032be1d433f215a347b37df39b92": "Pour ceux et celles qui ça amuse, Constellation est construit sur [bd-orbite](https://orbitdb.org), un logiciel de bases de données distribuées, lui-même construit sur [libp2p](https://libp2p.io) et le Système de fichiers interplanétaire [SFIP](https://ipfs.io/). Toutes les bases de données sur Constellation sont composées de multiples bases de données orbite, tandis que les fichiers (images, vidéos) sont sauvegardés directement sur SFIP.",
    "images/distribuéDécentralisé.svg.841ec8dc6975331c9a40d1cde0136f2d": "\n    Centralisé\n  ",
    "images/distribuéDécentralisé.svg.d8d956db397c3f51b1fbaaebe3fab689": "\n    Décentralisé\n  ",
    "images/distribuéDécentralisé.svg.c201ce3d54275139a41ae346a4cabe16": "\n    Distribué\n  ",
    "index.md.974724855beee3a55e93d0b47b1ee3d9": "Constellation",
    "index.md.8f0a38e0c120f3eb2efb38c6fa18e5f3": "Le réseau distribué pour les données scientifiques",
    "index.md.d6eb348ba87573860492409bf2a61d53": "Partagez et récoltez des données scientifiques sur un réseau ouvert de pair à pair, tout en favorisant la transparence et la souveraineté des données.",
    "index.md.661daf84ba05fea0d86427a2df23e418": "/images/logo.svg",
    "index.md.49ae48c3351f586a75dcd375e3c2aadd": "Lire le guide",
    "index.md.7f229e35e43408bc9f6a4d85c97ee1d0": "Essayer l'appli",
    "index.md.52f1d9be8939b29656e6f0353797a45a": "https://réseau-constellation.ca/?lg=fr",
    "index.md.d1be377656960ed04f1564da21d80c8d": "Installer",
    "index.md.9de574a119337953878d4b7bdc6191ac": "https://réseau-constellation.ca/téléchargements/?lg=fr",
    "index.md.818e103284097e5ac887f2b822903113": "Voir sur GitHub",
    "index.md.9c0277c727b93d8b0fb16fe93f64c899": "https://github.com/reseau-constellation/",
    "index.md.9940780d5eb299a657be58f918e476a1": "🤝🏽",
    "index.md.72d402ca99bce5a2cf3b89685f133a9c": "Partage de données",
    "index.md.cec0cd69bc234d8d16f4187e2144cbd7": "En savoir plus",
    "index.md.9be681318b5facddc1b3be1ee1c350ad": "Partagez des données scientifiques existantes sur le réseau Constellation. Vous pouvez automatiser l'importation de LibreOffice, Excel ou autre.",
    "index.md.532f5456b31a756497d719513e8510d8": "🔎",
    "index.md.23171fe4fd6ef39d7a0b5e888493cf86": "Science citoyenne",
    "index.md.4aec692a39647e49b32f96d3f2f7e8fb": "Démarrer votre projet",
    "index.md.506c10c754dea15d75e90c93b7395442": "Lancez un projet de science citoyenne distribué et sans serveur central. Les données demeureront sur les dispositifs de vos utilisatrices et utilisateurs.",
    "index.md.8645371325c77b5cbe8dfa592bf9620c": "Transparence et souveraineté",
    "index.md.ea08e8701c63df6639d7d9b53a9bcf5a": "🪟",
    "index.md.159558ecad8b2deea55e46d9ea61a426": "Constellation intègre des contrôles de qualité des données, tout en gardant une structure distribuée qui protège la souveraineté et l'accès aux données à long terme.",
    "index.md.604705e5b4135be85a4ec9875544660d": "En ligne ou locale",
    "index.md.d2fe2a8d5ef9b3e1dcb2962b1f674b02": "🧑🏿‍💻",
    "index.md.aac6c53700c304e0b734f766296598b9": "Démarrer maintenant",
    "index.md.b36372c697a7c67f907e56e66a039e4a": "Constellation peut être utilisé en tant qu'appli en ligne ou bien en tant que logiciel installable sur votre ordinateur.",
    "ipa/automatisations.md.57179211c41c3b53fcde10a442a77d58": "Automatisations",
    "ipa/automatisations.md.d4bb33d0fb2b8c486f42532119eebceb": "Les automatisations vous permettent d'importer ou d'exporter des données de Constellation de manière indépendante soit selon un horaire prédéterminé, soit chaque fois que Constellation détecte des changements aux données.",
    "ipa/automatisations.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/automatisations.md.47055af394838ac7c6bfc89e6c66ed3b": "Fonctions",
    "ipa/automatisations.md.68b5c23d3b79963b1c0b017a17dc2d49": "Vous pouvez automatiser l'importation ou l'exportation de [tableaux](./tableaux.md). Les [bases de données](./bds.md), les [projets](./projets.md) et les [nuées](./nuées.md) ne peuvent être qu'exportées.",
    "ipa/automatisations.md.27528bb80d31f3a361b3fb73f5c1c71b": ":::tip ASTUCE\nLes importations peuvent provenir de fichiers locaux ou bien d'URLs et fonctionnent dans le navigateur aussi bien que dans le version installée de Constellation. Cependant, il n'est poas possible d'importer automatiquement d'un fichier local dans le navigateur (vous devrez l'importer manuellement, car les navigateurs ne peuvent pas accéder vos fichiers locaux).",
    "ipa/automatisations.md.dbdda65dce1f05ebbab9e534bf9d92df": "Les URLs ne peuvent être importés qu'à des fréquences fixes, car il est impossible de savoir si les données disponibles sur un URL externe ont été modifiées sans aller les rechercher à nouveau.\n:::",
    "ipa/automatisations.md.2a68a2494c4d86b80c81ccf7f6447e3c": "Opération",
    "ipa/automatisations.md.f5304253b861bff43446818707924371": "Node.js/Électron",
    "ipa/automatisations.md.720d64f6868f86dd2bc53ae4dde28d81": "Navigateur",
    "ipa/automatisations.md.fece4c1e2c75a0e49f7be0a2a1d02482": "Fréquence temporelle",
    "ipa/automatisations.md.50840c812776a05d591fe621c3dc4e3d": "Selon modifications",
    "ipa/automatisations.md.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "ipa/automatisations.md.cbdf99436836fee4fcd8aa74a49ef09f": "Projets",
    "ipa/automatisations.md.6c3f56c4e8ed792c25d2aa6c9ba2e017": "Bds",
    "ipa/automatisations.md.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "ipa/automatisations.md.b5143603900f02465975aa800ce0cec7": "Importer d'URL",
    "ipa/automatisations.md.fa3bf6e4f7d17c9beb330c0d59fcffad": "✅",
    "ipa/automatisations.md.9f7cc089afd4067764f9649e7cc6d108": "❌",
    "ipa/automatisations.md.83491eebcc70a5c8509ad9791c9452bc": "Importer de fichier local",
    "ipa/automatisations.md.d353b8720fcbebe4385ef7a23a43aa22": "Exporter",
    "ipa/automatisations.md.b89c537ca5482c1f6426d0c03546404f": "`client.automatisations.ajouterAutomatisationExporter({ ... })`",
    "ipa/automatisations.md.b55a75699f2bf724f9da0f813533140a": "Cette fonction automatise une exportation.",
    "ipa/automatisations.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/automatisations.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/automatisations.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/automatisations.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/automatisations.md.d2c23d1b4feeec456d72cdc94cc44595": "`id`",
    "ipa/automatisations.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/automatisations.md.09c687a2c001ecce1d9967dcd27b355d": "L'identifiant de l'objet à exporter.",
    "ipa/automatisations.md.bc745bdb03a3abad197e21f8a7bce590": "`typeObjet`",
    "ipa/automatisations.md.7992bf3caabd55a18bd7e0c675ff5544": "`\"nuée\" | \"projet\" | \"bd\" | \"tableau\"`",
    "ipa/automatisations.md.8fe3183b309ba71449f40d0af7f9d482": "Le type d'objet à exporter.",
    "ipa/automatisations.md.39b94b50583e407ebc8893cba9caaf3d": "`formatDoc`",
    "ipa/automatisations.md.e839b37aa1ff46af88e5615aaaac0454": "`xlsx.BookType | \"xls\"`",
    "ipa/automatisations.md.37d947fa8d87b1dddac9e4027816cdde": "Le format du fichier (",
    "ipa/automatisations.md.2d37f5ba6f77f0e9d6ccb4334633f95c": "`odt`",
    "ipa/automatisations.md.fc763cb31e9938f37737394681228f83": ", ",
    "ipa/automatisations.md.f67ac658cb3b4049ce505e96d7f20297": "`xlsx`",
    "ipa/automatisations.md.40a420a4cd4e001b8a23c84cdba5423f": "`csv`",
    "ipa/automatisations.md.392df60c6dbc9bbdf349711e42581555": "`txt`",
    "ipa/automatisations.md.ba3e54db702572ff33d9492a6c76bc63": " ou n'importe quel autre type supporté par ",
    "ipa/automatisations.md.ecf85ef8aca3b0de1c5e3d897537d0eb": "SheetJS",
    "ipa/automatisations.md.b1f8842af5145c24307c057e5cdba98a": "https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats",
    "ipa/automatisations.md.5058f1af8388633f609cadb75a75dc9d": ".",
    "ipa/automatisations.md.a6563de476692446ca58dd65e53af9d7": "`inclureFichiersSFIP`",
    "ipa/automatisations.md.f0d0c937b986116f4c6a920937f6eeb9": "`boolean`",
    "ipa/automatisations.md.3141765df9210ebd943ad58350c5cea1": "Si nous voulons sauvegarder les fichiers (images, vidéos ou autres) incluses dans les données.",
    "ipa/automatisations.md.659277071084d035dee858dcb683f262": "`dossier`",
    "ipa/automatisations.md.17153153d0625642e1d0e17f3fd71447": "`string | undefined`",
    "ipa/automatisations.md.8c66a9ca0246a15d14b6a66a93f96765": "Le dossier (optionnel) où sauvegarder les données. Si non spécifié, les données seront sauvegardées sous un dossié nommé ",
    "ipa/automatisations.md.0c575bd3f74b9d106ed5295dc0938c45": "`constellation`",
    "ipa/automatisations.md.c367293251b9dc85c3717b3636e2e8f0": "`langues`",
    "ipa/automatisations.md.33d75c5b6a7ab941e46a72f4ab4c83ed": "`string[] | undefined`",
    "ipa/automatisations.md.bf459fd82d02f8f79382424d7b0bc1b0": "Si vous voulez que les colonnes et les tableaux portent leurs noms respectifs au lieu de leurs identifiants uniques, la liste de langues (en ordre de préférence) dans laquelle vous souhaitez recevoir les données. Une liste vide utilisera, sans préférence, n'importe quelle langue parmi celles disponibles.",
    "ipa/automatisations.md.becc1f182b8bd26b8e85aa33d1758202": "`fréquence`",
    "ipa/automatisations.md.83089c7ad48e4da0f776d2a07aeaf111": "#types-frequence",
    "ipa/automatisations.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/automatisations.md.c73e1c709e18a8450c9c640e7a2459d0": "`| undefined`",
    "ipa/automatisations.md.8ce3aa5633ad34152447d1ffccf7b3a9": "La fréquence à laquelle les données devraient être exportées. Si non spécifiée, les données seront exportées chaque fois que Constellation y détecte des changements.",
    "ipa/automatisations.md.7195666684f4330c91964583374c8a1a": "`dispositifs`",
    "ipa/automatisations.md.0c0b6c8bd2273e2f8cd3523f07a2196d": "`string[] | undefined`",
    "ipa/automatisations.md.d12d46923ec2c8bf762cb39e1fa855af": "Les identifiants des dispositifs sur lesquels les données devraient être exportés. Si non spécifié, utilisera le dispositif présent. ",
    "ipa/automatisations.md.3528991ac91c2ef487d95a900792439e": "**Pas compatible avec `dossier`.**",
    "ipa/automatisations.md.fd258db86517a3a6d1a82e8047bc7f2a": "`nRésultatsDésirésNuée`",
    "ipa/automatisations.md.22ddf43618193fb1026ef54089a3403f": "`number | undefined`",
    "ipa/automatisations.md.cd227b6a65539b775a0467a6db601029": "**Uniquement pour les nuées:**",
    "ipa/automatisations.md.1a43731f8053b905ee737cb303bebf39": " combien d'entrées de données nous devrions rechercher du réseau (il peut être grand !)",
    "ipa/automatisations.md.fb522d749dca9a77f5e8e113f9af390b": "`copie`",
    "ipa/automatisations.md.ac59f0d417e8c89dae7e8f3d73c52439": "`copiesExportation`",
    "ipa/automatisations.md.76de75c0f81334d7eb76dd0cd8a35440": "#types-copies",
    "ipa/automatisations.md.21d5e01aa633b3094f444b1e19fcb3ce": "Le nombre de copies maximales des données en sauvegarde, ou bien la quantité de temps que les sauvegardes doivent être gardées. Si non spécifiée, chaque exportation plus récente remplacera la dernière exportation.",
    "ipa/automatisations.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/automatisations.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/automatisations.md.8b80e8ccd84c4260df31d74fd0bf8cda": "L'identifiant unique de l'automatisation.",
    "ipa/automatisations.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/automatisations.md.9af2bf651f7f85c3c1fb6a27d18d98e9": "```ts\nimport { générerClient, type types, type automatisations as autos } from \"@constl/ipa\";\nimport { ref } from \"vue\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idAuto = await client.automatisations.ajouterAutomatisationExporter({\n  id: idBd,\n  typeObjet: \"bd\",\n  formatDoc: \"ods\",  // Ou bien xlsx, txt, csv...\n  langues: [\"fr\", \"de\"],  // En français ou bien en alemand SVP\n  \n  // Exporter une fois par semaine\n  fréquence: temps: {\n    unités: \"semaines\",\n    n: 1\n  },\n  \n  // Garder les données exportées pour 2 mois\n  copie: {\n    type: \"temps\",\n    temps: {\n      unités: \"mois\",\n      n: 2\n    }\n  }\n})\n\n// ...ajouter données...\n```",
    "ipa/automatisations.md.88d344f25b2bb3d53ad38d8739719d79": "`client.automatisations.ajouterAutomatisationImporter({ ... })`",
    "ipa/automatisations.md.d098a5c63f4631f0e8082e765ca269df": "Cette fonction automatise l'importation de données.",
    "ipa/automatisations.md.e8d5298dcd65a16b5613dbb681452969": "`idTableau`",
    "ipa/automatisations.md.e48f3bc36a1dc8d7986877fc1a8fd2ce": "`source`",
    "ipa/automatisations.md.86dc657db2fe6ba3940c9e313f50b6e9": "`SourceDonnéesImportation`",
    "ipa/automatisations.md.612568d1e82e396f48a0cc513a550523": "#types-sources",
    "ipa/automatisations.md.17ccbbe205fee451ef114d0becff6da8": "La source des données.",
    "ipa/automatisations.md.b6c5200577a509cfd9ff1a74136bd867": "La fréquence à laquelle les données devraient être importées. Si non spécifiée, les données seront importées chaque fois que Constellation détecte des changements au fichier source. ",
    "ipa/automatisations.md.dc9f9bef651e351424eb5903b6921f91": "**Obligatoire si la source des données est un URL.**",
    "ipa/automatisations.md.a7c4f8c0156adf124aad0f3fda8816d8": "`dispositif`",
    "ipa/automatisations.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/automatisations.md.a009f8df383224cd7569ef6cd411c0fc": "L'identifiant du dispositif qui importera les données. Si non spécifié, utilisera le dispositif présent.",
    "ipa/automatisations.md.d79f21b6e2580c5bf9d06af9738271a9": "```ts\nimport { générerClient, type types } from \"@constl/ipa\";\nimport { ref } from \"vue\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nconst idVariablePluie = await client.variables.créerVariable({ catégorie: \"numérique\" });\nconst idVariableDate = await client.variables.créerVariable({ catégorie: \"horodatage\" });\n\nconst idColonnePluie = await client.tableaux.ajouterColonneTableau({ \n  idTableau, \n  idVariable: idVariablePluie \n});\nconst idColonneDate = await client.tableaux.ajouterColonneTableau({ \n  idTableau, \n  idVariable: idVariableDate \n});\n\nconst source: SourceDonnéesImportationFichier<infoImporterFeuilleCalcul> = {\n  typeSource: \"fichier\",\n  adresseFichier: \"mon/fichier/local.xlsx\",\n  info: {\n    nomTableau: \"tableau\",  // Le nom de l'onglet avec les données dans le document Excel/LibreOffice\n    formatDonnées: \"feuilleCalcul\",\n    cols: {\n      [idColonnePluie]: \"précipitation\",  // \"précipitation\" étant le nom de la colonne dans Excel/LibreOffice\n      [idColonneData]: \"date\",\n    },\n  },\n};\nconst idAuto = await client.automatisations.ajouterAutomatisationImporter({\n  idTableau,\n  source,\n  fréquence: {\n    unités: \"jours\",\n    n: 2\n  }  // Importer tous les 2 jours\n});\n\n```",
    "ipa/automatisations.md.aeb013e5ae05960cdf834448d1f8c207": "`client.automatisations.suivreAutomatisations({ f, idCompte })`",
    "ipa/automatisations.md.11f0ee5d5b607837b3f3b06b911b217a": "Cette fonction vous permet de suivre les automatisations spécifiées sur votre compte.",
    "ipa/automatisations.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/automatisations.md.cfdd5c35fdef214feebf7a3d8ec2c8fd": "`(automatisations: `",
    "ipa/automatisations.md.3217d4b7221c1bbebdedea39b2d02959": "`SpécificationAutomatisation`",
    "ipa/automatisations.md.c2feba20b99fd1d901000cd17442effc": "#types-specification",
    "ipa/automatisations.md.34a09f3445d1a48c2987df6f75ed15e4": "`[]) => void`",
    "ipa/automatisations.md.5647419e4120a3a7df4555528659a1d3": "Une fonction qui sera appelée avec la liste des automatisations associées à ce compte chaque fois que celle-ci change.",
    "ipa/automatisations.md.43204cdd0804bcf6344dab24da6e495a": "`idCompte`",
    "ipa/automatisations.md.ca6610af9ac8dca0d07549382a144f31": "L'identifiant du compte d'intérêt. Si non spécifié, utilisera le compte présent.",
    "ipa/automatisations.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/automatisations.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/automatisations.md.1c6c1b456c130d5305a8a6c4d5c5fdae": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type automatisations } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst autos = ref<automatisations.SpécificationAutomatisation[]>();\nconst fOublier = await client.automatisations.suivreAutomatisations({\n  f: x => autos.value = x,\n});\n```",
    "ipa/automatisations.md.a8750bdc9189052fee4d17195ce2dbcd": "`client.automatisations.suivreÉtatAutomatisations({ f })`",
    "ipa/automatisations.md.7082115c3fb9a5a69fe9313a72989659": "Cette fonction vous permet de suivre l'état des automatisations (en attente, en cours, erronnées) sur votre dispositif.",
    "ipa/automatisations.md.e3d489007ec76623be056cd1ac60fa3d": "`(états: { [id: string]: `",
    "ipa/automatisations.md.9d9ef1e6dc4091df48a41b42f3fabca0": "`ÉtatAutomatisation`",
    "ipa/automatisations.md.ccc919712ddd7bcc25a042d042c252df": "#types-statut",
    "ipa/automatisations.md.031f262e65180ef59187ad05d6ad097d": "` }) => void`",
    "ipa/automatisations.md.c3029c303f979803405ee902d0fd8549": "Une fonction qui sera appelée avec le statut des automatisations associées à votre compte chaque fois que l'un de ces statuts change.",
    "ipa/automatisations.md.32943b18ccf65d3e5f5d44e3c8639d2b": "Statuts possibles",
    "ipa/automatisations.md.76b0ec78adb17b4a0ce05f4a9cce5ba2": "Note: les heures ci-dessous sont exprimées en horodatages JavaScript (utiliser `new Date(heure)` pour obtenir un format plus lisible).\n",
    "ipa/automatisations.md.87a831bc99060c55b50dbe91c6aab6e9": "Statut",
    "ipa/automatisations.md.9a36d33843444efd1b5695dfefa6df6d": "Explication",
    "ipa/automatisations.md.b902d9bb7d60ebe38f1541c6efc0dd41": "`erreur`",
    "ipa/automatisations.md.357fd989d2bfea733cb0de3b6036e354": "L'automatisation a eu une erreur. Nous allons réessayer à l'heure ",
    "ipa/automatisations.md.6f048bf8c38a2eeb8b6bdc56a0f7e08f": "`prochaineProgramméeÀ`",
    "ipa/automatisations.md.72f0d23dca119cab155c28f1af3eea8c": "`écoute`",
    "ipa/automatisations.md.604a661f881f0e3665696c9269ec1e31": "Tout est beau ; l'automatisation est active et attend des changements aux données.",
    "ipa/automatisations.md.a4f108c6758a9ce630e9738c6a3d639c": "`sync`",
    "ipa/automatisations.md.2a3eef44cb90a941db0f5edd33b7f047": "L'automatisation est présentement en train de syncroniser les données (exporter ou importer, selon le cas), depuis l'heure ",
    "ipa/automatisations.md.690302e4fa55cb02de2741908800a087": "`depuis`",
    "ipa/automatisations.md.38a43d1f27df61b7da0ed0e52f1f4fcb": "`programmée`",
    "ipa/automatisations.md.ab773b9fcecd2c5be05ffe349c7ebe6c": "L'automatisation est programmée à l'heure ",
    "ipa/automatisations.md.42b7dba5cec5d32798c6302e93e787eb": "`à`",
    "ipa/automatisations.md.539cd633c32b7311191334d215294144": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type automatisations } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst états = ref<{ [id: string]: automatisations.ÉtatAutomatisation}>();\nconst fOublier = await client.automatisations.suivreÉtatAutomatisations({\n  f: x => états.value = x,\n});\n```",
    "ipa/automatisations.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/automatisations.md.4f2c1168a0c642ca815d15c8939b2346": "Plusieurs types sont associés avec les automatisations Constellation.",
    "ipa/automatisations.md.4032dd036433d63bb000fbe6ab502fc4": "Types spécification",
    "ipa/automatisations.md.38350eb040d2b70247086497fc6f1c8c": "```ts\ntype SpécificationAutomatisation =\n  | SpécificationExporter\n  | SpécificationImporter;\n\n\ntype BaseSpécificationAutomatisation = {\n  fréquence?: fréquence;\n  type: \"importation\" | \"exportation\";\n  id: string;\n};\n\ntype SpécificationExporter = BaseSpécificationAutomatisation & {\n  type: \"exportation\";\n  idObjet: string;\n  typeObjet: \"nuée\" | \"projet\" | \"bd\" | \"tableau\";\n  formatDoc: XLSX.BookType | \"xls\";\n  dossier?: string;\n  langues?: string[];\n  dispositifs: string[];\n  inclureFichiersSFIP: boolean;\n  nRésultatsDésirésNuée?: number;\n  copies?: copiesExportation;\n};\n\ntype infoImporter = infoImporterJSON | infoImporterFeuilleCalcul;\n\ntype infoImporterJSON = {\n  formatDonnées: \"json\";\n  clefsRacine: clefsExtraction;\n  clefsÉléments: clefsExtraction;\n  cols: { [key: string]: clefsExtraction };\n};\n\ntype infoImporterFeuilleCalcul = {\n  formatDonnées: \"feuilleCalcul\";\n  nomTableau: string;\n  cols: { [key: string]: string };\n  optionsXLSX?: xlsx.XLSXParsingOptions;\n};\n\n```",
    "ipa/automatisations.md.8150afe5ec84ffa3069f91221364852c": "Types fréquence",
    "ipa/automatisations.md.68a7758052c0cd8f576bb3ddd3b87c09": "```ts\n\ntype fréquence = {\n  unités:\n    | \"années\"\n    | \"mois\"\n    | \"semaines\"\n    | \"jours\"\n    | \"heures\"\n    | \"minutes\"\n    | \"secondes\"\n    | \"millisecondes\";\n  n: number;\n};\n\n```",
    "ipa/automatisations.md.b09ae4c255bfb92c950775d0369d81f0": "Types sources",
    "ipa/automatisations.md.62de5a2c168e9c1dfdbccb76fc314b80": "Ces types correspondent aux sources des données à importer.",
    "ipa/automatisations.md.a86e3d1893da4f7c56bcd1f1cd6f7c96": "```ts\ntype infoImporter = infoImporterJSON | infoImporterFeuilleCalcul;\ntype infoImporterFeuilleCalcul = {\n  formatDonnées: \"feuilleCalcul\";\n  nomTableau: string;\n  cols: { [key: string]: string };\n  optionsXLSX?: xlsx.XLSXParsingOptions;\n};\n\ntype infoImporterJSON = {\n  formatDonnées: \"json\";\n  clefsRacine: clefsExtraction;\n  clefsÉléments: clefsExtraction;\n  cols: { [key: string]: clefsExtraction };\n};\ntype clefsExtraction = (string | number | -1)[];\n\ntype SourceDonnéesImportation =\n  | SourceDonnéesImportationURL\n  | SourceDonnéesImportationFichier;\n\ntype SourceDonnéesImportationURL = {\n  typeSource: \"url\";\n  url: string;\n  info: infoImporter;\n};\n\ntype SourceDonnéesImportationFichier = {\n  typeSource: \"fichier\";\n  adresseFichier: string;\n  info: infoImporter;\n};\n\n```",
    "ipa/automatisations.md.0fc1871861dd7cecd1d19e44c2eb0b9d": "Types copies",
    "ipa/automatisations.md.599c11028e4d17a9aef54bfbe2f036a9": "```ts\ntype copiesExportation = copiesExportationN | copiesExportationTemps;\n\ntype copiesExportationN = {\n  type: \"n\",\n  n: number,\n}\n\ntype copiesExportationTemps = {\n  type: \"temps\",\n  temps: fréquence,\n}\n```",
    "ipa/automatisations.md.ce9b0e4db52bc88358e7e9288f485bc2": "Types statut",
    "ipa/automatisations.md.d359774c2c3371f90036aad6fd62dc4c": "```ts\ntype ÉtatAutomatisation =\n  | ÉtatErreur\n  | ÉtatÉcoute\n  | ÉtatEnSync\n  | ÉtatProgrammée;\n\ninterface ÉtatErreur {\n  type: \"erreur\";\n  erreur: string;\n  prochaineProgramméeÀ?: number;\n}\n\ninterface ÉtatÉcoute {\n  type: \"écoute\";\n}\n\ninterface ÉtatEnSync {\n  type: \"sync\";\n  depuis: number;\n}\n\ninterface ÉtatProgrammée {\n  type: \"programmée\";\n  à: number;\n}\n```",
    "ipa/bds.md.059c8595193d0680e728c17de17b3169": "Bases de données",
    "ipa/bds.md.91ce5eb3ad7bf12234fd67b5d1a6b8dc": "Les bases de données Constellation sont comme des feuilles de calcul Excel ou LibreOffice Calc, avec des tableaux et des colonnes. En plus, elles se mettent automatiquement à jour sur tous vos dispositifs. C'est comme les feuilles de calcul Google Sheets, mais sans le Google.",
    "ipa/bds.md.12b80edbd88cde6c01f65e6487a3751d": "Elles peuvent également contenir des types de données nos supportés par Excel et compagnie, tels les images, les fichiers audios et autres.",
    "ipa/bds.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/bds.md.cbf5d231135412fb14429e086c09a722": "Général",
    "ipa/bds.md.817b9c83d8c47b06e17c1a48293ad0a1": "Actions générales pour gérer vos bases de données.",
    "ipa/bds.md.7e8b53bb3ad3df07b8b3c621c7a6f884": "`client.bds.suivreBds({ f })`",
    "ipa/bds.md.aaffd842e1c29a1c6b7d2022d3cdd91a": "Recherche les bases de données appartenant au compte présent. Pour rechercher des bases de données d'autres utilisateurs sur le réseau Constellation, voir la section [réseau](./réseau.md).",
    "ipa/bds.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/bds.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/bds.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/bds.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/bds.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/bds.md.ec0ac24ebdfca2f135a035a5f998c865": "`(bds: string[]) => void`",
    "ipa/bds.md.1a10ccd1347b45f62932e48b0acf4044": "Cette fonction sera appelée avec la liste des identifiants des bases de données chaque fois que celle-ci est modifiée.",
    "ipa/bds.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/bds.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/bds.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/bds.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/bds.md.39eba9e48eeca859c542ff12dc709bcd": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst bds = ref<string[]>();\nawait client.bds.suivreBds({ f: x => bds.value = x });\n\n```",
    "ipa/bds.md.9e1c9c51dc850a3421634658cf37e14f": "`client.bds.créerBd({ licence, licenceContenu })`",
    "ipa/bds.md.0956bd89a5c12bb89d4bd718d90b8b7b": "Crée une nouvelle base de données.",
    "ipa/bds.md.7bc5ef99b276b3a049d9347cf76609ab": "`licence`",
    "ipa/bds.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/bds.md.806cd02055091fd8f5c3db2558524dea": "Le nom de la licence sous laquelle vous voulez partager ces données.",
    "ipa/bds.md.0ad719f6e29810ab1cad7e1640f7d5a9": "`licenceContenu`",
    "ipa/bds.md.70f7dbb4164faf13fd9d3aecf91223ab": "Vous pouvez aussi spécifier une licence différente pour les documents (images, vidéos ou autres fichiers) présents dans la base de données. Si non spécifié, cela laisse supposer que le contenu est également partagé sous les termes de ",
    "ipa/bds.md.5058f1af8388633f609cadb75a75dc9d": ".",
    "ipa/bds.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/bds.md.898158cc0ecf9fa0cd7ccc7aa23bcab4": "L'identifiant de la nouvelle base de données.",
    "ipa/bds.md.c3bc25ab93cd6fe61365574672987d16": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ \n    licence: \"ODbl-1_0\", \n    licenceContenu: \"CC-BY-SA-4_0\"\n});\n\n```",
    "ipa/bds.md.12e6f3e8902e95346b880cf5ecbeaeff": "`client.bds.copierBd({ idBd, copierDonnées })`",
    "ipa/bds.md.874b28e4d2b41c22d1718e5514fdd409": "Crée une copie d'une base de données.",
    "ipa/bds.md.a8dd721bfdcfe47a74f607a6003feefe": "`idBd`",
    "ipa/bds.md.91e6a0112261cfb75f64ca5caf4e032f": "L'identifiant de la base de données à copier.",
    "ipa/bds.md.17f68c4ea801574028beec83180ad85a": "`copierDonnées`",
    "ipa/bds.md.5d83b385ea9fcbf16e7f0cf3831be79c": "`boolean | undefined`",
    "ipa/bds.md.e5f6d9ae683a18454b0e7760f585f825": "Si on copie aussi les données de la base de données (ou bien juste sa structure). Vrai par défaut.",
    "ipa/bds.md.4aa7c4e931a6005d36de86231f56bd24": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idCopie = await client.bds.copierBd({ idBd });\n\n```",
    "ipa/bds.md.c6502ee32d8cc1453418146d65a6acdf": "`client.bds.créerBdDeSchéma({ schéma })`",
    "ipa/bds.md.be91c4d72b25b350250954eb9d150ece": "Crée une base de données à partir d'une spécification de schéma.",
    "ipa/bds.md.fafd89f96d2e9cc4af78ef4b7d31b405": "`schéma`",
    "ipa/bds.md.ce053386da0b9e1c79eeac5b17115759": "`schémaSpécificationBd`",
    "ipa/bds.md.222717d438b35cc053ab6b6276ef51ed": "#schema-bd",
    "ipa/bds.md.94d8615860708589c9f4046676e6eeaf": "Le schéma à utiliser.",
    "ipa/bds.md.1dff03e558cea51fed03a00208c361ab": "```ts\nimport { générerClient, type bds } from \"@constl/ipa\";\nconst client = générerClient({});\n\n// Créer nos variables\nconst idVarSite = await client.variables.créerVariable({ \n    catégorie: 'chaîneNonTraductible'\n});\nconst idVarDate = await client.variables.créerVariable({ \n    catégorie: 'horoDatage'\n});\nconst idVarImage = await client.variables.créerVariable({ \n    catégorie: 'image'\n});\n\n// Créer le schéma\nconst schéma: bds.schémaSpécificationBd = {\n    licence: \"ODbl-1_0\",\n    tableaux: [\n        {\n            cols: [\n                {\n                    idVariable: idVarSite,\n                    idColonne: \"site\",\n                    index: true,\n                },\n                {\n                    idVariable: idVarDate,\n                    idColonne: \"date\",\n                    index: true,\n                },\n                {\n                    idVariable: idVarImage,\n                    idColonne: \"image\",\n                },\n            ],\n            clef: \"tableau observations\",\n        },\n    ],\n};\n\nconst idBd = await client.bds.créerBdDeSchéma({ schéma });\n\n```",
    "ipa/bds.md.5a2bd9297afb8a33a42d1f36740ebcee": "`client.bds.inviterAuteur({ idBd, idCompteAuteur, rôle })`",
    "ipa/bds.md.125fae6675fbfa551f7ff989acd911ec": "Inviter une autre utilisatrice à modifier une base de données vous appartenant. Attention ! Une fois invitée, une personne ne peut pas être désinvitée.",
    "ipa/bds.md.75ba48969f11121358f7d477b4023457": "L'identifiant de la base de données.",
    "ipa/bds.md.5f523e9c641763878a7c1d58f7ff551a": "`idCompteAuteur`",
    "ipa/bds.md.0b22551d38821b87dd5f2d8afb54bf99": "L'identifiant du compte de la personne à inviter.",
    "ipa/bds.md.0aba6bfc2bc9746b9de9cf27f5bf563b": "`rôle`",
    "ipa/bds.md.1b759b5f078d84d684dae5a31e658568": "`\"MODÉRATEUR\"",
    "ipa/bds.md.fc07da5e3e15db4bea9077d0c20d9797": "\"MEMBRE\"`",
    "ipa/bds.md.06ce77eb56284bc8184f35259607ef58": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.inviterAuteur({ \n    idBd, \n    idCompteAuteur: \"idDuCompteDeMonAmieÀQuiJeFaisTrèsConfiance\",\n    rôle: \"MODÉRATEUR\" \n});\n\n```",
    "ipa/bds.md.54f90211d6ead586facda34d8ac6ae82": "`client.bds.effacerBd({ idBd })`",
    "ipa/bds.md.81b68d9fa618c0ccf3783d4a019dfd75": "Effacer une base de données. Étant donné la structure distribuée de Constellation, cette action effacera la base de données de votre dispositif, mais ne pourra pas forcer les autres membres du réseau à l'effacer également.",
    "ipa/bds.md.5ae0b835de0625d599f9166abd658130": "L'identifiant de la base de données à effacer.",
    "ipa/bds.md.81b7554adcaeceaa26307bec9f8a2529": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.effacerBd({ idBd });\n\n```",
    "ipa/bds.md.183b7fb6454843d919d1e51ad86c730e": "`client.bds.suivreQualitéBd({ idBd, f })`",
    "ipa/bds.md.e78ca5beaeb72a05647a37833b3d3590": "Suivre une mesure (subjective, de 0 à 1) de la qualité d'une base de données. 1 indique la meilleure qualité.",
    "ipa/bds.md.38a18e1f72d13f439e3ddccf7167d6cb": "`(qualité:`",
    "ipa/bds.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/bds.md.81bb8894c463197839a6059c92f98d79": "`infoScore`",
    "ipa/bds.md.b46a3c86ff858c7cf73352d371349dd4": "#score-bd",
    "ipa/bds.md.9a5bcb4926efe0675cf2dc40f5ee28e2": "`) => void`",
    "ipa/bds.md.52aed2cecd11158af7cd36cd56e486bd": "Une fonction qui sera appelée avec la qualité de la base de données chaque fois que celle-ci change.",
    "ipa/bds.md.871854244a31062009ea82555226e9ee": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type bds } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst qualité = ref<bds.infoScore>();\nconst fOublierSuivi = await client.bds.suivreQualitéBd({ \n    idBd,\n    f: x => qualité.value = x\n});\n\n```",
    "ipa/bds.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/bds.md.e9399ce7e2714242218c684208b91d8b": "Dans Constellation, chaque base de données est définie par un code identifiant et peut ensuite être nommée dans autant de langues que vous le souhaitez.",
    "ipa/bds.md.56548651ccfb50beeba4cb5e50c972a5": "`client.bds.sauvegarderNomBd({ idBd, langue, nom })`",
    "ipa/bds.md.892ee4c0a199e3210e17254f2ad48cf6": "Sauvegarde le nom de la base de données dans une langue donnée.",
    "ipa/bds.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/bds.md.fd8e6ad44d69dd2aafad74bb713a455f": "Le nom de la base de données.",
    "ipa/bds.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/bds.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/bds.md.24f9729fdadf6a480cde68713f43367a": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.sauvegarderNomBd({\n    idBd, \n    langue: \"fr\", \n    nom: \"Croissance culture de millet\" \n});\n\n```",
    "ipa/bds.md.c31e41cfda33781b3993161e9965316d": "`client.bds.sauvegarderNomsBd({ idBd, noms })`",
    "ipa/bds.md.b640f11f473993b0b71e03b4ab90b2ff": "Sauvegarde le nom de la base de données dans plusieurs langues en même temps.",
    "ipa/bds.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/bds.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/bds.md.958e1c892e8873cce16ff95adf1d77af": "Les noms de la base de données, indexés par langue.",
    "ipa/bds.md.1e2a133fb4cb5733f23173ec606b476b": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.sauvegarderNomsBd({ \n    idBd, \n    noms: { fr: \"Croissance culture de millet\", த: \"சிறுதானிய பயிர் வளர்ச்சி\"}\n});\n\n```",
    "ipa/bds.md.7e80df30b3984a61f5efdc42acb90683": "`client.bds.effacerNomBd({ idBd, langue })`",
    "ipa/bds.md.6a96a0e4db43657f025a650efef86c23": "Efface la traduction du nom de la base de données dans une langue donnée.",
    "ipa/bds.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/bds.md.b6fdb58f31f927a2d4e8afb648d9d306": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.effacerNomBd({ idBd, langue: \"fr\" });\n```",
    "ipa/bds.md.e65f98f2b8bb9ac75c71317780fd691b": "`client.bds.suivreNomsBd({ idBd, f })`",
    "ipa/bds.md.5865f5ccca1be4c1b1a203344e204115": "Suit les noms (traduits en différentes langues) de la base de données.",
    "ipa/bds.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/bds.md.9d4f29be0a649811d4ed98735102de82": "Une fonction qui sera appelée avec les noms de la base de données chaque fois qu'ils changent.",
    "ipa/bds.md.aca31e31cdc6f5d1b6d1b70710eaff66": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst fOublierNoms = await client.bds.suivreNomsBd({ \n    idBd,\n    f: async noms => {\n        console.log(noms);\n        await fOublierNoms();\n    }\n});\n\nawait client.bds.sauvegarderNomsBd({ \n    idBd, \n    noms: { fr: \"Hydrologie\", த: \"நீரியல்\"}\n});\n\n```",
    "ipa/bds.md.8bc84316c4078bf66723fd019616d920": "Descriptions",
    "ipa/bds.md.518d60dd4dde91a3ae0f426ed9f2d7b1": "Dans Constellation, chaque base de données peut aussi être accompagnée d'une description plus informative.",
    "ipa/bds.md.a03966d009ef2e28ea600f55fd2cb29a": "`client.bds.sauvegarderDescriptionBd({ idBd, langue, nom })`",
    "ipa/bds.md.5c523f86e861dca6c3f3d25aa870ad84": "Sauvegarde la description de la base de données dans une langue donnée.",
    "ipa/bds.md.831669deb653fd69299f4826920d7f17": "`description`",
    "ipa/bds.md.0cd5c20fae9e19aa30e45561dc3d1c93": "La description de la base de données.",
    "ipa/bds.md.5cfad0ff573229b4d10313e00a0b7268": "La langue de la description.",
    "ipa/bds.md.ab3872204cfaae8316fcb38eb7310e17": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.sauvegarderDescriptionBd({\n    idBd, \n    langue: \"fr\", \n    description: \"Données d'observation de croissance d'une culture expérimentale de millet.\" \n});\n\n```",
    "ipa/bds.md.acdbee6704604915d86b9cead831db68": "`client.bds.sauvegarderDescriptionsBd({ idBd, descriptions })`",
    "ipa/bds.md.3d473da8c32934e2f560990857922432": "Sauvegarde la description d'une base de données dans plusieurs langues en même temps.",
    "ipa/bds.md.83246462d80faadb74ad1977ac553044": "`descriptions`",
    "ipa/bds.md.9c70ab893b5fd81760637f1e22eaa8a0": "Les descriptions de la base de données, indexées par langue.",
    "ipa/bds.md.d43ec36836be7555011881b597c1307d": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.sauvegarderDescriptionsBd({ \n    idBd, \n    descriptions: { \n        fr: \"Données d'observation de croissance d'une culture expérimentale de millet.\", \n        த: \"பல்கலைக்கழக சோதனையில் ஒரு சிறுதானிய பயிரின் வளர்ச்சி தகவல்கள்.\"\n    }\n});\n\n```",
    "ipa/bds.md.04a1a5ff746d73f599323ab62f4bfe70": "`client.bds.effacerDescriptionBd({ idBd, langue })`",
    "ipa/bds.md.51b7157cb8e30a1ba76d7b0091c82847": "Efface la traduction d'une description de la base de données dans une langue donnée.",
    "ipa/bds.md.4339b0b170bd749fed35ca6254907a0b": "La langue dont ont doit effacer la description.",
    "ipa/bds.md.cfbb33645b4f6ebd6a0eea8efb2ea85c": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.effacerDescriptionBd({ idBd, langue: \"fr\" });\n```",
    "ipa/bds.md.0900b9245c2e3b971862bd9d0ccd137a": "`client.bds.suivreDescriptionsBd({ idBd, f })`",
    "ipa/bds.md.74ce4c312a53802c1e7e8d8c27435dc7": "Suit les descriptions (traduites en différentes langues) de la base de données.",
    "ipa/bds.md.551a01fe6f185fb4ea5c0cd0c9f7e841": "`(descriptions: { [langue: string]: string }) => void`",
    "ipa/bds.md.b61d40b851368a71665546ce4452c9d7": "Une fonction qui sera appelée avec les descriptions de la base de données chaque fois qu'elles changent.",
    "ipa/bds.md.7627983faf43535fdfd21cccd6ece441": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst fOublierDescriptions = await client.bds.suivreDescriptionsBd({ \n    idBd,\n    f: async descrs => {\n        console.log(descrs);\n        await fOublierDescriptions();\n    }\n});\n\nawait client.bds.sauvegarderDescriptionBd({ \n    idBd, \n    langue: \"த\",\n    description: \"பல்கலைக்கழக சோதனையில் ஒரு சிறுதானிய பயிரின் வளர்ச்சி தகவல்கள்\"\n});\n\n```",
    "ipa/bds.md.be53a0541a6d36f6ecb879fa2c584b08": "Image",
    "ipa/bds.md.4411ea0c6cd7c60d360b850208c9137c": "Les bases de données peuvent être avoir une image décorative qui apparaîtra sur l'interface.",
    "ipa/bds.md.57c6b0ad2ac64d44b2e2c9ae2a7a4445": "`client.bds.sauvegarderImage({ idBd, image })`",
    "ipa/bds.md.b1fe034bcb6346160b1a97adecf6e6ec": "Sauvegarde une image décorative.",
    "ipa/bds.md.a94480ce7c3cee3a35330c424305586e": "`image`",
    "ipa/bds.md.76705eee3297a07ed0ae3723e378f96d": "`import(\"ipfs-core-types/src/utils\").ImportCandidate`",
    "ipa/bds.md.ed7742836191169aa028cc314d3b2c60": "Le fichier de l'image.",
    "ipa/bds.md.e09cb5f09396d9523a9b28ca9958b5b6": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst image = fs.readFileSync(\"mon image locale.jpeg\");\nawait client.bds.sauvegarderImage({ idBd, image });\n\n```",
    "ipa/bds.md.2059fcdd37e42f1677aabc53e065738e": "`client.bds.effacerImage({ idBd })`",
    "ipa/bds.md.3cd52d8fdb4507130e7d5ac7ab9d11cb": "Efface l'image de la base de données.",
    "ipa/bds.md.3f94a192e9956c97db170d730558c31c": "```ts\n// ...continuant de ci-dessus...\n\nawait client.bds.effacerImage( { idBd });\n```",
    "ipa/bds.md.2b65df0a67a94623004f4e3e5d57a5d6": "`client.bds.suivreImage({ idBd, f })`",
    "ipa/bds.md.71a3cea48143dc017a14fc6a216bcdf4": "Suit l'image de la base de données.",
    "ipa/bds.md.ad993c1e79e8391d85e155840ad17742": "`(image: Uint8Array",
    "ipa/bds.md.38c02e5daa27f21971f6d045a6dbd111": "null) => void`",
    "ipa/bds.md.ba8c8ba4fd28b7da32f19aa1ea117005": "```ts\nimport { ref } from 'vue';\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst image = ref<Uint8Array | null>();\nconst fOublierImage = await client.bds.suivreImage({ \n    idBd,\n    f: x => image.value = x,\n});\n\nawait fOublierImage();\n```",
    "ipa/bds.md.21e4164bfdb63312a661b92332eedbec": "Licences",
    "ipa/bds.md.3fae7738d1691cb661b9dcf7c1a5d0f5": "Chaque base de données dans Constellation doit être associée à une licence qui explique les conditions d'utilisation des données qu'elle contient. ",
    "ipa/bds.md.5bea170bba0bb3571b85d7973aa54ac0": ":::tip ASTUCE\nVoir les [licences](./licences.md) pour accéder à la liste de licences possibles.",
    "ipa/bds.md.50537acc7ec94d668bc0c7b62b38095b": "Vous n'êtes évidemment pas limités par cette liste, et vous pouvez inclure n'importe quel nom de licence avec vos bases de données. Cependant, seulement les licences reconnues par Constellation apparaîteront avec un résumé de leurs conditions sur [l'interface graphique](https://github.com/reseau-constellation/iug) de Constellation.\n:::",
    "ipa/bds.md.cf593ca41a3009ed9218b975c94ff41f": "`client.bds.changerLicenceBd({ idBd, licence })`",
    "ipa/bds.md.2a8acffd81db85da666d87cf08707089": "Change la licence d'une base de données.",
    "ipa/bds.md.ba78d101e013d51233ad1194fd8700c5": "Le code de la nouvelle licence.",
    "ipa/bds.md.81e1bc3f1da078d82c50f0debb56d490": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nawait client.bds.changerLicenceBd({ idBd, licence: \"ODC-BY-1_0\" });\n```",
    "ipa/bds.md.7d0674723d6507c99b04cb2a1de8daae": "`client.bds.changerLicenceContenuBd({ idBd, licenceContenu })`",
    "ipa/bds.md.08f99a9052d218a8bb354e6f32f3ff98": "Change la licence des fichiers (images, vidéos ou autres) contenus dans la base de données.",
    "ipa/bds.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/bds.md.826c69e549f66ec328f4dd5dbf60222e": "Le code de la nouvelle licence pour le contenu. Si ",
    "ipa/bds.md.25ff8226df52176acc18ba77dacc683d": "`undefined`",
    "ipa/bds.md.ecc15169874567c0b76efc19548d1f11": ", la licence sera effacée et le contenu donc disponible sous la même licence que la base de données elle-même.",
    "ipa/bds.md.6d3a2534dddd7a05886a2d56fcb42974": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ \n    licence: \"ODBl-1_0\", \n    licenceContenu: \"CC-BY-SA-4_0\" \n});\nawait client.bds.changerLicenceContenuBd({ \n    idBd, \n    licenceContenu: \"CC-BY-4_0\" \n});\n```",
    "ipa/bds.md.e70749b9362eb35abc4e352bc68cb11a": "`client.bds.suivreLicenceBd({ idBd, f })`",
    "ipa/bds.md.af1a7906ca46fe77cecd2a964863d90c": "Suit la licence de la base de données.",
    "ipa/bds.md.285213242c6aef61afb4271e19fec8ec": "`(licence: string) => void`",
    "ipa/bds.md.229c1d343ed5d1ee17d890160e368af0": "Une fonction qui sera appelée avec la licence de la base de données chaque fois qu'elle change.",
    "ipa/bds.md.afa49e7b7b4855a9dd14611341e526df": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst licence = ref<string>();\n\nconst fOublierLicence = await client.bds.suivreLicenceBd({ \n    idBd,\n    f: x => licence.value = x,\n});\n\nawait client.bds.changerLicenceBd({ \n    idBd, \n    licence: \"ODC-BY-1_0\",\n});\n\n```",
    "ipa/bds.md.7e0a10e8c5a6f3d5529080173e6276fe": "`client.bds.suivreLicenceContenuBd({ idBd, f })`",
    "ipa/bds.md.89d46076c7a794c617e734c919d3d621": "Suit la licence des fichiers contenus par la base de données.",
    "ipa/bds.md.f023967103dbb7d9e0a413543d2284a5": "`(licenceContenu: string) => void`",
    "ipa/bds.md.83d6a2744522112127447204f601d610": "Une fonction qui sera appelée avec la licence des fichiers contenus par la base de données chaque fois qu'elle change.",
    "ipa/bds.md.cfc92b76c2c02e4101e334b4286114b9": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst licenceContenu = ref<string>();\n\nconst fOublierLicenceContenu = await client.bds.suivreLicenceContenuBd({ \n    idBd,\n    f: x => licenceContenu.value = x,\n});\n\nawait client.bds.changerLicenceContenuBd({ \n    idBd, \n    licence: \"CC-BY-SA-4_0\",\n});\n\n```",
    "ipa/bds.md.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "ipa/bds.md.a3eac42b2d7b41b0f69783f103654c86": "Chaque base de données Constellation peut être associé avec plusieurs [mots-clefs](./motsClefs.md).",
    "ipa/bds.md.f7f67c15acd2ee35349e567e4fa6bea1": "`client.bds.ajouterMotsClefsBd({ idBd, idsMotsClefs })`",
    "ipa/bds.md.b33823cc7bc658f78af69339a750dc48": "Ajoute des mots-clefs à la base de données.",
    "ipa/bds.md.adea957bf00f0906ea40de3763c2f11d": "`idsMotsClefs`",
    "ipa/bds.md.9bd5a48360b1f507b65154a7c327c54f": "`string | string[]`",
    "ipa/bds.md.4a1257f33f6c6b5e2d7b45aa68e837e8": "Les identifiants des mots-clefs à ajouter.",
    "ipa/bds.md.5e9c794cb50dea892dc3204e1e1734a4": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({\n    idMotClef,\n    nom: \"Hydrologie\",\n    langue: \"fr\"\n})\n\nawait client.bds.ajouterMotsClefsBd({ \n    idBd, \n    idsMotsClefs: idMotClef\n});\n```",
    "ipa/bds.md.c8c7c88fe6e02dcb5e239508f344e57c": "`client.bds.effacerMotClefBd({ idBd, idMotClef })`",
    "ipa/bds.md.33db33fd3fb7a71b2a371d17fbb0038a": "Enlève un mot-clef de la base de données.",
    "ipa/bds.md.d523bae0c6465e39b331c6733d75e69e": "`idMotClef`",
    "ipa/bds.md.fdee0cfeb255b6fae5f9195b0916e533": "L'identifiant du mot-clef à enlever.",
    "ipa/bds.md.27a0e7843c10e7b563083e4816e99f4f": "```ts\n// En continuant de ci-dessus...\n\nawait client.bds.effacerMotClefBd({ \n    idBd, \n    idMotClef\n});\n```",
    "ipa/bds.md.504867171bf65993ff4538a31a993069": "`client.bds.suivreMotsClefsBd({ idBd, f })`",
    "ipa/bds.md.c20ef3f1aedf85e534351885a118875c": "Suit les mots-clefs associés à la base de données.",
    "ipa/bds.md.9b6014625768a05b681dedfe2ec7d7eb": "`(motsClefs: string[]) => void`",
    "ipa/bds.md.c571a6a390034fae517c7385ead02d5d": "Une fonction qui sera appelée avec la liste des identifiants des mots-clefs associés à la base de données chaque fois que celle-ci change.",
    "ipa/bds.md.22bba2fcd42838aefa72f0b0d9e02443": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst motsClefs = ref<string[]>();\n\nconst fOublierMotsClefs = await client.bds.suivreMotsClefsBd({ \n    idBd,\n    f: x => motsClefs.value = x,\n});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({\n    idMotClef,\n    nom: \"Hydrologie\",\n    langue: \"fr\"\n})\n\nawait client.bds.ajouterMotsClefsBd({ \n    idBd, \n    idsMotsClefs: idMotClef\n});\n\n```",
    "ipa/bds.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/bds.md.41d9c910ece13cf196e91ff720f76304": "Les variables ne peuvent pas être ajoutées directement à une base de données, sinon aux [tableaux](./tableaux.md#colonnes) de celle-ci. Cependant, vous pouvez suivre la liste de variables associées à une base de données.",
    "ipa/bds.md.50cebb7a4d2ddb160b34c754290f048f": "`client.bds.suivreVariablesBd({ idBd, f })`",
    "ipa/bds.md.9781aafcafa54608f73da1a11b95d46a": "Suit les variables associées à la base de données.",
    "ipa/bds.md.f1cf11cb32c37e2baabd3c8b619eb429": "`(variables: string[]) => void`",
    "ipa/bds.md.b8162e1ef76dde14fe8426ab110a28ae": "Une fonction qui sera appelée avec la liste des identifiants des variables associées à la base de données chaque fois que celle-ci change.",
    "ipa/bds.md.9156abe092168fa6075d4471a48b180b": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst variables = ref<string[]>();\n\nconst fOublierVariables = await client.bds.suivreVariablesBd({ \n    idBd,\n    f: x => variables.value = x,\n});\n\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariableNumérique = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.tableaux.ajouterColonneTableau({\n    idTableau,\n    idVariable: idVariableNumérique,\n});\n\n```",
    "ipa/bds.md.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "ipa/bds.md.1792616c6c3b5f08018c5e9504d5ee6e": "Chaque base de données contient un ou plusieurs [tableaux](./tableaux.md), lesquels à leur tour contiennent vos données. C'est comme les onglets d'une feuille de calcule Excel/LibreOffice.",
    "ipa/bds.md.3411f9027b5349eda2060f01b4bb8223": ":::info\n**Pour les pros :** Chaque tableau a un identifiant (`idTableau`) unique parmi tout le réseau Constellation, de même qu'une `clef` qui, elle, peut être partagée entre différentes bases de données (mais pas dans la même base de données). Cette clef est utile pour combiner ou comparer les données de différentes bases de données suivant toutes le même schéma, car les identifiants `idTableau` des tableaux sur différentes bases de données, étant tous différents, ne peuvent pas être utiliser pour identifier les tableaux correspondants.\n:::",
    "ipa/bds.md.9d6613da660b0482c8cd67a4b6353a4e": "`client.bds.ajouterTableauBd({ idBd, clefTableau })`",
    "ipa/bds.md.4d1ff554555e6e6b825c8b60e3faf3e7": "Ajoute un nouveau tableau à la base de données.",
    "ipa/bds.md.b3d81db87428306d6b3dc712f89337d6": "`clefTableau`",
    "ipa/bds.md.3dd40087e56dc436b65d7686077c7da6": "La clef du tableau. Si non spécifiée, Constellation en générera une de manière aléatoire.",
    "ipa/bds.md.674ba7a2069b07ff603f9dd8d8801bd3": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\n\n```",
    "ipa/bds.md.386e43967e40cdaf0826c60341cdd8a3": "`client.bds.spécifierClefTableau({ idBd, idTableau, clef })`",
    "ipa/bds.md.acb0c9716a0c266582f6f2f918440b50": "Change la clef identifiant un tableau de la base de données.",
    "ipa/bds.md.e8d5298dcd65a16b5613dbb681452969": "`idTableau`",
    "ipa/bds.md.6926c7de36f1434eca48312b23cfef79": "L'identifiant du tableau.",
    "ipa/bds.md.3432878cbfb70f28eb20f7b7835a806e": "`clef`",
    "ipa/bds.md.108c282b5a2942d44026b6f0bbdbe80a": "La nouvelle clef du tableau. Celle-ci ne doit pas déjà exister sur un autre tableau de la même base de données.",
    "ipa/bds.md.ae55d68a0bc5d27a571114b16e315933": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\n\nawait client.bds.spécifierClefTableau({ \n    idBd, \n    idTableau,\n    clef: \"sites d'observation\"\n});\n```",
    "ipa/bds.md.a2abdd78dc84c40f8ab68a9b55b35b0c": "`client.bds.effacerTableauBd({ idBd, idTableau })`",
    "ipa/bds.md.846c32d9eb55bad36339c12dffea322e": "Enlève un tableau de la base de données.",
    "ipa/bds.md.be949f58a36f5759f39fcd28a4ef29ae": "L'identifiant du tableau à enlever.",
    "ipa/bds.md.ecf708cdd6a138a03e4082f0711ecff5": "```ts\n// En continuant de ci-dessus...\n\nawait client.bds.effacerTableauBd({ \n    idBd, \n    idTableau\n});\n```",
    "ipa/bds.md.7705ce6d4fe6b3d86517ebf424d5f4e0": "`client.bds.suivreTableauxBd({ idBd, f })`",
    "ipa/bds.md.d03390135422af976b7c2a763608954a": "Suit les tableaux associés à la base de données.",
    "ipa/bds.md.1a9df810e3a7d50b0138a951d4df05dd": "`(tableaux:`",
    "ipa/bds.md.3e71076bfb6f9da92010e381b3a61d2d": "`infoTableauAvecId`",
    "ipa/bds.md.f28c8f6312c82bae657c8858dcfc49eb": "#info-tableaux",
    "ipa/bds.md.d751713988987e9331980363e24189ce": "[]",
    "ipa/bds.md.0f345ef09b69089f6a174d203c42d2f7": "Une fonction qui sera appelée avec la liste des tableaux de la base de données chaque fois que celle-ci change.",
    "ipa/bds.md.e4f43beb994b2bd2fda697696fee9424": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type bds } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst tableaux = ref<bds.infoTableauAvecId[]>();\n\nconst fOublierTableaux = await client.bds.suivreTableauxBd({ \n    idBd,\n    f: x => tableaux.value = x,\n});\n\nconst idTableau = await client.tableaux.ajouterTableauBd({ idBd });\n\n```",
    "ipa/bds.md.6beae5f4ff97c574d7967ab1601e70f8": "Importation et exportation",
    "ipa/bds.md.04e21c7e2a757198819f69bc35ed532b": "Vous pouvez exporter des données Constellation vers un autre format (Excel, LibreOffice ou autre).",
    "ipa/bds.md.7e22988fb5ee49cfae0ecda320d08084": ":::tip ASTUCE\nPour ce qui est de l'importation de données, celle-ci s'effectue directement sur les [tableaux eux-mêmes](./tableaux.md#importation-et-exportation).\n:::",
    "ipa/bds.md.f79bc8352d54073401fe07e3f4a00e37": "`client.bds.exporterDonnées({ idBd, langues, nomFichier })`",
    "ipa/bds.md.86790d9f2f3ca71f5fe4152e118da7e5": "Exporte les données d'une la base de données mais ne le sauvegarde pas immédiatement au disque.",
    "ipa/bds.md.7ec046478beef4eeac7a429177adbe1a": ":::tip ASTUCE\nVous pouvez également [automatiser](./automatisations.md) ces actions !\n:::",
    "ipa/bds.md.c367293251b9dc85c3717b3636e2e8f0": "`langues`",
    "ipa/bds.md.33d75c5b6a7ab941e46a72f4ab4c83ed": "`string[] | undefined`",
    "ipa/bds.md.bf459fd82d02f8f79382424d7b0bc1b0": "Si vous voulez que les colonnes et les tableaux portent leurs noms respectifs au lieu de leurs identifiants uniques, la liste de langues (en ordre de préférence) dans laquelle vous souhaitez recevoir les données. Une liste vide utilisera, sans préférence, n'importe quelle langue parmi celles disponibles.",
    "ipa/bds.md.2e99ff4542ff31fec1f90b208355f495": "`nomFichier`",
    "ipa/bds.md.17153153d0625642e1d0e17f3fd71447": "`string | undefined`",
    "ipa/bds.md.642e794bebf56cfd7449d9db0385872f": "Le nom du fichier que vous voulez créer. Si non spécifier, Constellation utilisera le nom de la base de données si ",
    "ipa/bds.md.14083129209edef23b1f62b9e19988ec": "`langues !== undefined`",
    "ipa/bds.md.17546de84e3b372e626fb62d500b2af0": " ou, à défaut, l'identifiant unique de la base de données.",
    "ipa/bds.md.0ddb7fc27f94a2e9ca55a997d2bdef8b": "`Promise<`",
    "ipa/bds.md.e3d9e70bcc2ea18b27ba77bde0bf4980": "`donnéesBdExportées`",
    "ipa/bds.md.dc397f7ebfa851f34cc7661fdd42c095": "#donnees-exportees",
    "ipa/bds.md.54f767565a8e4eb4e6a46684f0b8eba9": "`>`",
    "ipa/bds.md.15921dc5d1b7c7d93ad1376b9e8b667b": "Les données exportées, prètes à être écrites à un fichier de votre choix.",
    "ipa/bds.md.a719de3bf8c1cf4cf94dbe08a4e26800": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\n// ... créer des tableaux et ajouter des données ...\n\nconst donnéesExportées = await client.bds.exporterDonnées({ \n    idBd, \n    langues: [\"fr\", \"த\", \"kaq\"]\n});\n\n// Faire quelque chose avec le document\n\n```",
    "ipa/bds.md.a7a3bf1aa150e2f954aabf644e7e7a6a": "`client.bds.exporterDocumentDonnées({ données, formatDoc, dossier, inclureFichiersSFIP })`",
    "ipa/bds.md.08719cd083cb5f67ece2247281921880": "Prend les données exportées par [`client.bds.exporterDonnées`](#clientbdsexporterdonnées-idbd-langues-nomfichier) et les sauvegarde sur le disque.",
    "ipa/bds.md.b012ddb71ae2b40f2d2b92df49cec86f": "`données`",
    "ipa/bds.md.517a50fae718456d7f2dbc320de4bdf2": "Les données déjà exportées.",
    "ipa/bds.md.39b94b50583e407ebc8893cba9caaf3d": "`formatDoc`",
    "ipa/bds.md.e839b37aa1ff46af88e5615aaaac0454": "`xlsx.BookType | \"xls\"`",
    "ipa/bds.md.37d947fa8d87b1dddac9e4027816cdde": "Le format du fichier (",
    "ipa/bds.md.2d37f5ba6f77f0e9d6ccb4334633f95c": "`odt`",
    "ipa/bds.md.fc763cb31e9938f37737394681228f83": ", ",
    "ipa/bds.md.f67ac658cb3b4049ce505e96d7f20297": "`xlsx`",
    "ipa/bds.md.40a420a4cd4e001b8a23c84cdba5423f": "`csv`",
    "ipa/bds.md.392df60c6dbc9bbdf349711e42581555": "`txt`",
    "ipa/bds.md.ba3e54db702572ff33d9492a6c76bc63": " ou n'importe quel autre type supporté par ",
    "ipa/bds.md.ecf85ef8aca3b0de1c5e3d897537d0eb": "SheetJS",
    "ipa/bds.md.b1f8842af5145c24307c057e5cdba98a": "https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats",
    "ipa/bds.md.659277071084d035dee858dcb683f262": "`dossier`",
    "ipa/bds.md.d978c1c3b16c4481e2ba5360326f26e5": "Le dossier (optionnel) où sauvegarder les données.",
    "ipa/bds.md.a6563de476692446ca58dd65e53af9d7": "`inclureFichiersSFIP`",
    "ipa/bds.md.f0d0c937b986116f4c6a920937f6eeb9": "`boolean`",
    "ipa/bds.md.a997b83108498087444056d7e563d676": "Si nous voulons sauvegarder les fichiers (images, vidéos ou autres) incluses dans la base de données. Si oui, le tout sera sauvegardé en tant que fichier ",
    "ipa/bds.md.29de441a98b41defb5f42d9b5eaaee40": "`zip`",
    "ipa/bds.md.8c1ea1ae38c19b44d7d64ee7683d43c9": "L'adresse du fichier créé.",
    "ipa/bds.md.14593250ced6094d6ebd6dd51305acbf": "```ts\n// ... continuant de ci-dessus ...\n\nconst adresseFichier = await client.bds.exporterDocumentDonnées({ \n    données: donnéesExportées,\n    formatDoc: \"ods\",  // ou bien \"xlsx\",\n    dossier: \"./mes données exportées\"\n});\n\n// Vous pouvez maintenant ouvrir le document `adresseFichier`.\n\n```",
    "ipa/bds.md.87a831bc99060c55b50dbe91c6aab6e9": "Statut",
    "ipa/bds.md.6675b1479adba81925675b19dfc09722": "Les bases de données peuvent être identifiées en tant qu'actives, bêta, obsolètes ou bien internes à une autre application.",
    "ipa/bds.md.eafdbe3c6686f19941448a11fad23da3": "`client.bds.changerStatutBd({ idBd, statut })`",
    "ipa/bds.md.e9a0b2949d113262e62c20605801c20e": "Change le statut de la base de données.",
    "ipa/bds.md.8dabed49b3f49427e9ebb8df06611296": "`statut`",
    "ipa/bds.md.dbe854f71ebc8ce44e61d1902c5047a6": "`schémaStatut`",
    "ipa/bds.md.fec0b98d53537e6c675aad9400bef190": "#statut-1",
    "ipa/bds.md.df476e397e45d6bda5037c8d2711ce64": "Le statut de la base de données.",
    "ipa/bds.md.eea70d8e988216c01847de8f9d740333": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nawait client.bds.changerStatutBd({ \n    idBd, \n    statut: {\n        statut: \"interne\"\n    }\n});\n```",
    "ipa/bds.md.18c1aa837bc004e6375b140877132d80": "`client.bds.marquerObsolète({ idBd, idNouvelle })`",
    "ipa/bds.md.496fb042837f6128f3968a662ffdf277": "Indique que la base de données est maintenant obsolète.",
    "ipa/bds.md.efaf6443a9502b8b3a5f3eb002201d4a": "`idNouvelle`",
    "ipa/bds.md.d3435fb5ea13c00a87a474e737b9b197": "L'identifiant (optionnel) d'une nouvelle base de données qui reprendra le rôle de la base de données obsolète.",
    "ipa/bds.md.b6871528d27e954e646d3c78829a4502": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nconst idNouvelle = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\nawait client.bds.marquerObsolète({ \n    idBd, \n    idNouvelle\n});\n```",
    "ipa/bds.md.5f73415c8f481d7fb892324b0ed81156": "`client.bds.marquerActive({ idBd })`",
    "ipa/bds.md.d69af01e94031938149d5aef0fec5bf7": "Indique que la base de données est active (pas obsolète).",
    "ipa/bds.md.ca6fc70db6ffdc7df412cef8fc83642f": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nawait client.bds.marquerActive({ idBd });\n```",
    "ipa/bds.md.69a91af168060d06ea815f2fa1540b10": "`client.bds.marquerBêta({ idBd })`",
    "ipa/bds.md.649145a3cb81ff12f6ca9de0a8050839": "Indique que la base de données est en phase d'essaie (bêta).",
    "ipa/bds.md.cdaaad8ead527337741e6cb5cdc39c14": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nawait client.bds.marquerBêta({ idBd });\n```",
    "ipa/bds.md.7a1327e261fba50729c1d09a059444c3": "`client.bds.marquerInterne({ idBd })`",
    "ipa/bds.md.68c7964d8fe61f5e8809a60f9f203794": "Indique que la base de données est une base de données interne pour une application tièrce et ne devrait probablement pas être directement visible à l'utilisateur ou bien modifiable à la main.",
    "ipa/bds.md.e440cad8ed080666e1f1880c163a4b48": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nawait client.bds.marquerInterne({ idBd });\n```",
    "ipa/bds.md.20abd7e94b8455a0d4fd96ed5d09b554": "`client.bds.suivreStatutBd({ idBd, f })`",
    "ipa/bds.md.644382337e0d1ddfbc4d842d4f41274b": "Suit le statut de la base de données.",
    "ipa/bds.md.3a40b18055830d039c6c39c3c4a7a14d": "`(statut:`",
    "ipa/bds.md.354d5fc1778ae11bb245554f5e6aca2a": "Une fonction qui sera appelée avec le statut de la base de données chaque fois que celui-ci change.",
    "ipa/bds.md.313ab3cb36283f6a7ab1ef6b74067ea0": "```ts\nimport { générerClient, type types } from \"@constl/ipa\";\nimport { ref } from \"vue\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst statut = ref<types.schémaStatut>();\nconst fOublierStatut = await client.bds.suivreStatutBd({ \n    idBd,\n    f: x => statut.value = x,\n});\n\nconst idTableau = await client.bds.marquerBêta({ idBd });\n\n```",
    "ipa/bds.md.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "ipa/bds.md.de5d5cf38b5e2073e4e3a1b0f9dcdbcd": "Une base de données peut être associée à une ou plusieurs [nuées](./nuées.md) qui permettent de regrouper des données - ayant le même format - de plusieurs utilisatrices de Constellation.",
    "ipa/bds.md.5aa095d5480947e3e8e465119129c19c": "`client.bds.rejoindreNuées({ idBd, idsNuées })`",
    "ipa/bds.md.8522b77379e4396ce8bf6d0b7a20d0df": "Associer la base de données à des nuées.",
    "ipa/bds.md.a0d4dbccafbec9d7d2e7ac4e5501ad4f": "`idsNuées`",
    "ipa/bds.md.10347b9b83fed1cb0cb3338b51b39fd3": "Les identifiants des nuées à ajouter.",
    "ipa/bds.md.217e7ea8b938a13988d09a01ea3b3a33": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\n\nconst idNuée = await client.nuées.créerNuée();\n\nawait client.bds.rejoindreNuées({ \n    idBd, \n    idsNuées: [idNuée]\n});\n```",
    "ipa/bds.md.a09f689f5c73f0179b78b8508cd77970": "`client.bds.quitterNuée({ idBd, idNuée })`",
    "ipa/bds.md.6805a72f1e1e90be18e3a1d6dd32dfe3": "Dissocie une la base de données de la nuée spécifiée.",
    "ipa/bds.md.1a4d911c2dc6208111919d9564d8dace": "`idNuée`",
    "ipa/bds.md.5c4c61e245386e0bf80671d53a0c31ce": "L'identifiant de la nuée à dissocier.",
    "ipa/bds.md.0bcf9c4762cfc523021652805d3e7209": "```ts\n// En continuant de ci-dessus...\n\nawait client.bds.quitterNuée({ \n    idBd, \n    idNuée\n});\n```",
    "ipa/bds.md.acf39de1107ba2cbfdf0e0170b133515": "`client.bds.suivreNuéesBd({ idBd, f })`",
    "ipa/bds.md.c64e4401861a3722b4781def4dae8567": "Suit les nuées associées à la base de données.",
    "ipa/bds.md.4215a3a4e078b3d2877fa0a261a4faea": "`(nuées: string[]) => void`",
    "ipa/bds.md.1c5463bccd69783ca26c71132ebc90cc": "Une fonction qui sera appelée avec la liste des identifiants des nuées associées à la base de données chaque fois que celle-ci change.",
    "ipa/bds.md.30aea9ec91f53ba719425bb2ac0635cc": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst nuées = ref<string[]>();\nconst fOublierNuées = await client.bds.suivreNuéesBd({ \n    idBd,\n    f: x => nuées.value = x,\n});\n\n```",
    "ipa/bds.md.06a6716983c482c808e447f720158b51": "suivreNuéesBd",
    "ipa/bds.md.af546e67c15461229c104f07c89a2107": "BDs uniques",
    "ipa/bds.md.2000ae86f752b19d58ca76aa954c5c99": ":::tip ASTUCE\nCette section est vraiment pour les pros. Si c'est votre première fois, passez donc à autre chose. Pas de soucis. :)\n:::",
    "ipa/bds.md.cf2ef9d6ec84d7dee8e849d1b1f0c458": "Constellation, étant distribué, vous permet de travailler hors ligne. Si vous avez plusieurs dispositifs, ceux-ci syncroniseront automatiquement vos données lorsque vous les reconnecterez.",
    "ipa/bds.md.92cb6d7f50442302c1d44f4c3ed960a5": "Cependant, une situation cause problème : que faire avec les applications tièrces qui dépendent d'une base de données spéciale pour fonctionner ? Si vous développez une application de collecte de données hydrologiques par science citoyenne, chacune de vos utilisatrices devrait avoir une seule base de données pour sauvegarder ses observations. Si elle se connecte sur son téléphone et sur son ordinateur, comment Constellation pourra-t-elle savoir que les bases de données créées de manière indépendante sur les deux dispositifs sont en réalité la même base de données et doivent être fusionnnées ?",
    "ipa/bds.md.86649299dce67409dc47f1892fca3dc2": "C'est là que servent les bases de données uniques, qui sont associées à une [nuée](./nuées.md) unique. Constellation s'assurera que chaque compte d'utilisateur n'aura qu'une seule base de données associée à cette nuée, et, si elle en détecte plus qu'une, fusionnera les données qu'elles contiennent.",
    "ipa/bds.md.4d1d41ccabdfea7f8adc7a81b7af41e1": ":::warning AVERTISSEMENT\nConstellation fusionnera automatiquement toutes les bases de données appartenant au même compte et qui sont associées à la nuée unique. **N'utilisez donc pas une nuée qui est utilisée pour d'autres projets !** Si vous voulez, vous pouvez bien évidemment associer la base de données à plusieurs nuées existantes (à spécifier dans le `schémaBd`) et utiliser une copie personnelle d'une d'entres elles pour la nuée unique (`idNuéeUnique`).\n:::",
    "ipa/bds.md.877257e8c821659f14f1f8e4301381f3": "`client.bds.suivreDonnéesDeTableauUnique({ schémaBd, idNuéeUnique, clefTableau, f })`",
    "ipa/bds.md.29bcff54ef22c874e7ac3a5e520d8ce2": "Suit les données d'un tableau d'une base de données unique.",
    "ipa/bds.md.244538f6a60292b90b45b70c8f0b0451": "`schémaBd`",
    "ipa/bds.md.9ae18f99ab2dfa0fe4784ad8be35908d": "Le schéma de spécification de la base de données. Il sera utilisé pour créer la base de données si elle n'existe pas encore.",
    "ipa/bds.md.e797f41b6a086a96d30fbb6a0282c800": "`idNuéeUnique`",
    "ipa/bds.md.4e6ceaa1142f70e83bd96a125147fb6f": "L'identifiant de la nuée à laquelle une seule base de données par compte peut appartenir. Doit exister dans ",
    "ipa/bds.md.fb0697a8e150a414148ca32df9881dc5": "La clef du tableau dont nous voulons suivre les données. Doit exister dans ",
    "ipa/bds.md.9b74c6b2fddc0917eb088a5767f3bd8d": "`(données:`",
    "ipa/bds.md.7efa417fe12389bf82e9a41c886a30c0": "`élémentDonnées`",
    "ipa/bds.md.937082e8024a3078e9c8a2d248e8b37a": "./tableaux.md#types-donnees",
    "ipa/bds.md.5655a12ef8509610b02e762c33f45b8f": "`[]) => void`",
    "ipa/bds.md.4cf00768fc160ed4af986e7268b1fa81": "La fonction qui sera appellée avec les données du tableau chaque fois que ceux-ci changent.",
    "ipa/bds.md.1672e9e29f6bb0cf82382d68f14648db": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type bds, type tableaux } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\n// Créer nos variables\nconst idVarSite = await client.variables.créerVariable({ \n    catégorie: 'chaîneNonTraductible'\n});\nconst idVarDate = await client.variables.créerVariable({ \n    catégorie: 'horoDatage'\n});\nconst idVarImage = await client.variables.créerVariable({ \n    catégorie: 'image'\n});\n\n// Créer notre nuée\nconst CLEF_TABLEAU = \"tableau observations\"; \nconst idNuéeUnique = await client.nuées.créerNuée()\nconst idTableau = await client.nuées.ajouterTableauNuée({\n    idNuée,\n    clefTableau: CLEF_TABLEAU\n});\nawait client.nuées.ajouterColonneTableauNuée({\n    idTableau,\n    idVariable: idVarSite,\n    idColonne: \"site\",\n    index: true\n});\nawait client.nuées.ajouterColonneTableauNuée({\n    idTableau,\n    idVariable: idVarDate,\n    idColonne: \"date\",\n    index: true\n});\nawait client.nuées.ajouterColonneTableauNuée({\n    idTableau,\n    idVariable: idVarImage,\n    idColonne: \"image\",\n});\n\n// Créer le schéma\nconst schémaBd = await client.nuées.générerSchémaBdNuée({\n    idNuée: idNuéeUnique,\n    licence: \"ODbl-1_0\"\n});\n\n// Enfin, suivre les données\nconst données = ref<tableaux.élémentDonnées[]>();\nconst fOublierDonnées = await client.bds.suivreDonnéesDeTableauUnique({ \n    schémaBd, \n    idNuéeUnique, \n    clefTableau: CLEF_TABLEAU,\n    f: x => données.value = x,\n });\n\n```",
    "ipa/bds.md.a652d35771bb36247fdee16d66d5ee1d": "`client.bds.ajouterÉlémentÀTableauUnique({ schémaBd, idNuéeUnique, clefTableau, vals })`",
    "ipa/bds.md.a0a1dea5d8da2d521ba23aae3b85f016": "Ajoute un élément à un tableau d'une base de données unique.",
    "ipa/bds.md.31986fada6e8cbfc6ecca27e9f7a0843": "La clef du tableau auquel nous voulons ajouter des données. Doit exister dans ",
    "ipa/bds.md.548ea3fa41e6b9eb5c1c0082d48d6557": "`vals`",
    "ipa/bds.md.a30c3a80cff5e28dba7695ccd7c8dc74": "`élémentBdListeDonnées`",
    "ipa/bds.md.91102763ccc1eb302066a32af0106721": "Les données à ajouter.",
    "ipa/bds.md.dd3bbe0b996a4ace656743b1a912a54e": "L'empreinte (identifiant unique) de l'élément ajouté.",
    "ipa/bds.md.39c518d7c03aefa3a74cb82d94da6697": "```ts\n// ...continuant de ci-dessus...\n\nconst image = ref<File>()  // L'image sera sélectionnée par l'utilisateur dans l'interface\nconst site = ref<string>() // Pareil pour le site de l'observation\n\nconst empreinteDonnées = ref<string>();\n\nconst sauvegarderDonnées = async () => {\n    if (!image.value || !site.value) return  // Arrêter ici si l'image ou le site n'ont pas encore été sélectionnés\n    empreinteDonnées.value = await client.bds.ajouterÉlémentÀTableauUnique({ \n        schémaBd, \n        idNuéeUnique, \n        clefTableau: CLEF_TABLEAU,\n        vals: {\n            \"site\": site.value,\n            \"date\": Date.now(),\n            \"image\": image.value ,\n        },\n    });\n};\n```",
    "ipa/bds.md.25db10d309a7f99b506236a1bd426099": "`client.bds.modifierÉlémentDeTableauUnique({ schémaBd, idNuéeUnique, clefTableau, vals, empreintePrécédente })`",
    "ipa/bds.md.33016b060b196f807fdae1f4745d6ae9": "Modifie un élément d'un tableau d'une base de données unique.",
    "ipa/bds.md.69f7af1eaf1f5f2f04b71129f3faf2b5": "La clef du tableau dont nous voulons modifier des données. Doit exister dans ",
    "ipa/bds.md.83a764faaacf61cdc8f4d20883a7e57b": "{ [idColonne: string]: ",
    "ipa/bds.md.96a1512c6abe31665661fbb7588fc6f2": "`élémentsBd`",
    "ipa/bds.md.3d0401d7425836ed8040113c4b4a974b": " | undefined }",
    "ipa/bds.md.f451ecc636a1182d90e012802f9b9b43": "Les données à jour. Si une colonne n'apparaît pas sur ",
    "ipa/bds.md.6b1ee11822ed68c5b5cf1692a5f653f5": ", elle ne sera pas modifiée. Si, au contraire, elle est égale à ",
    "ipa/bds.md.7ec1e4a3e6842d7d4bbed0fa7361706c": ", la valeur correspondante sera effacée.",
    "ipa/bds.md.7dc9eabe4196ed9317f17df83f35dd85": "`empreintePrécédente`",
    "ipa/bds.md.c648dfe9da0fd2c93ad9a81cab747705": "L'empreinte de l'élément à modifier.",
    "ipa/bds.md.e2dd3407eca4ac211d09e8c3de170251": "L'empreinte (identifiant unique) de l'élément modifié.",
    "ipa/bds.md.d4645af566fb1c8f3a17d921808a1c22": "```ts\n// ...continuant de ci-dessus...\n\nconst nouvelleImage = ref<File>()  // L'image sera sélectionnée par l'utilisateur dans l'interface\n\nconst modifierImage = async () => {\n    if (!nouvelleImage.value) return  // Arrêter ici si l'image n'a pas encore été sélectionnée\n    await client.bds.modifierÉlémentDeTableauUnique({ \n        schémaBd, \n        idNuéeUnique, \n        clefTableau: CLEF_TABLEAU,\n        vals: {\n            \"image\": nouvelleImage.value ,\n        },\n        empreintePrécédente: empreinteDonnées.value,\n    });\n};\n```",
    "ipa/bds.md.5adfeae425037e0505d93548e340f170": "`client.bds.effacerÉlémentDeTableauUnique({ schémaBd, idNuéeUnique, clefTableau, empreinte })`",
    "ipa/bds.md.edb51a6545f0cc960eeb4779acb6f27b": "Efface un élément d'un tableau d'une base de données unique.",
    "ipa/bds.md.b889b49f215ab8dbd472022348ce9f62": "La clef du tableau dont nous voulons effacer des données. Doit exister dans ",
    "ipa/bds.md.f4f02dc821adc9777eaa1a06be937642": "`empreinte`",
    "ipa/bds.md.a8d2d930ef5182a5b06a28823d7d0ac1": "L'empreinte de la rangée à effacer.",
    "ipa/bds.md.751548a1b043cc90f20880e66ec2641f": "```ts\n// ...continuant de ci-dessus...\n\nconst effacerDonnées = async () => {\n    await client.bds.effacerÉlémentDeTableauUnique({ \n        schémaBd, \n        idNuéeUnique, \n        clefTableau: CLEF_TABLEAU,\n        empreinte: empreinteDonnées.value,\n    });\n};\n```",
    "ipa/bds.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/bds.md.a070d8aafb68f3ed4b7633876737bc8d": "Plusieurs types sont associés avec les bases de données Constellation.",
    "ipa/bds.md.adfa177e6ad580fc7519c64af3daefa2": "Types score BD",
    "ipa/bds.md.25ab1142c703245d9b86d1392b288dfc": "L'interface `infoScore` représente les différentes parties du score de qualité d'une base de données.",
    "ipa/bds.md.12e8b4e76469169a6332f6377d1030bc": "```ts\ninterface infoScore {\n  accès?: number;\n  couverture?: number;\n  valide?: number;\n  licence?: number;\n  total: number;\n}\n```",
    "ipa/bds.md.36aab16a2c38b9aee826fee06dc804c7": "Types schéma BD",
    "ipa/bds.md.b080b8a89c5e9e724e1887a740039cbb": "Les schémas de bases de données permettent de rapidement créer des bases de données selon un schéma prédéterminé.",
    "ipa/bds.md.e169e5b4edfe584bf1d9ae822fb96f3d": "```ts\ninterface schémaSpécificationBd {\n  licence: string;\n  licenceContenu?: string;\n  motsClefs?: string[];\n  nuées?: string[];\n  statut?: schémaStatut;\n  tableaux: {\n    cols: {\n      idVariable: string;\n      idColonne: string;\n      index?: boolean;\n      optionnel?: boolean;\n    }[];\n    clef: string;\n  }[];\n};\n\n```",
    "ipa/bds.md.ce9b0e4db52bc88358e7e9288f485bc2": "Types statut",
    "ipa/bds.md.309d3194e556bda36c1a0915b40a5fc2": "Les bases de données, de même que d'autres objets Constellation, peuvent avoi différents statuts de développement. La valeur par défaut est `active`.",
    "ipa/bds.md.66e0257a598b9456edb20954048c89a7": "```ts\nenum TYPES_STATUT {\n    INTERNE = \"interne\",\n    BÊTA = \"bêta\",\n    ACTIVE = \"active\",\n    OBSOLÈTE = \"obsolète\",\n}\n\ntype schémaStatut = {\n    statut: TYPES_STATUT;\n    idNouvelle?: string;\n};\n```",
    "ipa/bds.md.98aa5ac0422b6b38ec33ec86022e4d95": "Types info tableaux",
    "ipa/bds.md.4f3852dead2b38a8853f6367ebfcf505": "Ces types représentent la spécification d'un tableau et sa position dans la base de données.",
    "ipa/bds.md.f6561ac2267b57166c31bc7239f5de07": "```ts\ntype infoTableau = {\n  clef: string;\n  position: number;\n};\ntype infoTableauAvecId = infoTableau & { id: string }\n```",
    "ipa/bds.md.b19b73091115f186bcfddd33fff22a30": "Types données exportées",
    "ipa/bds.md.3e4083c9b28d2529e271a5b3593bae86": "Ce type décrit les données exportées d'une base de données Constellation.",
    "ipa/bds.md.8d107016d2dc71af64db6a4184a16e73": "```ts\nexport interface donnéesBdExportées {\n  doc: xlsx.WorkBook;\n  fichiersSFIP: Set<{ cid: string; ext: string }>;\n  nomFichier: string;\n}\n````\n",
    "ipa/client.md.577d7068826de925ea2aec01dbadf5e4": "Client",
    "ipa/client.md.c5a423120ad01a42a1f2190c3117c11e": "Le client Constellation représente un compte sur le réseau.",
    "ipa/client.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/client.md.8436b713297e90a27c8dd3d1106ca02d": "Initialisation",
    "ipa/client.md.e8b8fccfa442a246db1e898bf42b27b5": "`générerClient({ opts, mandataire })`",
    "ipa/client.md.7b7bdaa65fd9de4becabbea3bda62d25": "Initialise un client Constellation.",
    "ipa/client.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/client.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/client.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/client.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/client.md.4e917ddf415b2ea44318000c86b101d9": "`opts`",
    "ipa/client.md.7ae176b0767524bfd394ac45e60b66fc": "`optsConstellation | optsIpaTravailleur`",
    "ipa/client.md.07a20d212be9c450ecfd9157236bca36": "#types-initialisation",
    "ipa/client.md.2af5a7f5a806b2c458ef3e0181c604ab": "Les options d'initialisation de Constellation. Pour les pros, vous pouvez spécifier le dossier du compte, les protocoles tiers ou bien un nœu SFIP ou une instance de bd orbite à utiliser.",
    "ipa/client.md.6d623e97dc0d14fc1cf5887f60a8b129": "`mandataire`",
    "ipa/client.md.95dc00a9953fc05673a4bc3b151a25a6": "`\"proc\" | \"travailleur\" | undefined`",
    "ipa/client.md.cc124baef3df7e8510fd0e8f795ac018": "Par défaut, Constellation est lancé dans le même processus. Vous pouvez aussi le lancer dans un processus travailleur sur le navigateur. Lorsque ",
    "ipa/client.md.8344f0c28832cc7d5166edb15ff02e7c": "`\"travailleur\"`",
    "ipa/client.md.d15c1a64f4d50bc6bbe604df0d672dad": ", opts doit être de type ",
    "ipa/client.md.9c9a4c8699674461b208d6b7640bea0d": "`optsIpaTravailleur`",
    "ipa/client.md.5058f1af8388633f609cadb75a75dc9d": ".",
    "ipa/client.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/client.md.3aefc382abd9dc21498f41b5862fb967": "`Promise<ClientConstellation>`",
    "ipa/client.md.19c835b52caed9454e20d0aec122bfe5": "Le client Constellation, prêt à utiliser.",
    "ipa/client.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/client.md.d970cda9fab461e947e5345919978da7": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\n```",
    "ipa/client.md.9f5c7baa5e987140aefae457fbfdd57a": "`client.fermer()`",
    "ipa/client.md.8bfc0014e9e105a3f1572e5489fc00fa": "Ferme le client.",
    "ipa/client.md.bc9172e8e9a00984c795fcdcd7fe1760": "```ts\n// ...continuant de ci-dessus...\n\nawait client.fermer();\n```",
    "ipa/client.md.d7fe67b812146b1e701688324abb94c1": "Identité",
    "ipa/client.md.a2a2ac087183995768cf65141d6a6d25": "Ces fonctions permettent d'interagir avec les identifiants du compte.",
    "ipa/client.md.9365ac738492b2c9098f07ddfff7812f": "`client.obtIdCompte()`",
    "ipa/client.md.e5472f1a76351bede099a5531585b4c5": "Obtenir l'identifiant du compte Constellation. Cet identifiant est partagé parmi tous les dispositifs connectés au compte.",
    "ipa/client.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/client.md.ba342338f64b461ce7e090dd4affcfb0": "L'identifiant du compte.",
    "ipa/client.md.c09888f34323186fe0addd6dca580b68": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idCompte = await client.obtIdCompte();\n\n```",
    "ipa/client.md.d8e8619aeb1fb3e941293928ee6e0d43": "`client.suivreIdCompte()`",
    "ipa/client.md.d75aa6497865f62ee63c7bdb2acdb352": "Suivre l'identifiant du compte Constellation. Celui-ci ne changera que si le dispositif se rejoint à un compte existant.",
    "ipa/client.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/client.md.14bc2483a1c126f2de8ba5956a85f7af": "`(id: string) => void`",
    "ipa/client.md.744bd9279cc6dbf8817c41a0ea42eb0a": "Une fonction qui sera appelée avec l'identifiant du compte chaque fois que celui-ci change.",
    "ipa/client.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/client.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/client.md.0e9f0bb0310eb1b35df7355060d4469a": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idCompte = ref<string>();\nconst fOublier = await client.suivreIdCompte({ \n    f: x => idCompte.value = x\n});\n\n```",
    "ipa/client.md.fc5540c617fad9927a3dc3e672181567": "`client.obtIdDispositif()`",
    "ipa/client.md.730dd962a00f1158b22d04e6ec4d79ee": "Obtenir l'identifiant du dispositif actuel. ",
    "ipa/client.md.8f3d29c1f5c741f01f5fe671c58cba8e": ":::info INFO\nCelui-ci est identique à l'identifiant [bd-orbite](https://github.com/orbitdb/orbit-db) du dispositif.\n:::",
    "ipa/client.md.4d4d0c6b7737db328f572a0f3f98566b": "L'identifiant du dispositif.",
    "ipa/client.md.c5dfdd62f807b2d7a6df2109363c0b1a": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idDispositif = await client.obtIdDispositif();\n\n```",
    "ipa/client.md.814cca3c74fc92b8a0753ec0634fc59f": "`client.obtIdSFIP()`",
    "ipa/client.md.0434c83a3cb6926113f430739daa5ca1": "Obtenir l'identifiant du nœud de Système de fichiers interplanétaire ([SFIP](https://ipfs.io/)) connecté au compte Constellation.",
    "ipa/client.md.36e0db847f5d67446f6a542a9757c818": "`Promise<ipfs.IDResult>`",
    "ipa/client.md.4bae8146f3b42730a4a9a7040efaa96b": "L'identifiant SFIP du compte.",
    "ipa/client.md.e361be6464d42911eb8b72bfba8405e6": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idSFIP = await client.obtIdSFIP();\n\n```",
    "ipa/client.md.78b6eb93156807223b348dfdb3380bbc": "Dispositifs",
    "ipa/client.md.e04a9e99d66528399ccde21934cf83e2": "Différents dispositifs (téléphones, ordinateurs) peuvent être connectés au même compte Constellation.",
    "ipa/client.md.43c9cf61675bb1e2c0b211cf069076a5": "`client.suivreDispositifs({ f, idCompte })`",
    "ipa/client.md.0c62af94dc908d9e2c1f16c89b9b57a5": "Suivre les dispositifs associés à ce compte.",
    "ipa/client.md.bb3ae7ccb3f546c7bf8fd66b1f7ee64f": "`(dispositifs: string[]) => void`",
    "ipa/client.md.11c05c2e3d842a5d0bbd1f98416659ef": "Une fonction qui sera appelée avec les identifiants des dispositiffs du compte chaque fois qu'ils changent",
    "ipa/client.md.43204cdd0804bcf6344dab24da6e495a": "`idCompte`",
    "ipa/client.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/client.md.a8d22d0a8f4590468ae9ab3c485ec0d6": "L'identifiant du compte dont on veut suivre les dispositifs. Si non spécifié, Constellation utilisera le compte actuel.",
    "ipa/client.md.6cbbd81d40e9b0abb4f15322fae2012a": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst dispositifs = ref<string[]>();\n\nconst fOublier = await client.suivreDispositifs({ \n    idBd,\n    f: x => dispositifs.value = x,\n});\n```",
    "ipa/client.md.88b29a49c3c1059a8b6a42999e7f7cb3": "`client.nommerDispositif({ idDispositif, nom, type})`",
    "ipa/client.md.52f3613422814a72b96ba73ea9b32d6c": "Spécifier un nom pour votre dispositif afin de mieux le reconnaître.",
    "ipa/client.md.612aa3c03cf8ec07463117f8e9de0a69": "`idDispositif`",
    "ipa/client.md.9375fae36b8de1d9a7838e0032d222d0": "L'identifiant du dispositif. Si non spécifié, Constellation utilisera le dispositif actuel.",
    "ipa/client.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/client.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/client.md.0d50b121acf564f3b6af44b43d74fd84": "Le nom à donner au dispositif.",
    "ipa/client.md.415ce7b551e9decd6aac5fb465bd367b": "`type`",
    "ipa/client.md.c32b7b9058c1672bd64cb1504daf4d43": "Le type de dispositif. Peut être n'importe quelle valeure, mais nous recommendons l'un de ",
    "ipa/client.md.aff6700723c3c12fa4ad65cd31d6f66d": "`téléphone`",
    "ipa/client.md.fc763cb31e9938f37737394681228f83": ", ",
    "ipa/client.md.bbbdf2587d64d26fb3d5f640ac634f62": "`navigateur`",
    "ipa/client.md.e0fb13400c45c6f54b0f5672f202f492": "`tablette`",
    "ipa/client.md.c432259d3ebd9c4d5c51188b6fadbc47": "`ordinateur`",
    "ipa/client.md.27cbe18ee903b7d0c4383a1ca83e688f": " ou ",
    "ipa/client.md.716db2d025ce1bb63e391e918ae3617f": "`serveur`",
    "ipa/client.md.bfbd79771d918e654467402f1757af24": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst fOublier = await client.nommerDispositif({ \n    nom: \"Mon téléphone\",\n    type: \"téléphone\"\n});\n```",
    "ipa/client.md.352d78f84af71645d936aa60c0732167": "`client.suivreNomsDispositifs({ f, idCompte })`",
    "ipa/client.md.326fc7c373c2dd9534c57405a077f5ad": "Suivre les noms des dispositifs associés à un compte.",
    "ipa/client.md.6b7f757e47d24b6f6ce45e36d7be9227": "`(noms: `",
    "ipa/client.md.c4238c29202b7ae46828dd3068d8ae33": "`structureNomsDispositifs`",
    "ipa/client.md.afe654769eda338226bc0e640fcd5355": "#types-dispositifs",
    "ipa/client.md.052f6ca0c0d503cf5822a52f32b9147b": "` ) => void`",
    "ipa/client.md.3395b1eff2cdc3e63716666922215189": "Une fonction qui sera appelée avec les noms des dispositifs chaque fois qu'ils changent.",
    "ipa/client.md.f3c32a580f7b3d2d13ef2aa686fe0827": "L'identifiant du compte dont on veut suivre les noms des dispositifs. Si non spécifié, Constellation utilisera le compte actuel.",
    "ipa/client.md.33117f2b26d0b44c0caea0a03e9f0169": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type client } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst dispositifs = ref<client.structureNomsDispositifs>();\n\nconst fOublier = await client.suivreNomsDispositifs({ \n    idBd,\n    f: x => dispositifs.value = x,\n});\n```",
    "ipa/client.md.640d79620e5ef244c0892eae0d3ba2c9": "`client.suivreNomDispositif({ idCompte, idDispositif, f })`",
    "ipa/client.md.3b713734c5523bbe9a34584ab83896c7": "Suivre le nom d'un dispositif spécifique.",
    "ipa/client.md.0f9a06380d559e6e45a6f884d77894d3": "L'identifiant du compte dont on veut suivre le nom du dispositif.",
    "ipa/client.md.26d61935966fb0c42548c314f1c775c6": "L'identifiant du dispositif dont on veut suivre le nom.",
    "ipa/client.md.8ae6d010ea2ea8959de239b45dbf5a69": "`(nom: { type?: string; nom?: string } ) => void`",
    "ipa/client.md.37266aa88992b941a0a14c078fb66b91": "Une fonction qui sera appelée avec le nom du dispositif chaque fois qu'il change.",
    "ipa/client.md.78f9020a0c3bbda1c68f7faa9d4595b2": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type client } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst nom = ref<{ type?: string; nom?: string }>();\n\nconst fOublier = await client.suivreNomDispositif({ \n    idCompte: await client.obtIdCompte(),\n    idDispositif: await client.obtIdDispositif(),\n    f: x => nom.value = x,\n});\n```",
    "ipa/client.md.91e2a33b99f5ef7516d33ed0bd21b140": "`client.générerInvitationRejoindreCompte()`",
    "ipa/client.md.235bb6c9ac73e1dbc6232f039cf739ee": "Générer une invitation qu'un autre dispositif peut utiliser pour se joindre à ce compte.",
    "ipa/client.md.0a5f27aa37aa884948f1a069d9f6e1e3": ":::danger\n**Ne partagez pas l'invitation générée de façon publique !** N'importe qui connaît le secret pourra se connecter à votre compte et agir en tant que vous.\n:::",
    "ipa/client.md.fd79a9eaf780bf87ec1d8a66de627ac3": "`Promise<idCompte: string; codeSecret: string }>`",
    "ipa/client.md.2022bdb47c33d88cd0cbac65f3263be2": "L'invitation secrète.",
    "ipa/client.md.1793a95e7f75090fa748409e17394935": "```ts\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst invitationSecrète = await client.générerInvitationRejoindreCompte();\n```",
    "ipa/client.md.f4dff075fd302b46d66ad7a4263c0d1c": "`client.révoquerInvitationRejoindreCompte({ codeSecret })`",
    "ipa/client.md.bc2c0f7cd945f2d53cf0db3212e125b9": "Révoquer une invitation. Uniquement possible si l'invitation n'a pas encore été utilisée.",
    "ipa/client.md.1fab6bce27cc0eaf539cded03eeab71e": "`codeSecret`",
    "ipa/client.md.fb31928dfad9ae526685c1a354c4800b": "Le code secret de l'invitation à révoquer. Si non spécifié, toutes les invitations actives seront révoquées.",
    "ipa/client.md.aab590aed50fe4197ed391783b85fd47": "```ts\n// ...continuant de ci-dessus...\nconst invitationSecrète = await client.révoquerInvitationRejoindreCompte({\n    codeSecret: invitationSecrète.codeSecret\n});\n```",
    "ipa/client.md.acc1c4f421d9694e6f4dd239efc9b03c": "`client.demanderEtPuisRejoindreCompte({ idCompte, codeSecret })`",
    "ipa/client.md.5e153fa04a7c0db78af315d6942cfe4d": "Utiliser une invitation pour rejoindre un compte existant.",
    "ipa/client.md.af22b3a0ff1cf5d4408eaec652ecb72c": "L'identifiant du compte que l'on veut rejoindre.",
    "ipa/client.md.8b1e64cf217790d18ceb16d03c6ea9d2": "Le code secret de l'invitation.",
    "ipa/client.md.023f9c0388b78cead06532c610e0bbe5": "```ts\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.demanderEtPuisRejoindreCompte({\n    idCompte: \"idDuCompteQueJeVeuxRejoindre\",\n    codeSecret: \"leCodeSecretQueJ'aiReçu\",\n});\n```",
    "ipa/client.md.a1ac58ce95f7efd89564cb5ef3ae0465": "`client.exporterDispositif({ nomFichier })`",
    "ipa/client.md.a2cf5f6a79623beac72bc0352af83149": "Exporter les données de ce dispositif pour pouvoir le réinitialiser en cas de perte.",
    "ipa/client.md.2e99ff4542ff31fec1f90b208355f495": "`nomFichier`",
    "ipa/client.md.5efdbb1381fb02ed4237c223050dc63e": "Le nom du fichier où nous allons sauvegarder une copie du compte.",
    "ipa/client.md.7064d230b5cf2377e63d1d912696fb91": "```ts\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.exporterDispositif({ nomFichier: \"ma sauvegarde\"});\n```",
    "ipa/client.md.19c6711a7c992258d082c0aefeb8e6e3": "`client.effacerDispositif()`",
    "ipa/client.md.3297ef7d13bcaf1ed99fd48f2a74a002": "Effacer ce dispositif.",
    "ipa/client.md.76d56d6ccbc172ef1fbcffa689064879": ":::danger\n**Cette action est irréversible** et effacera toutes les données liées à votre dispositif. Pour effacer votre compte Constellation, effacer tous les dispositifs connectés au compte.\n:::",
    "ipa/client.md.354de6bffa959a35389ebaac5e4c9b36": "```ts\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.effacerDispositif();\n```",
    "ipa/client.md.977a7223997e10d4daa2ce0d309fafc6": "Autre",
    "ipa/client.md.9493f97882daf05e87a2683ab61f4977": "`client.suivreTypeObjet({ idObjet, f })`",
    "ipa/client.md.62c6595f148ed3c2f4b49b007a256fcc": "Détecte le type d'un objet (variable, base de données, projet ou autre).",
    "ipa/client.md.17f11fe037671f7d32e85f2ba02f2867": "L'identifiant de l'objet.",
    "ipa/client.md.e8ed5395ea31ce4d48bdd822e8886ce6": "`(type:  \"motClef\" | \"variable\" | \"bd\" | \"projet\" | \"nuée\" | undefined ) => void`",
    "ipa/client.md.d611cb30a994a5d1dfd0684f1b50e9e1": "Une fonction qui sera appelée avec le type de l'objet chaque fois qu'il change.",
    "ipa/client.md.7505a7622f20544f9323e1969ff98be8": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idVariable = await client.créerVariable({ catégorie: \"numérique\" });\n\nconst type = ref<string>();\nconst fOublier = await client.suivreTypeObjet({ \n    idObjet: idVariable,\n    f: x => type.value = x,\n});\n```",
    "ipa/client.md.efadff91b2c1c54c1f92f081d8a58e69": "`client.suivrePermission({ idObjet, f })`",
    "ipa/client.md.f031206fe3af7ee2470a74bce04bab5a": "Suit l'autorisation d'un compte envers des données.",
    "ipa/client.md.532842e26e0445d7e416376d2cad4be8": "`idObjet`",
    "ipa/client.md.054bfd5e102025293f5e38ef522c3729": "L'identifiant de l'objet d'intérpet.",
    "ipa/client.md.5af8e3fa9ca4f2d42064927e155d939e": "`(permission:  \"MODÉRATEUR\" | \"MEMBRE\" | undefined ) => void`",
    "ipa/client.md.da1031120d3590d67eb57ce5a2096fd9": "Une fonction qui sera appelée avec le niveau d'autorisation chaque fois qu'il change. Les membres peuvent modifier les données, et les modératrices peuvent aussi inviter d'autres membres ou modératrices. Si aucune permission n'est détectée, renverra ",
    "ipa/client.md.25ff8226df52176acc18ba77dacc683d": "`undefined`",
    "ipa/client.md.b5085bfe2688ade2499b4dff6214857c": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idVariable = await client.créerVariable({ catégorie: \"numérique\" });\n\nconst permission = ref<string>();\nconst fOublier = await client.suivrePermission({ \n    idObjet: idVariable,\n    f: x => permission.value = x,\n});\n```",
    "ipa/client.md.24296ba8b6d61aeff8157dd862a8be9b": "`client.suivrePermissionÉcrire({ idObjet, f })`",
    "ipa/client.md.3e00006df6a3759b92e520cccdf73c82": "Fonction d'utilité qui suit le niveau d'autorisation d'un compte envers des données.",
    "ipa/client.md.55ce5b420e073c96b72118d90472172f": "`(permission: boolean ) => void`",
    "ipa/client.md.d4c4af8db2a6fce1563c648fdb5451c6": "Une fonction qui sera appelée avec le niveau d'autorisation chaque fois qu'il change. Renvoie vrai si la modification des données est autorisée.",
    "ipa/client.md.5b0978661093fa891d8884a007c0f8b2": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idVariable = await client.créerVariable({ catégorie: \"numérique\" });\n\nconst permission = ref<boolean>();\nconst fOublier = await client.suivrePermissionÉcrire({ \n    idObjet: idVariable,\n    f: x => permission.value = x,\n});\n```",
    "ipa/client.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/client.md.3874b4c363bfe46f2b03f5ca026db14b": "Plusieurs types sont associés au client Constellation.",
    "ipa/client.md.bb4f358edf8c77c83d2b4a25f8b62448": "Types initialisation",
    "ipa/client.md.aaeb8629f9fcca289ce9f91d8542b844": "```ts\ninterface optsConstellation {\n  compte?: string;\n  sujetRéseau?: string;\n  orbite?: optsOrbite;\n  protocoles?: string[];\n}\ntype optsOrbite = OrbitDB | optsInitOrbite;\n\ntype optsInitOrbite = {\n  dossier?: string;\n  sfip?: optsInitSFIP;\n};\n\ntype optsInitSFIP = {\n  sfip?: IPFS;\n  dossier?: string;\n};\n\ninterface optsIpaTravailleur extends optsConstellation {\n  compte?: string;\n  sujetRéseau?: string;\n  orbite?: {\n    dossier?: string;\n    sfip?: {\n      dossier?: string;\n    };\n  };\n}\n```",
    "ipa/client.md.58dc3efba7dec79b3ea97bebb51e7173": "Types dispositifs",
    "ipa/client.md.23175787239cb5ff03ba13ca7aeab738": "```ts\ntype structureNomsDispositifs = {\n  [idDispositif: string]: { nom?: string; type?: string };\n};\n\n```",
    "ipa/favoris.md.0e29ad704b1df5897c46c7bb0d9a52fc": "Favoris",
    "ipa/favoris.md.e159c35282dd99719409d2a4a1e0efac": "Étant un système distribué, Constellation ne garde pas les données quelque part sur un serveur central. Ce sont les utilisateurs eux-mêmes qui en gardent et partagent des copies sur leurs dispositifs.",
    "ipa/favoris.md.a70bd61fc38e270697476ef57da4ed8b": "Donc comment être sûre que les données qui vous intéressent seront toujours disponibles, même si la personne qui les a contribuées ferme son ordinateur pour la nuit, échape son téléphone dans un égout d'une ruelle à Coimbatore ou bien tout simplement décide qu'elle retourne avec Google Sheets et efface son compte Constellation ?",
    "ipa/favoris.md.bc1e1af09f7cd49141a3b7fa615a324e": "En ajoutant des données à vos favoris, vous serez assurés que Constellation en gardera toujours une copie locale, même si les données ne sont plus disponibles ailleurs sur le réseau.",
    "ipa/favoris.md.18b12a5c060580fe45c021c0276e5ab1": ":::warning AVERTISSEMENT\nConstellation est toujours un logiciel expérimental. Des « oups » sont toujours possibles. **Si vos données sont vraiment vraiment importantes, on vous suggère, en plus de les ajouter à vos favoris, d'en garder une copie exportée comme sauvegarde d'au cas où.** Vous pouvez aussi [automatiser](./automatisations.md) l'exportation des données de manière périodique ; c'est bien pratique !",
    "ipa/favoris.md.7291564ba3976956203656896acd9fdf": "Bon, là vous êtes prévenus, majeurs et vaccinés. Si vous ne m'écoutez pas, je ne suis pas responsable. (En réalité, selon la [licence](https://github.com/reseau-constellation/ipa/blob/main/LICENSE), je ne le suis pas peut importe.)\n:::",
    "ipa/favoris.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/favoris.md.47055af394838ac7c6bfc89e6c66ed3b": "Fonctions",
    "ipa/favoris.md.4d0afc6910e9049f8a39d2d7a1326d74": "Ces fonctions permettent de suivre et de modifier les données épinglés dans nos favoris. Plusieurs d'entre elles permenttent de spécifier quels dispositifs doivent épingler les données en question. Cette spécification pourra être l'une des suivantes :",
    "ipa/favoris.md.93f61c5bf0528f000fc5da2f5ced9841": "* L'identifiant (ou une liste d'identifiants) des dispositifs, obtenables selon [`client.obtIdDispositif()`](./client.md#clientobtiddispositif) ou bien [`client.suivreDispositifs`](./client.md#client-suivredispositifs-f-idcompte).\n* `\"TOUS\"`, soit, tous les dispositifs de ce compte.\n* `\"INSTALLÉ\"`, soit, tous les dispositifs ayant une version installée de Constellation (Électron ou Node.js), excluant donc l'appli Constellation Internet sur navigateur.",
    "ipa/favoris.md.7f1715e60191276fddebfdbf18a17dc8": "`client.favoris.suivreFavoris({ f, idCompte })`",
    "ipa/favoris.md.e8b3564c8356e387de5bd250202f0afe": "Suit les favoris d'un compte. Identique à [`client.réseau.suivreFavorisMembre`](./réseau.md#client-reseau-suivrefavorismembre-idcompte-f).",
    "ipa/favoris.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/favoris.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/favoris.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/favoris.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/favoris.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/favoris.md.d834e1068698e7597fcfcd2815a6c369": "`(favoris: `",
    "ipa/favoris.md.f673294f695dd0ff75b75085639d3e39": "`ÉlémentFavorisAvecObjet`",
    "ipa/favoris.md.b7d7f4a7dcf598e311fa020c747553d1": "#types",
    "ipa/favoris.md.9a5bcb4926efe0675cf2dc40f5ee28e2": "`) => void`",
    "ipa/favoris.md.a72a2964b21bfa59162e602f979a3797": "Une fonction qui sera appelée avec la liste des favoris associées au compte chaque fois que celle-ci change.",
    "ipa/favoris.md.43204cdd0804bcf6344dab24da6e495a": "`idCompte`",
    "ipa/favoris.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/favoris.md.e234d78f8665a1ede847b7b511068506": "L'identifiant de compte dont on veut suivre les favoris. Si non spécifié, le compte actuel sera utilisé.",
    "ipa/favoris.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/favoris.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/favoris.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/favoris.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/favoris.md.5e750f8fb4dc026ee3a3d8b38cad7be3": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type favoris as fav} from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst favoris = ref<fav.ÉlémentFavorisAvecObjet[]>();\nconst fOublier = await client.favoris.suivreFavoris({\n  f: x => favoris.value = x,\n});\n```",
    "ipa/favoris.md.876f89d861758a17c5c023761866508a": "`client.favoris.épinglerFavori({ idObjet, dispositifs, ... })`",
    "ipa/favoris.md.ff6db1eb25b0f178e37804a26744c2af": "Épingle des données sur ce compte.",
    "ipa/favoris.md.532842e26e0445d7e416376d2cad4be8": "`idObjet`",
    "ipa/favoris.md.29cf7525bdff9926ef668aa5923031e5": "L'identifiant des données (bases de données, variable ou autre) à épingler.",
    "ipa/favoris.md.7195666684f4330c91964583374c8a1a": "`dispositifs`",
    "ipa/favoris.md.356e98aceea3b1fc717138a17e2c4923": "`typeDispositifs`",
    "ipa/favoris.md.375e2fe07e14d680f31f3a3b93b6a17f": "Les dispositifs sur lesquels ces données doivent être épinglées.",
    "ipa/favoris.md.0c86d489ed3a2cb8e50c16e68031bf30": "`dispositifsFichiers`",
    "ipa/favoris.md.457a08487f829118ed9952f7bef6f47a": "` | undefined`",
    "ipa/favoris.md.9276c3943d377bc038a1d3b86c52066b": "Les dispositifs sur lesquels des fichiers éventuelement présents dans les données (images, vidéos ou autres) devraient être épinglés. Par défaut, les fichiers seront uniquement épinglés sur les dispositifs avec une installation de Constellation (et non sur les navigateurs) afin de sauvegarder de l'espace.",
    "ipa/favoris.md.eb1820ca0b70e8f646e9466acd4ee0a0": "```ts\nimport { générerClient, type favoris } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nawait client.favoris.épinglerFavori({\n  idObjet: idBd,\n});\n``` ",
    "ipa/favoris.md.a80079cb20c2a4ba4ffac12d8c1f075b": "`client.favoris.désépinglerFavori({ idObjet })`",
    "ipa/favoris.md.502844ae4ff895ac5d341199c5b553fe": "Désépingle des données de ce compte.",
    "ipa/favoris.md.a0c90402b65479931d7e0401b3e50725": "L'identifiant des données (bases de données, variable ou autre) à désépingler.",
    "ipa/favoris.md.28bb16b8a6205089fa8c20ac6c6df89e": "```ts\n/// ...continuant de ci-dessus...\n\nawait client.favoris.désépinglerFavori({\n  idObjet: idBd,\n});\n``` ",
    "ipa/favoris.md.5486c7e540316c1edae965be040acfbb": "`client.favoris.suivreÉtatFavori({ idObjet, f })`",
    "ipa/favoris.md.06f96adb044b6a124e1172a927e2f171": "Suit le statut de l'épingle d'un objet sur ce compte.",
    "ipa/favoris.md.aebccfd4a6135f3f2863e8811e44ae90": ":::tip CONSEIL\nSi vous voulez savoir si des données sont épinglées ailleurs sur le réseau, utiliser [`client.réseau.suivreFavorisObjet`](./réseau.md#client-reseau-suivrefavorisobjet-idobjet-f-profondeur) à la place.\n:::",
    "ipa/favoris.md.21b058effcb67e211aecf64bf855931b": "L'identifiant de l'objet (base de données, projet, variable ou autre) d'intérêt.",
    "ipa/favoris.md.24eba4d28c21aeaa2af1d7eacaff173f": "`ÉlémentFavoris`",
    "ipa/favoris.md.af799b6c975a6109128c9e80d26ad53b": "` | undefined) => void`",
    "ipa/favoris.md.4f8c4df9192d2b8224002df75aeb3cd1": "Une fonction qui sera appelée avec l'épingle de l'objet chaque fois que celle-ci change. Si l'objet n'est pas épinglé sur ce compte, ",
    "ipa/favoris.md.25ff8226df52176acc18ba77dacc683d": "`undefined`",
    "ipa/favoris.md.a5323e6f986f2cf375fd9df1828b760f": " sera passé à la fonction.",
    "ipa/favoris.md.858f76f8dbc092581e8f2b1a0780e03a": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type favoris as fav } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst favoris = ref<fav.ÉlémentFavoris | undefined>();\nconst fOublier = await client.favoris.suivreÉtatFavori({\n  idObjet: idBd,\n  f: x => favoris.value = x,\n});\n```",
    "ipa/favoris.md.3f31caab080b5251510dc4a0ec65f3b4": "`client.favoris.suivreEstÉpingléSurDispositif({ idObjet, f, ... })`",
    "ipa/favoris.md.5491f05bad1460921c8e2aa9872640c1": "Suit le statut de l'épingle d'un objet sur un dispositif.",
    "ipa/favoris.md.612aa3c03cf8ec07463117f8e9de0a69": "`idDispositif`",
    "ipa/favoris.md.39fe734bac74f97250f8ab52940fc9ad": "L'Identtifiant du dispositif d'intérêt. Si non spécifié, Constellation utilisera le dispositif actuel par défaut.",
    "ipa/favoris.md.c5bfc9e5d8ed131f29bead8b08fe10a3": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type favoris as fav } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst épingle = ref<fav.épingleDispositif | undefined>();\nconst fOublier = await client.favoris.suivreEstÉpingléSurDispositif({\n  idObjet: idBd,\n  f: x => épingle.value = x,\n});\n```",
    "ipa/favoris.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/favoris.md.01b6419354c371fcb85b5ee5db22cefe": "Plusieurs types son associés avec les favoris.",
    "ipa/favoris.md.44e44a06da1182360de45d074cfa42b3": "```ts\ntype typeDispositifs = string | string[] | \"TOUS\" | \"INSTALLÉ\";\n\ntype ÉlémentFavoris = {\n  récursif: boolean;\n  dispositifs: typeDispositifs;\n  dispositifsFichiers?: typeDispositifs;\n};\n\ntype ÉlémentFavorisAvecObjet = ÉlémentFavoris & { idObjet: string };\n\n```",
    "ipa/introduction.md.a9481779f7b67d266a7bea72bf865418": "Interface de programmation d'application (IPA)",
    "ipa/introduction.md.f5a20075890a84bdbfdb8b30b16e171b": "L'interface de programmation d'application (IPA) de Constellation vous permet d'utiliser Constellation dans vos propres logiciels et applications. Cette section documente les fonctions de Constellation en JavaScript/TypeScript, son langage principal. Pour utiliser Constellation dans d'autres langages informatiques, voir la section sur les [autres langages](/avancé/autresLangages/introduction.md).",
    "ipa/introduction.md.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "ipa/introduction.md.f00b68af3887e20a2dd95fb7c60ccf6c": "Pour ajouter l'IPA de Constellation à votre projet, installez la librarie `@constl/ipa`:",
    "ipa/introduction.md.70447c763fadeb680dc33019bf99386c": "```sh\n$ pnpm add @constl/ipa\n```",
    "ipa/introduction.md.45b58d8b40ea345b859f45496ee33616": "Quelques concepts",
    "ipa/introduction.md.0a2d45b563a5a44fa7a987f5aabb81b2": "Constellation étant une base de données distribuée **et locale**, les données sont immédiatement disponibles sur le dispositif, mais peuvent changer avec le temps si des nouvelles données sont obtenues du réseau. Cette différence avec les bases de données centralisées mène à quelques différences conceptuelles dans notre façon d'écrire le code.",
    "ipa/introduction.md.6c5adaae6e878ee7d2fab4483bc5e971": "Pour obtenir des données d'un système centralisé, on écrirait quelque chose du genre :",
    "ipa/introduction.md.a0190a0f5913d934ea3f2177704923b9": "```TypeScript\nconst BD = ouvrirConnexionÀBaseDeDonnéesÀLautreBoutDuMonde(\"Mon mot de passe\")\n\nconst imageDeProfil = (await BD.rechercher({id: \"ID de compte\"})).image;\n```",
    "ipa/introduction.md.a554ba883164e5f0d5b77ebcd2e28880": "Mais si jamais la personne change son image, nous n'avons aucune façon de le savoir. Il va falloir rafraîchir la page, ou bien faire quelque chose de bien inefficace et laid, et redemander les données à toutes les 5 secondes :",
    "ipa/introduction.md.b0e856d8a4765ed71f4b1b9a894712ee": "```TypeScript\nlet imageDeProfil: string|undefined\nsetInterval(async ()=>{\n    imageDeProfil = (await BD.rechercher({id: \"ID de compte\"})).image;\n}, 5000)\n```",
    "ipa/introduction.md.722db3f93e122433fce2c17e9323be3b": "Constellation est bien plus simple. On ne demande pas à Constellation de nous donner la réponse à notre requète, mais plutôt de nous prévenir chaque fois que la réponse change ! Ça prend un peu de temps à s'y habituer, mais c'est bien plus pratique.",
    "ipa/introduction.md.d95a269e46dd3f001598e2b267144da3": "```TypeScript\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nlet image: Uint8Array | null;\n\nconst oublierImage = await client.profil.suivreImage({ \n    idCompte: \"id du compte qui m'intéresse\",\n    f: x => image = x \n});\n\n// Arrêter le suivi\nawait oublierImage();\n```",
    "ipa/introduction.md.266218bdd2c65376850e9ccda89703d8": "Comme ça, chaque fois que l'image de profil de cette personne changera sur le réseau, vous obtiendrez automagiquement la valeur à jour dans la variable `image`. Notez que chaque fonction de suivi retourne une fonction d'oubli; lorsque vous l'invoquez, le suivi des résultats sera interrompu.",
    "ipa/introduction.md.c6c4da2805eba5a54c6c287a8bb98e14": "Ou bien, si vous préférez un exemple plus complet avec Vue.js :",
    "ipa/introduction.md.e0c29686a28ff48f25e8fc14103669b4": "```Vue\n<template>\n    <img :src=\"imageURL\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { générerClient } from \"@constl/ipa\";\nimport { ref, inject, computed, onMounted, onUnmounted } from \"vue\";\n\nconst client = inject<ClientConstellation>(\"constl\")  // Initialiser le client dans une extention Vue\n\nconst image = ref<Uint8Array | null>();\n\nconst imageURL = computed(() => {\n    if (image.value){\n        return URL.createObjectURL(\n            new Blob([image.value.buffer], { type: `image/png` })\n        );\n    } else {\n        return undefined\n    }\n})\nlet oublierImage: undefined | () => Promise<void>\n\nonMounted(async () => {\n    // Mettre l'image à jour chaque fois qu'elle change\n    oublierImage = await client.profil.suivreImage({ \n        idCompte: \"id du compte qui m'intéresse\",\n        f: x => image.value = x \n    });\n})\nonUnmounted(async () => {\n    // Éviter une fuite de mémoire lorsqu'on ferme la composante\n    if (oublierImage) await oublierImage();\n})\n\n</script>\n\n```",
    "ipa/introduction.md.1ea21417b4fc870a18d6a244983be72b": "Langues",
    "ipa/introduction.md.b99e693df238defb74958595df65a2d7": "Constellation est un logiciel multilingue, et tout peut être traduit, y compris vos données, les noms des variables, et aussi votre profil d'utilisatrice. Constellation utilise les codes de langue [`nuchab'äl`](https://github.com/julienmalard/nuchabal/tree/master) pour identifier les langues.",
    "ipa/introduction.md.3fb01ef070baa3fabcfba56c2c1736f8": "Chiffres",
    "ipa/introduction.md.d1ea4ffafbf457dbbbba6fe9ccca0f92": "Constellation utilise les systèmes de numération du paquet [எண்ணிக்கை](https://github.com/lassi-niruvanam/ennikkai/tree/master/பை/மூலம்/எண்ணிக்கை) pour lire et présenter les numéros en différentes langues.",
    "ipa/licences.md.21e4164bfdb63312a661b92332eedbec": "Licences",
    "ipa/licences.md.01c10c1a04c00801da139ff2f8d9b309": "Constellation vient avec une liste de licences reconnues pour associer à vos bases de données. ",
    "ipa/licences.md.b46b084e00379317a512da4a43d8bbab": ":::tip ASTUCE\nCette liste est également dynamique ; au fur et à mesure que de nouvelles licences sont suggérées par les membres du réseau et puis approuvées, celles-ci apparaîteront automatiquement dans la liste des licences reconnues par Constellation, et ce, sans aucun besoin de mise à jour.",
    "ipa/licences.md.87301ca6ec96f9801ca36a06df595c2b": "Comment est-ce possible ? En utilisant une base de données de Constellation elle-même pour sauvegarder les informations des licences approuvées, bien sûr ! Nous utilisons aussi un petit paquet nommé `கிளி` ([`@lassi-js/kili`](https://www.npmjs.com/package/@lassi-js/kili)) pour syncroniser les suggestions des membres du réseau et gérer leur approbation éventuelle.\n:::",
    "ipa/licences.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/licences.md.47055af394838ac7c6bfc89e6c66ed3b": "Fonctions",
    "ipa/licences.md.418b24959a4cba2dae5d2c038298a115": "`client.licences.suivreLicences({ f })`",
    "ipa/licences.md.4b89b9fa37c3383f1f00bb22afe81a7c": "Suit les licences disponibles sur Constellation.",
    "ipa/licences.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/licences.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/licences.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/licences.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/licences.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/licences.md.a80a45e1a9c1a0f79bfa10d56821a9f8": "`(licences: { [licence: string]: `",
    "ipa/licences.md.42e44cde71636c739ad0fca73e17d690": "`InfoLicence`",
    "ipa/licences.md.b7d7f4a7dcf598e311fa020c747553d1": "#types",
    "ipa/licences.md.e537632233e8740f88ab9650a1ca8a37": "` }) => void`",
    "ipa/licences.md.6caf2a3a9d2e13838bcec3f2ac6ad898": "La fonction qui sera appellée avec la liste des licences reconnues par Constellation chaque fois que celle-ci change.",
    "ipa/licences.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/licences.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/licences.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/licences.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/licences.md.b017d2ba1f0d6bd623c0a6fa63d393a5": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst licences = ref<InfoLicence[]>();\nconst fOublier = await client.licences.suivreLicences({\n    f: x => licence.value = x;\n})\n```",
    "ipa/licences.md.737a60c9a2b09aad6f8f6f6fc66335ff": "`client.licences.suggérerLicence({ code, infoLicence })`",
    "ipa/licences.md.da57a35d161ffc63399b414147330737": "Suggère une nouvelle licence à ajouter à la liste des licences reconnues par Constellation.",
    "ipa/licences.md.2a25578b833922e00b15302907548e4c": ":::warning AVERTISSEMENT\nN'importe qui (oui, toi aussi !) peut suggérer une nouvelle licence à inclure. Si elle est acceptée, elle sera ajoutée à la liste officielle et apparaîtra dans l'interface de Constellation. **Pour être acceptée, la licence doit être libre** ; c'est-à-dire, elle doit permettre la modification et le partage des données qui seront publiées sous cette licence. La licence peut, bien entendu, aussi inclure des limitations ou des conditions associées à ces droits.\n:::",
    "ipa/licences.md.29126a3a52be88127591ae5c23ca88cf": "`code`",
    "ipa/licences.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/licences.md.2aa47ec297df29a0246b3396c6b49ab3": "Un code unique pour identifier cette licence.",
    "ipa/licences.md.89c2d81cea96cd9728990da737bf6a54": "`infoLicence`",
    "ipa/licences.md.95dd74dae8f17bddd7d6793a523c55a9": "Les détails de la licence.",
    "ipa/licences.md.ef70945ab0fbef54959348b2626e6771": "```ts\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.licences.suggérerLicence({\n    code: \"codeDeMaLicence\";\n    \n    // Un petit résumé des caractéristiques de notre licence:\n    infoLicence: {\n        conditions: [\"attribution\", \"partageÉgal\", \"inclureDroitDauteur\"],\n        droits: [\"partager\", \"adapter\", \"usageComercial\"],\n        limitations: [\"aucuneResponsabilité\", \"aucuneGarantie\"],\n        catégorie: \"basesDeDonnées\",\n        spécialisée: false;  // Indique une licence d'usage général (et non spécifique à une organisation ou compagnie)\n    }\n})\n```",
    "ipa/licences.md.8b4258d356d4730ab5798c853214fe49": "`client.licences.effacerSuggestionLicence({ empreinte })`",
    "ipa/licences.md.b46b7089983844afd83cb56d984d011b": "Efface une suggesion de nouvelle licence que vous aviez fait auparavant.",
    "ipa/licences.md.f4f02dc821adc9777eaa1a06be937642": "`empreinte`",
    "ipa/licences.md.5b69dd4667db6f0d0add395ba71dc79d": "L'identifiant unique de votre suggestion.",
    "ipa/licences.md.c6c67ed213ce818d6369db7a53ddc85e": "```ts\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.licences.effacerSuggestionLicence({\n    empreinte: \"codeDeMaSuggestion\"\n})\n```",
    "ipa/licences.md.8895dcbb13ddb8d7984db131459ddf91": "`client.licences.suivreSuggestionsLicences({ f })`",
    "ipa/licences.md.393b5be3fb8bc59f81149ed5f3264d45": "Suit les suggestions faites par les membres du réseau Constellation.",
    "ipa/licences.md.09c6fa96451f251c0e0e77ef17db4142": "`(suggestions: கிளி.பிணையம்_பரிந்துரை<`",
    "ipa/licences.md.779cd190d56ad7eebb9d2064d5052088": "`InfoLicenceAvecCode`",
    "ipa/licences.md.564c4254d92a09c6ba1fa1a065e56193": "`>[]) => void`",
    "ipa/licences.md.93ae66d4fd03d913f25702ef931a562c": "La fonction qui sera appellée avec la liste des suggesions de licences chaque fois que celle-ci change.",
    "ipa/licences.md.9320bfd9567ae7ada5d322c668948e63": "`Promise<{ fOublier: () => Promise<void>, fChangerProfondeur: (n: number) => Promise:void> }>`",
    "ipa/licences.md.736d14d59b989cf9b03c64d96393e996": "Fonctions à appeler pour changer le nombre de résultats ou bien pour arrêter le suivi.",
    "ipa/licences.md.78cb44f76737ca9b2a165d20d6571b85": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type licences } from \"@constl/ipa\";\n\nimport { type பிணையம்_பரிந்துரை } from \"@lassi-js/kili\"\n\nconst client = générerClient({});\n\nconst suggestions: பிணையம்_பரிந்துரை<licences.InfoLicenceAvecCode>[]([]);\nawait client.licences.suivreSuggestionsLicences({\n    f: x => suggestions.value = x,\n});\n```",
    "ipa/licences.md.115a3192156b7366346f8ae972814eeb": "`client.licences.approuverLicence({ suggestion })`",
    "ipa/licences.md.f2f6ea4c40adbea281faa6571dceda84": "Permet d'approuver une suggestion de licence et de l'ajouter à l'interface générale de Constellation.",
    "ipa/licences.md.32d10a1906fef3ed86cb928a2caf66ab": ":::warning AVERTISSEMENT\n**Fonction uniquement disponible si vous avez un accès modérateur à la base de données des licences approuvées par Constellation.** (Si vous n'êtes pas sûr, la réponse est probablement non.)\n:::",
    "ipa/licences.md.2be407bba66c9700ee7da0333aac8af7": "`suggestion`",
    "ipa/licences.md.be14ee626a30595575e0b472e8a1218d": "`கிளி.பிணையம்_பரிந்துரை<`",
    "ipa/licences.md.f2b733eba48801518e62e5a932471ec1": "`InfoLicenceAvecId`",
    "ipa/licences.md.54f767565a8e4eb4e6a46684f0b8eba9": "`>`",
    "ipa/licences.md.0b501690d7aad27ab53b2fe21fb9e52a": "La suggestion de licence.",
    "ipa/licences.md.c8a03477505d788b0a0c83474f7e9ac7": "```ts\n// ... continuant de ci-dessus...\n\nconst toutApprouver = async () => {\n    await Promise.all(\n        suggestions.value.map(\n            suggestion => client.licences.approuverLicence({ suggestion })\n        )\n    );\n}\n\n```",
    "ipa/licences.md.c95c816d0fe4cf264dcd83373ab647dc": "Licences disponibles",
    "ipa/licences.md.01300818f6f931d3e4b6a944c7492923": "Les licences suivantes sont reconnues par Constellation.",
    "ipa/licences.md.8ab8b48d741747f83cbb4533f2869a2c": ":::tip ASTUCE\nVous pouvez bien sûr inclure utiliser d'autres licences, mais seulement celles identifiées ci-dessous seront reconnues par l'interface de l'appli Constellation.\n:::",
    "ipa/licences.md.9fc273263402a762c73814f745a7131b": "Licences pour bases de données (recommendées)",
    "ipa/licences.md.9bc73ad7148d123864490f5c3275b0ed": "* `ODbl-1_0`\n* `ODC-BY-1_0`\n* `PDDL`\n* `rvca-open`",
    "ipa/licences.md.4bf4d37af9feed36f7cc8ee05dd6ced9": "Licences artistiques",
    "ipa/licences.md.740e0911366034167013935f7462c69f": "Celles-ci sont plus appropriées pour les images, vidéo ou autre expression artistique.",
    "ipa/licences.md.dfd3cc532e57a528c15f47ebcbcdf72e": "* `CC-BY-SA-4_0`\n* `CC-BY-4_0`\n* `CC-0-1_0`",
    "ipa/licences.md.7dd36310f195c076d2ec0842c0cd4b4a": "Licences de code",
    "ipa/licences.md.c469cb23307fb3f51d77a31c52fc0284": "Ces licences furent développées pour le code informatique.",
    "ipa/licences.md.5cac64889a6a2b1b388ef2add3782c24": "* `0bsd`\n* `afl-3_0`\n* `agpl-3_0`\n* `apache-2_0`\n* `artistic-2_0`\n* `bsd-2-clause`\n* `bsd-3-clause-clear`\n* `bsd-3-clause`\n* `bsd-4-clause`\n* `bsl-1_0`\n* `cecill-2_1`\n* `ecl-2_0`\n* `epl-1_0`\n* `epl-2_0`\n* `eupl-1_0`\n* `eupl-1_2`\n* `gpl-2_0`\n* `gpl-3_0`\n* `isc`\n* `lgpl-2_1`\n* `lgpl-3_0`\n* `lppl-1_3c`\n* `mit-0`\n* `mit`\n* `mpl-2_0`\n* `ms-pl`\n* `ms-rl`\n* `mulanpsl-2_0`\n* `ncsa`\n* `osl-3_0`\n* `postgresql`\n* `unlicence`\n* `upl-1_0`\n* `vim`\n* `wtfpl`\n* `zlib`\n* `ofl-1_1`",
    "ipa/licences.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/licences.md.320aa2b48d75f2ff93bdeaada78907ac": "```ts\ntype InfoLicence = {\n  conditions: condition[];\n  droits: string[];\n  limitations: string[];\n  catégorie: catégorie;\n  spécialisée?: boolean;\n}\n\ntype InfoLicenceAvecId = InfoLicence & { id: string };\n\ntype condition = \"attribution\" | \"partageÉgal\" | \"inclureDroitDauteur\" | \"indiquerChangements\" | \"partagerCodeSource\" | \"usagereseau\";\ntype droit = \"partager\" | \"adapter\" | \"usageComercial\" | \"usagePrivé\" | \"usageBrevets\";\ntype limitation =  \"aucuneResponsabilité\" | \"aucuneGarantie\" | \"marqueCommerce\" | \"brevetExclu\" | \"sousLicence\";\ntype catégorie = \"basesDeDonnées\" | \"artistique\" | \"codeInformatique\" | \"autre\";\n\n```",
    "ipa/motsClefs.md.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "ipa/motsClefs.md.9905e1e1759bb4669d3101288c7203f3": "Les mots-clefs peuvent s'associer à une [base de données](./bds.md), à un [projet](./projets.md) ou à une [nuée](./nuées.md) et servent pour indexer et retrouver les données dans le réseau Constellation.",
    "ipa/motsClefs.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/motsClefs.md.cbf5d231135412fb14429e086c09a722": "Général",
    "ipa/motsClefs.md.5530f83e2b4b8dd44c07f3a0d6ba306f": "Actions générales pour gérer vos mot-clefs.",
    "ipa/motsClefs.md.2604b4d7ef56fc244ea80101b3955fe1": "`client.motsClefs.suivreMotsClefs({ f })`",
    "ipa/motsClefs.md.cc490a605c7503f77b0cdbb3bc16f610": "Recherche les mots-clefs appartenant au compte présent. Pour rechercher des mots-clefs d'autres utilisateurs sur le réseau Constellation, voir la section [réseau](./réseau.md).",
    "ipa/motsClefs.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/motsClefs.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/motsClefs.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/motsClefs.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/motsClefs.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/motsClefs.md.9b6014625768a05b681dedfe2ec7d7eb": "`(motsClefs: string[]) => void`",
    "ipa/motsClefs.md.331f8f8923b893a7e45a2c04e92f2c3d": "Cette fonction sera appelée avec la liste des identifiants des mot-clefs chaque fois que celle-ci est modifiée.",
    "ipa/motsClefs.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/motsClefs.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/motsClefs.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/motsClefs.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/motsClefs.md.9857fc0beee7a02d9bd28185b3b17899": "```ts\nimport { ref } from \"vue\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst motsClefs = ref<string[]>();\nawait client.motsClefs.suivreMotsClefs({ f: x => motsClefs.value = x });\n\n```",
    "ipa/motsClefs.md.97cd582dd3f422a09e3e10a6af66ad0a": "`client.motsClefs.créerMotClef()`",
    "ipa/motsClefs.md.d7fdb62a8bdcd5c461d44f74bd22caba": "Crée un nouveau mot-clef.",
    "ipa/motsClefs.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/motsClefs.md.98f6fac72b940095829c3df384ec1791": "L'identifiant du nouveau mot-clef.",
    "ipa/motsClefs.md.4f3ea12113ddd62c5d4d5c4775b533ab": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\n\n```",
    "ipa/motsClefs.md.d8a18e7cb9e76bfbd1a7f36727de68fa": "`client.motsClefs.copierMotClef({ idMotClef })`",
    "ipa/motsClefs.md.86c904d1a69321574ebcb86f57e79a4f": "Crée une copie d'un mot-clef.",
    "ipa/motsClefs.md.d523bae0c6465e39b331c6733d75e69e": "`idMotClef`",
    "ipa/motsClefs.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/motsClefs.md.6793bbe42229b3b157c244ddd0ff37ed": "L'identifiant du mot-clef à copier.",
    "ipa/motsClefs.md.f209de57692df5cb0afa5ed7fdb6a437": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nconst idCopie = await client.motsClefs.copierMotClef({ idMotClef });\n\n```",
    "ipa/motsClefs.md.f00c2501b5eca06af67409b98bac6448": "`client.motsClefs.inviterAuteur({ idMotClef, idCompteAuteur, rôle })`",
    "ipa/motsClefs.md.c6706bb800f8c92fbbb8db51f2a14d3a": "Inviter une autre utilisatrice à modifier un mot-clef vous appartenant. Attention ! Une fois invitée, une personne ne peut pas être désinvitée.",
    "ipa/motsClefs.md.bed2cdfe815f75d420e612df781a5d94": "L'identifiant du mot-clef.",
    "ipa/motsClefs.md.5f523e9c641763878a7c1d58f7ff551a": "`idCompteAuteur`",
    "ipa/motsClefs.md.0b22551d38821b87dd5f2d8afb54bf99": "L'identifiant du compte de la personne à inviter.",
    "ipa/motsClefs.md.0aba6bfc2bc9746b9de9cf27f5bf563b": "`rôle`",
    "ipa/motsClefs.md.1b759b5f078d84d684dae5a31e658568": "`\"MODÉRATEUR\"",
    "ipa/motsClefs.md.fc07da5e3e15db4bea9077d0c20d9797": "\"MEMBRE\"`",
    "ipa/motsClefs.md.369c8ba1d3302f5de86fc7db25908305": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.inviterAuteur({ \n    idMotClef, \n    idCompteAuteur: \"idDuCompteDeMonAmiÀQuiJeFaisConfiance\",\n    rôle: \"MODÉRATEUR\" \n});\n\n```",
    "ipa/motsClefs.md.ea2d93d6aa8ec487de84f61337cfc9aa": "`client.motsClefs.effacerMotClef({ idMotClef })`",
    "ipa/motsClefs.md.8fead6b54b341f87b45ca13d8c32f683": "Effacer un mot-clef. Étant donné la structure distribuée de Constellation, cette action effacera le mot-clef de votre dispositif, mais ne pourra pas forcer les autres membres du réseau à l'effacer également.",
    "ipa/motsClefs.md.1d3a7d99854578f388ffc170e04795dc": "L'identifiant du mot-clef à effacer.",
    "ipa/motsClefs.md.13b2eb37416b9fd3ab29b44d167cf49c": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.effacerMotClef({ idMotClef });\n\n```",
    "ipa/motsClefs.md.4e85d398fef1f7b1232df6be43f4ea61": "`client.motsClefs.suivreQualitéMotClef({ idMotClef })`",
    "ipa/motsClefs.md.adc23179c94c3eaa3917ff6d31749169": "Suivre une mesure (subjective, de 0 à 1) de la qualité d'un mot-clef. 1 indique la meilleure qualité.",
    "ipa/motsClefs.md.013ed850c5ad93072899dd415f3953ad": "`(qualité: number) => void`",
    "ipa/motsClefs.md.3ed5299be2281f4cb3fae755bc132f13": "Une fonction qui sera appelée avec la qualité du mot-clef chaque fois que celle-ci change.",
    "ipa/motsClefs.md.bc6381cecabca9cb249f7480bbbe377b": "```ts\nimport { ref } from \"vue\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\n\nconst qualité = ref<number>();\nconst fOublierSuivi = await client.motsClefs.suivreQualitéMotClef({ \n    idMotClef,\n    f: x => qualité.value = x\n});\n\n```",
    "ipa/motsClefs.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/motsClefs.md.9e85b9ce1568bac9b9a38adc8ff56847": "Dans Constellation, chaque mot-clef est défini par un code identifiant et peut ensuite être nommé dans autant de langues que vous le souhaitez.",
    "ipa/motsClefs.md.70ec0e8dcbc0442e5f14d68fe33e818c": "`client.motsClefs.sauvegarderNomMotClef({ idMotClef, langue, nom })`",
    "ipa/motsClefs.md.5c60c4b00cfe0a62e674ce41e44953b7": "Sauvegarde le nom du mot-clef dans une langue donnée.",
    "ipa/motsClefs.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/motsClefs.md.8924f96ab7e65328690ac00c9bc6e052": "Le nom du mot-clef.",
    "ipa/motsClefs.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/motsClefs.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/motsClefs.md.a3eeed8a1b2740d939c8606bd68da74f": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({\n    idMotClef, \n    langue: \"fr\", \n    nom: \"Hydrologie\" \n});\n\n```",
    "ipa/motsClefs.md.066a16e0357de1749452dbd8d140cea7": "`client.motsClefs.sauvegarderNomsMotClef({ idMotClef, noms })`",
    "ipa/motsClefs.md.746c1ec469dcf4aab49ab11a34efa0b1": "Sauvegarde le nom du mot-clef dans plusieurs langues en même temps.",
    "ipa/motsClefs.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/motsClefs.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/motsClefs.md.b121231d2762d793b2e8450c1d0b1086": "Les noms du mot-clef, indexés par langue.",
    "ipa/motsClefs.md.916dcb5bcf99384f51c391bc85b7f403": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomsMotClef({ \n    idMotClef, \n    noms: { fr: \"Hydrologie\", த: \"நீரியல்\"}\n});\n\n```",
    "ipa/motsClefs.md.32aff62dc0863d090e73072b54160adb": "`client.motsClefs.effacerNomMotClef({ idMotClef, langue })`",
    "ipa/motsClefs.md.b4ec23b8e62d9efe19a2d4e0adc68b93": "Efface la traduction du nom du mot-clef dans une langue donnée.",
    "ipa/motsClefs.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/motsClefs.md.518cd81dda5c006dae530727d3c97061": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.effacerNomMotClef({ idMotClef, langue: \"fr\" });\n```",
    "ipa/motsClefs.md.05c4c8259661dd3d44736880d3181dc6": "`client.motsClefs.suivreNomsMotClef({ idMotClef, f })`",
    "ipa/motsClefs.md.63b216133f3607398af289a9bd4c0fee": "Suit les noms (traduits en différentes langues) du mot-clef.",
    "ipa/motsClefs.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/motsClefs.md.326ab3b5011ffd167fc5617111268c1d": "Une fonction qui sera appelée avec les noms du mot-clef chaque fois qu'ils changent",
    "ipa/motsClefs.md.3d3daa26bc56c568116ffa0fd720bc22": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\n\nconst fOublierNoms = await client.motsClefs.suivreNomsMotClef({ \n    idMotClef,\n    f: async noms => {\n        console.log(noms);\n        await fOublierNoms();\n    }\n});\n\nawait client.motsClefs.sauvegarderNomsMotClef({ \n    idMotClef, \n    noms: { fr: \"Hydrologie\", த: \"நீரியல்\"}\n});\n\n```",
    "ipa/motsClefs.md.8bc84316c4078bf66723fd019616d920": "Descriptions",
    "ipa/motsClefs.md.2cb5ba92eb8660e8c5538d18a2cc3a36": "Dans Constellation, chaque mot-clef peut aussi être accompagné d'une description plus informative.",
    "ipa/motsClefs.md.ba7e4e6917450cebcc39bc44bbe07849": "`client.motsClefs.sauvegarderDescriptionMotClef({ idMotClef, langue, nom })`",
    "ipa/motsClefs.md.3fe2f2e262156ddde98190fa91a5e130": "Sauvegarde la description du mot-clef dans une langue donnée.",
    "ipa/motsClefs.md.831669deb653fd69299f4826920d7f17": "`description`",
    "ipa/motsClefs.md.7d289a09c2f2c05e258f2b3b598c59dc": "La description du mot-clef.",
    "ipa/motsClefs.md.5cfad0ff573229b4d10313e00a0b7268": "La langue de la description.",
    "ipa/motsClefs.md.0e75fe4fe70394975aa477d05fc9b0d2": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderDescriptionMotClef({\n    idMotClef, \n    langue: \"fr\", \n    description: \"Données hydrologiques, telles les données fluviales, météorologiques, et autres.\" \n});\n\n```",
    "ipa/motsClefs.md.6e2317b89ec4c70fe8fc8869cfe2744e": "`client.motsClefs.sauvegarderDescriptionsMotClef({ idMotClef, descriptions })`",
    "ipa/motsClefs.md.54db03d40f19451081b41df3db7d8c68": "Sauvegarde la description d'un mot-clef dans plusieurs langues en même temps.",
    "ipa/motsClefs.md.83246462d80faadb74ad1977ac553044": "`descriptions`",
    "ipa/motsClefs.md.4c168085c74a1b2d458e864b4a3452ca": "Les descriptions du mot-clef, indexées par langue.",
    "ipa/motsClefs.md.5d2fad20eee40bbdf6d5ebe92299110b": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderDescriptionsMotClef({ \n    idMotClef, \n    descriptions: { \n        fr: \"Données hydrologiques ou météorologiques\", \n        த: \"நீரியல் மற்றும் வானிலையியல் தகவல்கள்\"\n    }\n});\n\n```",
    "ipa/motsClefs.md.aab3e6cdae735535ad1f2e61d4349140": "`client.motsClefs.effacerDescriptionMotClef({ idMotClef, langue })`",
    "ipa/motsClefs.md.77b0cb4af9bd54783f3435a161b028f1": "Efface la traduction d'une description du mot-clef dans une langue donnée.",
    "ipa/motsClefs.md.4339b0b170bd749fed35ca6254907a0b": "La langue dont ont doit effacer la description.",
    "ipa/motsClefs.md.c3e5c9bf74c467a11728b9abe7e9ba87": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.effacerDescriptionMotClef({ idMotClef, langue: \"fr\" });\n```",
    "ipa/motsClefs.md.cab95338d808429f306595b47fcfb777": "`client.motsClefs.suivreDescriptionsMotClef({ idMotClef, f })`",
    "ipa/motsClefs.md.e43eec93873a511a3e5807fa87dfbc2d": "Suit les descriptions (traduites en différentes langues) du mot-clef.",
    "ipa/motsClefs.md.551a01fe6f185fb4ea5c0cd0c9f7e841": "`(descriptions: { [langue: string]: string }) => void`",
    "ipa/motsClefs.md.e7fd00034e7529e565b1b74b030c37fe": "Une fonction qui sera appelée avec les descriptions du mot-clef chaque fois qu'elles changent",
    "ipa/motsClefs.md.511eccc7af1689e828586b94091f6d46": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idMotClef = await client.motsClefs.créerMotClef();\n\nconst fOublierDescriptions = await client.motsClefs.suivreDescriptionsMotClef({ \n    idMotClef,\n    f: async descrs => {\n        console.log(descrs);\n        await fOublierDescriptions();\n    }\n});\n\nawait client.motsClefs.sauvegarderDescriptionMotClef({ \n    idMotClef, \n    langue: \"fr\",\n    description: \"Données hydrologiques\"\n});\n\n```",
    "ipa/nuées.md.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "ipa/nuées.md.90eab752f31b5205b35bcd8ecc3c3b8c": "Les nuées de données Constellation permettent de regrouper des données, toutes suivant la même structure de données, provenant de différentes utilisatrices. Elles vous permettent de visualiser et partager, dans un seul tableau, des données provenant de personnes différentes, et aussi de décider les conditions d'accès (ouverte ou par invitation). ",
    "ipa/nuées.md.cfc6ab4ccb90b0e86e656882bf714295": "Les nuées sont très utiles pour les projets de science citoyenne.",
    "ipa/nuées.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/nuées.md.cbf5d231135412fb14429e086c09a722": "Général",
    "ipa/nuées.md.01944179a1afa2387cbcb9240321ec58": "Actions générales pour gérer vos nuées.",
    "ipa/nuées.md.6271504133e6bf90b73d59196e927f5b": "`client.nuées.suivreNuées({ f })`",
    "ipa/nuées.md.241e9395f2d991b64cd49bb2d1f6cb24": "Recherche les nuées appartenant au compte présent. Pour rechercher des nuées d'autres utilisateurs sur le réseau Constellation, voir la section [réseau](./réseau.md).",
    "ipa/nuées.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/nuées.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/nuées.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/nuées.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/nuées.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/nuées.md.4215a3a4e078b3d2877fa0a261a4faea": "`(nuées: string[]) => void`",
    "ipa/nuées.md.28e209e48976dd1e97c9ff9fed5c45a1": "Cette fonction sera appelée avec la liste des identifiants des nuées chaque fois que celle-ci est modifiée.",
    "ipa/nuées.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/nuées.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/nuées.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/nuées.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/nuées.md.2f9049b59985ba97543dc8416f9d0b46": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst nuées = ref<string[]>();\nawait client.nuées.suivreNuées({ f: x => nuées.value = x });\n\n```",
    "ipa/nuées.md.a098586ec85d603fd5e4ddc238af4492": "`client.nuées.créerNuée({ autorisation, nuéeParent })`",
    "ipa/nuées.md.c17f8a07da1a7c98a05a7d5fa476d7f5": "Créer une nouvelle nuée.",
    "ipa/nuées.md.9a403090d77e292083b1a362ea4f80e7": "`autorisation`",
    "ipa/nuées.md.80b5b65a663340ad22236c71f7f6a701": "`string | \"IJPC\" | \"CJPI\" | undefined`",
    "ipa/nuées.md.9ed93f3e9d66d36969bcead0d4995102": "La stratégie d'autorisation pour participer à la nuée. Voir la section ",
    "ipa/nuées.md.5658ee9a4112bff02a279ec16f598f05": "accès",
    "ipa/nuées.md.3b390f73c2bd60856875a10b419980a4": "#acces-et-permissions",
    "ipa/nuées.md.0eb3f6529f7360f491fef0f934b6e9ab": " pour plus d'information. ",
    "ipa/nuées.md.2780e430a42f490bc2763126d21b02c0": " peut aussi être un identifiant orbite d'une stratégie d'autorisation déjà existante.",
    "ipa/nuées.md.b5d01e3079d972c0de401034e5439651": "`nuéeParent`",
    "ipa/nuées.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/nuées.md.e6100b2f432f763fd9e6905883421d4c": "Si cette nuée doit hériter d'une nuée existante, l'identifiant de cette dernière.",
    "ipa/nuées.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/nuées.md.4b615999fbb186e1f6e93dd990747bee": "L'identifiant de la nouvelle nuée.",
    "ipa/nuées.md.681dbab4e14d138b23b31e2dcda25a08": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ autorisation: \"CJPI\" });\n\n```",
    "ipa/nuées.md.1127a35a216babbf845b61443b1c43c8": "`client.nuées.copierNuée({ idNuée })`",
    "ipa/nuées.md.64b5d8b9c5876bce7ee40c8c3326e8bb": "Crée une copie d'une nuée.",
    "ipa/nuées.md.1a4d911c2dc6208111919d9564d8dace": "`idNuée`",
    "ipa/nuées.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/nuées.md.4e504b4f0b7c2e1aca71438bbf4222b9": "L'identifiant de la nuée à copier.",
    "ipa/nuées.md.2150ef9f5556a8a0d171a3b31a3b11e5": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\nconst idCopie = await client.nuées.copierNuée({ idNuée });\n\n```",
    "ipa/nuées.md.24d0397358608a6a4bc305b21db3623c": "`client.nuées.générerDeBd({ idBd })`",
    "ipa/nuées.md.5d9e079c330298c31296291e1bb26b57": "Génère une nuée structurée selon une base de données existante.",
    "ipa/nuées.md.a8dd721bfdcfe47a74f607a6003feefe": "`idBd`",
    "ipa/nuées.md.c645a97ae2a026cbbd9077fd5d91cac0": "L'identifiant de la base de données de référence.",
    "ipa/nuées.md.791dbf05abf01d8a1930f1a5d29814ad": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\n// Créer une base de données\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariableDate = await client.variables.créerVariable({ catégorie: \"horoDatage\" });\nconst idVariablePhoto = await client.variables.créerVariable({ catégorie: \"image\" });\nawait client.tableaux.ajouterColonneTableau({ \n    idTableau, \n    idVariable: idVariableDate \n});\nawait client.tableaux.ajouterColonneTableau({ \n    idTableau, \n    idVariable: idVariablePhoto \n});\n\n// Créer une nuée correspondante\nconst idNuée = await client.nuées.générerDeBd({ idBd });\n```",
    "ipa/nuées.md.d0e5c7087f6e020ab88fd567fcf3797d": "`client.nuées.générerSchémaBdNuée({ idNuée, licence })`",
    "ipa/nuées.md.17f838019eaea9cf9d335c63398a4eba": "Génère un [schéma de base de données](bds.md#types-schema-bd) correspondant à la structure de la nuée, qui peut ensuite être utilisé pour générer des bases de données conformes à la nuée.",
    "ipa/nuées.md.34046c2d17a235664c6f3fedc6b9a99e": "L'identifiant de la nuée de référence.",
    "ipa/nuées.md.7bc5ef99b276b3a049d9347cf76609ab": "`licence`",
    "ipa/nuées.md.f316ef34364e55da428353814c462236": "La ",
    "ipa/nuées.md.05b782695ba466e53e91ee5a9cfb3456": "licence",
    "ipa/nuées.md.907c20067c2e3c2126bd13fb67f18a10": "./licences.md#licences-disponibles",
    "ipa/nuées.md.0d367a975ff3f935e3ef05a0801afb6b": " sous laquelle les bases de données correspondant au schéma devraient être créées.",
    "ipa/nuées.md.0ddb7fc27f94a2e9ca55a997d2bdef8b": "`Promise<`",
    "ipa/nuées.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/nuées.md.2060070c0d2bf8e1d43864874e8c583f": "`bds.schémaSpécificationBd`",
    "ipa/nuées.md.22d8b0e99557475e3028b36adad71d8f": "./bds.md#types-schema-bd",
    "ipa/nuées.md.8d456518bf85794065b91615ec8c843d": "` >`",
    "ipa/nuées.md.156bcf31334030c301b37fe099e67947": "Le schéma de la nuée.",
    "ipa/nuées.md.0c35a3976f55ae6bbc1ec8949ede7487": "```ts\n// ...continuant de ci-dessus...\nconst schéma = await client.nuées.générerSchémaBdNuée({ \n    idNuée, \n    licence: \"ODbl-1_0\" \n});\n```",
    "ipa/nuées.md.d18dbf9e5f15a0773b57251a58457149": "`client.nuées.inviterAuteur({ idNuée, idCompteAuteur, rôle })`",
    "ipa/nuées.md.291a558d689aac23db772bcbb5e8fe83": "Inviter une autre utilisatrice à modifier une nuée qui vous appartient. Attention ! Une fois invitée, une personne ne peut pas être désinvitée.",
    "ipa/nuées.md.ddf47a58d4406af6ec6455474bc5aa51": ":::tip CONSEIL\nCette action autorise la modification de la spécification de la nuée. Les auteurs que vous invitez ainsi pourront modifier la nuée elle-même, donc son nom, sa structure et ses règles de contribution de données. Si vous voulez au contraire uniquement autoriser (ou non) quelque à contribuer des données à la nuée, voir la section [accès et permissions](#acces-et-permissions) à la place.\n:::",
    "ipa/nuées.md.6f7a6f001d3bb84bd6c61af3e8d14db0": "L'identifiant de la nuée.",
    "ipa/nuées.md.5f523e9c641763878a7c1d58f7ff551a": "`idCompteAuteur`",
    "ipa/nuées.md.0b22551d38821b87dd5f2d8afb54bf99": "L'identifiant du compte de la personne à inviter.",
    "ipa/nuées.md.0aba6bfc2bc9746b9de9cf27f5bf563b": "`rôle`",
    "ipa/nuées.md.1b759b5f078d84d684dae5a31e658568": "`\"MODÉRATEUR\"",
    "ipa/nuées.md.fc07da5e3e15db4bea9077d0c20d9797": "\"MEMBRE\"`",
    "ipa/nuées.md.dd39cb00e70972a891c88f42d560c4da": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerBd({ });\nawait client.nuées.inviterAuteur({ \n    idNuée, \n    idCompteAuteur: \"idDuCompteDeMonAmieÀQuiJeFaisTrèsConfiance\",\n    rôle: \"MODÉRATEUR\" \n});\n\n```",
    "ipa/nuées.md.b9029b08d31922adf8a7cfb065f91662": "`client.nuées.effacerNuée({ idNuée })`",
    "ipa/nuées.md.81a11409ffd449ba77abf98bde5df2c4": "Effacer une nuée. Étant donné la structure distribuée de Constellation, cette action effacera la nuée de votre dispositif, mais ne pourra pas forcer les autres membres du réseau à l'effacer également.",
    "ipa/nuées.md.2913c9c06348f4cc50626e486c290601": "L'identifiant de la nuée à effacer.",
    "ipa/nuées.md.8fbe8f851c9e9c9d94e6cf2fa280aadf": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.bds.créerNuée({  });\nawait client.nuées.effacerNuée({ idNuée });\n\n```",
    "ipa/nuées.md.61ffc51cc58b6bb6b8419822aa9c18cb": "`client.nuées.suivreQualitéNuée({ idNuée, f })`",
    "ipa/nuées.md.1924e4ab431a92f7ed48a95e0c2b9b5f": "Suivre une mesure (subjective, de 0 à 1) de la qualité d'une nuée. 1 indique la meilleure qualité.",
    "ipa/nuées.md.013ed850c5ad93072899dd415f3953ad": "`(qualité: number) => void`",
    "ipa/nuées.md.e5b73d7cbbb6e7183c4763cebb5079d0": "Une fonction qui sera appelée avec la qualité de la nuée chaque fois que celle-ci change.",
    "ipa/nuées.md.7f8f391bfb5a8f16330a3b9ac174792d": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type bds } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\n\nconst qualité = ref<number>();\nconst fOublierSuivi = await client.nuées.suivreQualitéNuée({ \n    idNuée,\n    f: x => qualité.value = x\n});\n\n```",
    "ipa/nuées.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/nuées.md.2f800f7a9181a0a4e9461dadc111ac31": "Dans Constellation, chaque nuée est définie par un code identifiant et peut ensuite être nommée dans autant de langues que vous le souhaitez.",
    "ipa/nuées.md.f6679906e18db90ef31ad39bd3c28c87": "`client.nuées.suivreNomsNuée({ idNuée, f })`",
    "ipa/nuées.md.0efd5ff426c4e8baebec00d3063aa4d0": "Suit les noms (traduits en différentes langues) de la nuée.",
    "ipa/nuées.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/nuées.md.c9db52f6a96301ef0f5343fc1031ab10": "Une fonction qui sera appelée avec les noms de la nuée chaque fois qu'ils changent",
    "ipa/nuées.md.0d4cc547cf9ab475ef5648c180285b6f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\n\nconst noms = ref<{[langue: string]: string}>();\nconst fOublierNoms = await client.nuées.suivreNomsNuée({ \n    idNuée,\n    f: x => noms.value = x,\n});\n\nawait client.nuées.sauvegarderNomsNuée({ \n    idNuée, \n    noms: { \n        fr: \"Science citoyenne fleuve Saint-Laurent\", \n        த: \"ஸைன் லொரான் ஆற்றில் கூடிமக்கள் அறிவியல்\"\n    }\n});\n\n```",
    "ipa/nuées.md.60c48152489a0651ec7563ca3a4bad9e": "`client.nuées.sauvegarderNomNuée({ idNuée, langue, nom })`",
    "ipa/nuées.md.810f9c1b102ae7466f2769043506a4a9": "Sauvegarde le nom de la nuée dans une langue donnée.",
    "ipa/nuées.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/nuées.md.88df6dd562e6366038b6460557fec490": "Le nom de la nuée.",
    "ipa/nuées.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/nuées.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/nuées.md.128b15ae61d5fc77a8041e0abecd99ac": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\nawait client.nuées.sauvegarderNomNuée({\n    idNuée, \n    langue: \"fr\", \n    nom: \"Science citoyenne fleuve Saint-Laurent\" \n});\n\n```",
    "ipa/nuées.md.f3653ab38fdd97e6918a0b4b9ce3bd64": "`client.nuées.sauvegarderNomsNuée({ idNuée, noms })`",
    "ipa/nuées.md.8155914938d7cef9c96428ae5ac5205e": "Sauvegarde le nom de la nuée dans plusieurs langues en même temps.",
    "ipa/nuées.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/nuées.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/nuées.md.d98f1cd1972a61c77149473888d9f634": "Les noms de la nuée, indexés par langue.",
    "ipa/nuées.md.0d94c5f33b159f30713b3750f96c7946": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.nuées.créerNuée({ });\nawait client.nuées.sauvegarderNomsNuée({ \n    idBd, \n    noms: { \n        fr: \"Science citoyenne fleuve Saint-Laurent\", \n        த: \"ஸைன் லொரான் ஆற்றில் கூடிமக்கள் அறிவியல்\"\n    }\n});\n\n```",
    "ipa/nuées.md.2e62eab360cef9b046df31b302135b38": "`client.nuées.effacerNomNuée({ idNuée, langue })`",
    "ipa/nuées.md.d494b12dc754a72df78d9152b6ca75c9": "Efface la traduction du nom de la nuée dans une langue donnée.",
    "ipa/nuées.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/nuées.md.7fc32b564a2b8532e42925385113d92f": "```ts\n// ...continuant de ci-dessus...\nawait client.nuées.effacerNomNuée({ idNuée, langue: \"fr\" });\n```",
    "ipa/nuées.md.8bc84316c4078bf66723fd019616d920": "Descriptions",
    "ipa/nuées.md.dba4278d08c9c116d58d3044dcf3e658": "Dans Constellation, chaque nuée peut aussi être accompagnée d'une description plus informative.",
    "ipa/nuées.md.85508b20248b9b5c79eff8a151a51e24": "`client.nuées.sauvegarderDescriptionNuée({ idNuée, langue, nom })`",
    "ipa/nuées.md.12cdd453d18ff8c8811179748e909335": "Sauvegarde la description de la nuée dans une langue donnée.",
    "ipa/nuées.md.831669deb653fd69299f4826920d7f17": "`description`",
    "ipa/nuées.md.c0db251257a59a7bede9624e6058a136": "La description de la nuée.",
    "ipa/nuées.md.5cfad0ff573229b4d10313e00a0b7268": "La langue de la description.",
    "ipa/nuées.md.cc24e38b1854047605ed36a68ac2adb3": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\nawait client.nuée.sauvegarderDescriptionNuée({\n    idNuée, \n    langue: \"fr\", \n    description: \"Données d'observations citoyennes de la qualité de l'eau du fleuve Saint-Laurent.\" \n});\n\n```",
    "ipa/nuées.md.ca82b05b641a343ae0d29059f4313fcc": "`client.nuées.sauvegarderDescriptionsNuée({ idNuée, descriptions })`",
    "ipa/nuées.md.2352445a470001d7cb19b789203dd6da": "Sauvegarde la description d'une nuée dans plusieurs langues en même temps.",
    "ipa/nuées.md.83246462d80faadb74ad1977ac553044": "`descriptions`",
    "ipa/nuées.md.f6b7d539cd6b512ebd8ec57894e3aa70": "Les descriptions de la nuée, indexées par langue.",
    "ipa/nuées.md.6ec38a4b81800d8863b8f21f76bb3e71": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\nawait client.nuées.sauvegarderDescriptionsNuée({ \n    idNuée, \n    descriptions: { \n        fr: \"Données d'observations citoyennes de la qualité de l'eau du fleuve Saint-Laurent.\", \n        த: \"ஸென் லொரான் ஆற்றின் நீர் தரத்தைப் பற்றி பங்களிப்பாளர்களால் கண்டுப்பிட்டத்த கண்காணிப்புகள்.\"\n    }\n});\n\n```",
    "ipa/nuées.md.172e2e028a29d1c6afaddeacf7e5bbcc": "`client.nuées.effacerDescriptionNuée({ idNuée, langue })`",
    "ipa/nuées.md.c6b90278c76c0ec82641da7974d5ed0d": "Efface la traduction d'une description de la nuée dans une langue donnée.",
    "ipa/nuées.md.4339b0b170bd749fed35ca6254907a0b": "La langue dont ont doit effacer la description.",
    "ipa/nuées.md.bd8aec389ff61aebe72824656c4562b6": "```ts\n// ...continuant de ci-dessus...\nawait client.nuées.effacerDescriptionNuée({ idNuée, langue: \"fr\" });\n```",
    "ipa/nuées.md.3fe9408aef24ecd3dafbae2e15f9d79d": "`client.nuées.suivreDescriptionsNuée({ idNuée, f })`",
    "ipa/nuées.md.91df2a558b0d5ef2a40415f0b4a36b32": "Suit les descriptions (traduites en différentes langues) de la nuée.",
    "ipa/nuées.md.551a01fe6f185fb4ea5c0cd0c9f7e841": "`(descriptions: { [langue: string]: string }) => void`",
    "ipa/nuées.md.c5f412079d5421920ef487d9085d085a": "Une fonction qui sera appelée avec les descriptions de la nuée chaque fois qu'elles changent.",
    "ipa/nuées.md.df99096bbf6389f65b28063c4247f319": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";à\n\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\n\nconst descriptions = ref<{ [langue: string]: string }>();\nconst fOublierDescriptions = await client.nuées.suivreDescriptionsNuée({ \n    idNuée,\n    f: x => descriptions.value = x,\n});\n\nawait client.nuées.sauvegarderDescriptionsNuée({ \n    idNuée, \n    descriptions: { \n        fr: \"Données d'observations citoyennes de la qualité de l'eau du fleuve Saint-Laurent.\", \n        த: \"ஸென் லொரான் ஆற்றின் நீர் தரத்தைப் பற்றி பங்களிப்பாளர்களால் கண்டுப்பிட்டத்த கண்காணிப்புகள்.\"\n    }\n});\n\n```",
    "ipa/nuées.md.be53a0541a6d36f6ecb879fa2c584b08": "Image",
    "ipa/nuées.md.305a36c38e616f81c9b4a636a4f132ed": "Les nuées peuvent être avoir une image décorative qui apparaîtra sur l'interface.",
    "ipa/nuées.md.c1990608fa3c728a34336a066e7390d5": "`client.nuées.sauvegarderImage({ idNuée, image })`",
    "ipa/nuées.md.b1fe034bcb6346160b1a97adecf6e6ec": "Sauvegarde une image décorative.",
    "ipa/nuées.md.a94480ce7c3cee3a35330c424305586e": "`image`",
    "ipa/nuées.md.76705eee3297a07ed0ae3723e378f96d": "`import(\"ipfs-core-types/src/utils\").ImportCandidate`",
    "ipa/nuées.md.ed7742836191169aa028cc314d3b2c60": "Le fichier de l'image.",
    "ipa/nuées.md.3ab99996aa46b6b3f1b20cef91c4fce0": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\n\nconst image = fs.readFileSync(\"mon image locale.jpeg\");\nawait client.nuées.sauvegarderImage({ idNuée, image });\n\n```",
    "ipa/nuées.md.afceaabda1c17c15646e1f8db90aeec6": "`client.nuées.effacerImage({ idNuée })`",
    "ipa/nuées.md.acbc3245d5b2d23b9ac9087e418fef35": "Efface l'image de la nuée.",
    "ipa/nuées.md.2e5dcc8a541e0bb6d4baa93f2ead23b2": "```ts\n// ...continuant de ci-dessus...\n\nawait client.nuées.effacerImage( { idNuée });\n```",
    "ipa/nuées.md.2750ddbf06aea1099c35325125eb305c": "`client.nuées.suivreImage({ idNuée, f })`",
    "ipa/nuées.md.861ac276c65cd048a7b9420dae6dd10f": "Suit l'image de la nuée.",
    "ipa/nuées.md.ad993c1e79e8391d85e155840ad17742": "`(image: Uint8Array",
    "ipa/nuées.md.38c02e5daa27f21971f6d045a6dbd111": "null) => void`",
    "ipa/nuées.md.2823f911c320de8fa9b437c82cda83dd": "```ts\nimport { ref } from 'vue';\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idNuée = await client.nuées.créerNuée({ });\n\nconst image = ref<Uint8Array | null>();\nconst fOublierImage = await client.nuées.suivreImage({ \n    idNuée, \n    f: x => image.value = x\n});\n\nawait fOublierImage();\n```",
    "ipa/nuées.md.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "ipa/nuées.md.f6307c7cddb9835b05a431f142493022": "`client.nuées.ajouterMotsClefsNuée`",
    "ipa/nuées.md.7ddfaecd389311339d82a5825d9a08a0": "`client.nuées.effacerMotClefNuée`",
    "ipa/nuées.md.c5895a881ad153e3055ceec947dd2c4f": "`client.nuées.suivreMotsClefsNuée`",
    "ipa/nuées.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/nuées.md.43d258213e6d9ddc245d37552cc5ceba": "`client.nuées.suivreVariablesNuée`",
    "ipa/nuées.md.87a831bc99060c55b50dbe91c6aab6e9": "Statut",
    "ipa/nuées.md.784d98dc49c38d53b257d2ce877c5597": "`client.nuées.changerStatutNuée`",
    "ipa/nuées.md.97fa8f7172d2fca38147956e5dc6320c": "`client.nuées.suivreStatutNuée`",
    "ipa/nuées.md.1b18b58db3442b2a6905903e65f5f8f4": "`client.nuées.marquerObsolète`",
    "ipa/nuées.md.9f1fc4f8990efddff3c30cf69aa09f45": "`client.nuées.marquerActive`",
    "ipa/nuées.md.5e983baaca56ea3d7f7c6da7be995ff5": "`client.nuées.marquerBêta`",
    "ipa/nuées.md.3a8b3b526b930c4bdfe4d78e0e3b5468": "`client.nuées.marquerInterne`",
    "ipa/nuées.md.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "ipa/nuées.md.08db0b88e3a3b48857c7cc56eb63da93": "`client.nuées.ajouterTableauNuée`",
    "ipa/nuées.md.8ddfef289769807f3b94ec73c6dc9b2c": "`client.nuées.effacerTableauNuée`",
    "ipa/nuées.md.7ddd0091ede98705bf53b8afcd02275a": "`client.nuées.suivreTableauxNuée`",
    "ipa/nuées.md.fbe9ab7407ccefb8ae0fe6b283db5b5a": "`client.nuées.ajouterNomsTableauNuée`",
    "ipa/nuées.md.959071774a4f7b68375ad752f0c81793": "`client.nuées.effacerNomsTableauNuée`",
    "ipa/nuées.md.ea80242a36c53fb56b8d11aa09f4beb1": "`client.nuées.suivreNomsTableauNuée`",
    "ipa/nuées.md.bcc775efc609529694d48846277b71cc": "`client.nuées.ajouterColonneTableauNuée`",
    "ipa/nuées.md.7969ca64fdeebdf6bbf245dc45bd55e4": "`client.nuées.effacerColonneTableauNuée`",
    "ipa/nuées.md.37831e29fc77047cf04024f23fda3b63": "`client.nuées.changerColIndexTableauNuée`",
    "ipa/nuées.md.13a958ca51363251ca90ead25bce8c18": "`client.nuées.suivreColonnesTableauNuée`",
    "ipa/nuées.md.f0f990d9c3068848eb45ce661d07209a": "`client.nuées.suivreDonnéesTableauNuée`",
    "ipa/nuées.md.6c3f56c4e8ed792c25d2aa6c9ba2e017": "Bds",
    "ipa/nuées.md.3cfc4835dabd8e0b74d445e4e04fc379": "`client.nuées.suivreBdsCorrespondantes`",
    "ipa/nuées.md.5aeeff5bb858cdaaad06efb1b107d3ab": "Accès et permissions",
    "ipa/nuées.md.aff423e6cb7a60e2009aa916620a9270": "La stratégie d'accès à une nuée peut être soit « innocent jusqu'à ce que prouvé coupable », ou `\"IJPC\"` (tout le monde peut participer, jusqu'à ce qu'on les bloque), soit « coupable jusqu'à ce que prouvé innocent », ou `\"CJPI\"` (uniquement les personnes invitées peuvent participer).",
    "ipa/nuées.md.ed50cc0a019f0973d4c4ff09ad9f04c1": ":::tip CONSEIL\nCes autorisations ne s'appliquent qu'au droit des personnes à contribuer des données à la nuée. Pour autoriser quelqu'un à modifier la nuée elle-même (soit sa structure, ses noms, et ces autorisations elles-mêmes), utiliser la fonction [`client.nuées.inviterAuteur`](#client-nuees-inviterauteur-idnuee-idcompteauteur-role).\n:::",
    "ipa/nuées.md.47769410e2b8ca6332dd660c503e2352": "`client.nuées.changerPhisolophieAutorisation`",
    "ipa/nuées.md.d44b1a81b2f9a76f56c577fbf7b39721": "`client.nuées.suivrePhilosophieAutorisation`",
    "ipa/nuées.md.2ff2a8c0f95036ad972bea52a9798643": "`client.nuées.accepterMembreAutorisation`",
    "ipa/nuées.md.c9fd0e927e266c7ee8490b4dc9bae5ac": "`client.nuées.accepterMembreNuée`",
    "ipa/nuées.md.062bf0c2ba86980ed9ab687abc9bbf77": "`client.nuées.exclureMembreAutorisation`",
    "ipa/nuées.md.75c7bac65e117138d7b0568470d8d004": "`client.nuées.exclureMembreDeNuée`",
    "ipa/nuées.md.d0ce85491ce8a0cf921d70a82b0cf918": "`client.nuées.suivreGestionnaireAutorisations`",
    "ipa/nuées.md.1d0c391813ae74f3838b5f5460f7aac0": "`client.nuées.changerGestionnaireAutorisations`",
    "ipa/nuées.md.8d927f1ef0d21a90c3239fef8214ce89": "`client.nuées.obtGestionnaireAutorisationsDeNuée`",
    "ipa/nuées.md.8ed7f027a01d76e1e0ec9c9b3705d963": "`client.nuées.suivreAutorisationsMembresDeGestionnaire`",
    "ipa/nuées.md.1c090adb585256e702ae276bec32ee99": "`client.nuées.suivreAutorisationsMembresDeNuée`",
    "ipa/nuées.md.5120290b9c4b69dc2054936b425541d2": "Règles",
    "ipa/nuées.md.0f80a7121ea53bdb348307e5ee04b9e0": "`client.nuées.ajouterRègleTableauNuée`",
    "ipa/nuées.md.756507c7a46f70e6c4d701638f4e5ae5": "`client.nuées.effacerRègleTableauNuée`",
    "ipa/nuées.md.4b013261a19e130d3b49dece31a7f942": "`client.nuées.suivreRèglesTableauNuée`",
    "ipa/nuées.md.f9e882c9489a7e9adc9a34532b3a5e77": "Comparaisons",
    "ipa/nuées.md.041f78cc05b81954d2f75f473669d90e": "`client.nuées.suivreDifférencesNuéeEtTableau`",
    "ipa/nuées.md.de969916f1f8722102f6a74979103366": "`client.nuées.suivreDifférencesNuéeEtBd`",
    "ipa/nuées.md.4cd2e46e578ba34373616b4802168cc9": "`client.nuées.suivreCorrespondanceBd` ?",
    "ipa/nuées.md.defec0d17c799954734283cb25db096d": "Exportation",
    "ipa/nuées.md.5d94389e998e1fdad598f67285822ebb": "`client.nuées.exporterDonnéesNuée`",
    "ipa/nuées.md.4f9dc70c407d197c73ce75769bdb8cf4": "Héritage",
    "ipa/nuées.md.80b8ecd721cb771cbf7800dd00dd50dd": "`client.nuées.rechercherNuéesSpécialiséesLiées`",
    "ipa/nuées.md.510f90d09712ce824d4d45539602f7ce": "`client.nuées.suivreNuéesParents`",
    "ipa/profil.md.820c6916ebfb13d1738ab6a13cf0a69b": "Profil",
    "ipa/profil.md.fbd87f963b49393598dee322719939a2": "Le `profil` organise toutes les informations de profil (nom, image, contact) de l'utilisateur.",
    "ipa/profil.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/profil.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/profil.md.91024bee1500cf7293c806932b9fbf1f": "Plutôt qu'un identifiant d'utilisateur ou d'utilisatrice, dans Constellation, chaque personne présente son nom dans autant de langues qu'elle le souhaite.",
    "ipa/profil.md.477bc1d1ee56e75045a6fd96e97ad194": "`client.profil.sauvegarderNom({ langue, nom })`",
    "ipa/profil.md.0fa44b69a81f76fae928074d6bea9e57": "Sauvegarde le nom de l'utilisateur dans une langue donnée.",
    "ipa/profil.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/profil.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/profil.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/profil.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/profil.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/profil.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/profil.md.008073913906a40a1072a64e660cda72": "Le nom de l'utilisatrice.",
    "ipa/profil.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/profil.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/profil.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/profil.md.d928346abbd7b4c192519c15925c253d": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.sauvegarderNom({ langue: \"fr\", nom: \"C'est bien moi !\" });\n\n```",
    "ipa/profil.md.05d8dfaf248887d14c4a83562b2a1002": "`client.profil.sauvegarderNoms({ noms })`",
    "ipa/profil.md.525aa2bfc526983739967cf34d314150": "Sauvegarde le nom de l'utilisateur dans plusieurs langues en même temps.",
    "ipa/profil.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/profil.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/profil.md.61da715f8d3585819d04db789c62fc14": "Les noms de l'utilisatrice, indexés par langue.",
    "ipa/profil.md.4794ba58d7b1facebb953bee117b3355": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.sauvegarderNoms({ fr: \"C'est bien moi !\", हिं: \"मैं हुँ\"});\n\n```",
    "ipa/profil.md.59943ade14d690d1178c79e490fc537e": "`client.profil.effacerNom({ langue })`",
    "ipa/profil.md.a16d6d677626041c6d71f0681ca9a65e": "Efface la traduction du nom de l'utilisateur dans une langue donnée.",
    "ipa/profil.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/profil.md.2d5bfb89e9b5ad9a925da391e6c40868": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.effacerNom({ langue: \"fr\" });\n```",
    "ipa/profil.md.5cd17061713d9d2a41a8942c0c9addba": "`client.profil.suivreNoms({ f, idCompte? })`",
    "ipa/profil.md.7bd89046217aba51c330a9e61b91970b": "Suit les noms (traduits en différentes langues) de l'utilisatrice.",
    "ipa/profil.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/profil.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/profil.md.26ddb0d3469a369f9f7626342bd01b96": "Une fonction qui sera appelée avec les noms de l'utilisatrice chaque fois qu'ils changent",
    "ipa/profil.md.25a66eb2e8a25669f9fa3f1189a8e0eb": "`idCompte?`",
    "ipa/profil.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/profil.md.1c65ebee6106d20fce9404b649ee0815": "L'id du compte de l'utilisateur. Par défaut, sera l'utilisateur courrant.",
    "ipa/profil.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/profil.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/profil.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/profil.md.27eac84614e14d707ec724b809a5e839": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst fOublierNoms = await client.profil.suivreNoms({ f: noms => console.log(noms) });\nawait fOublierNoms();\n```",
    "ipa/profil.md.be53a0541a6d36f6ecb879fa2c584b08": "Image",
    "ipa/profil.md.1e3fb022fcbee6061156f6625f8e4b15": "`client.profil.sauvegarderImage({ image })`",
    "ipa/profil.md.d595aea974661d61bb2c5afbddad5d44": "Sauvegarde une image de profil.",
    "ipa/profil.md.a94480ce7c3cee3a35330c424305586e": "`image`",
    "ipa/profil.md.76705eee3297a07ed0ae3723e378f96d": "`import(\"ipfs-core-types/src/utils\").ImportCandidate`",
    "ipa/profil.md.ed7742836191169aa028cc314d3b2c60": "Le fichier de l'image.",
    "ipa/profil.md.9f31e9ad3d816e3fcbb9f62a98fb029f": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst image = fs.readFileSync(\"mon image locale.jpeg\");\nawait client.profil.sauvegarderImage({ image });\n\n```",
    "ipa/profil.md.3134e531777bba0713fbe65b3ae1e3ef": "`client.profil.effacerImage()`",
    "ipa/profil.md.85784357cb0e3014bac6943c11df9a5a": "Efface l'image de profil.",
    "ipa/profil.md.c3923748c680124482a2b7100ef9126c": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.effacerImage();\n```",
    "ipa/profil.md.1d4604fcf2c9bfa82ab2ffd96845436d": "`client.profil.suivreImage({ f, idCompte? })`",
    "ipa/profil.md.11f2029696eb35b53ef488188ca04d48": "Suit l'image de profil de l'utilisatrice.",
    "ipa/profil.md.b4f475c421cef7bc3825070568cc8006": "`(image: Uint8Array) => void`",
    "ipa/profil.md.0b0cf7773a43d9ec7df7432467322b26": "Une fonction qui sera appelée avec l'image chaque fois que celle-ci change.",
    "ipa/profil.md.22abe8d2669d5382177d3a21ea119d65": "```ts\nimport { ref } from 'vue';\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst image = ref<Uint8Array>();\nconst fOublierImage = await client.profil.suivreImage({ f: x => image.value = x });\nawait fOublierImage();\n```",
    "ipa/profil.md.bbaff12800505b22a853e8b7f4eb6a22": "Contact",
    "ipa/profil.md.0d35510adebc1a667dacde90c9f93762": "Chaque profil Constellation peur inclure des informations publiques de contact (courriel ou autre).",
    "ipa/profil.md.3f5d8f47a8b37ae6db0138e4f00958e7": "`client.profil.sauvegarderContact({ type, contact })`",
    "ipa/profil.md.08e5e170edd7714e78bfbc2844cafb6f": "Sauvegarde un moyen de contact.",
    "ipa/profil.md.415ce7b551e9decd6aac5fb465bd367b": "`type`",
    "ipa/profil.md.6648433a73272c88893b0b24dc977c16": "Le type de contact (p. ex., courriel, site Internet, numéro téléphonique). Peut être n'importe quelle valeur; nous recommandons l'un de ",
    "ipa/profil.md.ec0f4cc91567980c222a9d72aefacdd1": "`courriel`",
    "ipa/profil.md.fc763cb31e9938f37737394681228f83": ", ",
    "ipa/profil.md.e04182fe65925b55b70dfa0c541f8cee": "`siteInternet`",
    "ipa/profil.md.abd2dfbea68806f8cbed549e47f59848": "`whatsapp`",
    "ipa/profil.md.aff6700723c3c12fa4ad65cd31d6f66d": "`téléphone`",
    "ipa/profil.md.27cbe18ee903b7d0c4383a1ca83e688f": " ou ",
    "ipa/profil.md.6abe181a0c7d3b6d6a6df75a9bf79429": "`télégramme`",
    "ipa/profil.md.9fc167f6bcdc5abf9ceca73fc23e3a6d": "`contact`",
    "ipa/profil.md.5affbdd38cac88019abdcfa2a0bb5a9a": "Le contact.",
    "ipa/profil.md.fea8f3d2a215bb2ac8eab316e72c6209": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.sauvegarderContact({ \n    type: \"courriel\", \n    contact: \"moi@cestbienmoi.ca\" \n});\n\n```",
    "ipa/profil.md.297b09f8f95237065f179adca00f46d4": "`client.profil.effacerContact({ type, contact })`",
    "ipa/profil.md.c213f70c6d3c9cadaa952cdb567b9d46": "Effacer l'information de contact.",
    "ipa/profil.md.2a25e46809df99f81b9c5cb78df57bce": "Le type de contact.",
    "ipa/profil.md.36403812ca66908293805848264effb6": "Le contact à effacer. Si non spécifié, effacera tous les contacts de type ",
    "ipa/profil.md.5058f1af8388633f609cadb75a75dc9d": ".",
    "ipa/profil.md.d11974dae59b008806c083d7f2c76d60": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.effacerContact({ type: \"courriel\" });\n```",
    "ipa/profil.md.9eae20ac6795bcd20b25a4df9c0e1061": "`client.profil.suivreContacts({ f, idCompte? })`",
    "ipa/profil.md.a2f03decfc82a7f2cb1d531a697aa053": "Suit les informations de contact de l'utilisatrice.",
    "ipa/profil.md.b92422890e859bf4948e880224024616": "`(contacts: {type: string, contact: string}[]) => void`",
    "ipa/profil.md.1ffdbd4ea1d9b85cb26837f1ed027a1e": "Une fonction qui sera appelée avec les informations de contact chaque fois que celles-ci changent.",
    "ipa/profil.md.26068ae207746904c736e39e69918dbf": "```ts\nimport { ref } from 'vue';\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst contacts = ref<Uint8Array>({type: string, contact: string}[]);\nconst fOublierContacts = await client.profil.suivreContacts({\n    f: x => contacts.value = x\n});\nawait fOublierContacts();\n```",
    "ipa/profil.md.aac28ad670b0d630f327c750f61f37df": "`client.profil.sauvegarderCourriel({ courriel })`",
    "ipa/profil.md.d412a387ee8ccf02d792408688148bc6": "Fonction rapide pour sauvegarder un courriel. Équivalent à `client.profil.sauvegarderContact` avec `type === \"courriel\"`.",
    "ipa/profil.md.ea163e26d61704578ec34a7f11940cd7": "L'adresse courriel.",
    "ipa/profil.md.db3f406b74ea234c8639b9b56a2a23bb": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.sauvegarderCourriel({ \n    courriel: \"moi@cestbienmoi.ca\" \n});\n\n```",
    "ipa/profil.md.a1610b70260fdffa8b27f94849a26b4e": "`client.profil.effacerCourriel()`",
    "ipa/profil.md.df6b2ada81972bd1a22f6de14d4da650": "Fonction rapide pour effacer un courriel. Équivalent à `client.profil.effacerContact({ type: \"courriel\" })`.",
    "ipa/profil.md.9f633913f7a602060d253f0e3b571219": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nawait client.profil.effacerCourriel();\n```",
    "ipa/profil.md.51c2aa230515eb7c51011ce6f3e7b6d0": "`client.profil.suivreCourriel({ f, idCompte? })`",
    "ipa/profil.md.3b280b518d3049296173a20965f6f3f3": "Version spécifique de `client.profil.suivreContact` qui suit le courriel de l'utilisatrice.",
    "ipa/profil.md.e8f7d37cd0adeaf4103e262549c5447f": "`(courriel: string) => void`",
    "ipa/profil.md.fc83ec91044ea3db1e775fdd84886ff9": "Une fonction qui sera appelée avec l'adresse courriel chaque fois que celle-ci change.",
    "ipa/profil.md.85272d2abd787fabd501e3874a0dc385": "```ts\nimport { ref } from 'vue';\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst courriel = ref<Uint8Array>();\nconst fOublierCourriel = await client.profil.suivreCourriel({\n    f: x => courriel.value = x\n});\nawait fOublierCourriel();\n```",
    "ipa/projets.md.cbdf99436836fee4fcd8aa74a49ef09f": "Projets",
    "ipa/projets.md.fb80118dbd48ac13adc05b9178368403": "Les projets Constellation vous permettent de regrouper des différentes bases de données qui portent sur le même thème (par exemple, fluviologie du monde, ou agronomie des vergers).",
    "ipa/projets.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/projets.md.cbf5d231135412fb14429e086c09a722": "Général",
    "ipa/projets.md.3236f4639c1116bcdd2cd5ce547fc3f5": "Actions générales pour gérer vos projets.",
    "ipa/projets.md.37a194c6bd679d5ab39bfc1a09c87b7d": "`client.projets.suivreProjets({ f })`",
    "ipa/projets.md.b142b42e3c78ec42625a7cc6b2256bbd": "Recherche les projets appartenant au compte présent. Pour rechercher des bases ded données d'autres utilisatrices sur le réseau Constellation, voir la section [réseau](./réseau.md).",
    "ipa/projets.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/projets.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/projets.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/projets.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/projets.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/projets.md.e2d816694d3ce9d86bc11e8bbff5217b": "`(projets: string[]) => void`",
    "ipa/projets.md.603b55a247eb6b0b421ee762bc3bf7f2": "Cette fonction sera appelée avec la liste des identifiants des projets chaque fois que celle-ci est modifiée.",
    "ipa/projets.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/projets.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/projets.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/projets.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/projets.md.7292e7b958dac847575190472a81fe76": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst projets = ref<string[]>();\nawait client.projets.suivreProjets({ f: x => projets.value = x });\n\n```",
    "ipa/projets.md.ba71192a659408a8f4fe75aa19c71272": "`client.projets.créerProjet()`",
    "ipa/projets.md.0beb2762e4c1d07c74175f941eee66a8": "Crée un nouveau projet .",
    "ipa/projets.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/projets.md.cb7c92f6bf53a42ac36f4a654e998532": "L'identifiant du nouveau projet.",
    "ipa/projets.md.913cba5ee5066feedaed95d458e0d949": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\n```",
    "ipa/projets.md.cb491b037b738f4e03c82610350c1f78": "`client.projets.copierProjet({ idProjet })`",
    "ipa/projets.md.37a8cd3ac7260d842f4552ec1a78a07c": "Crée une copie d'un projet.",
    "ipa/projets.md.1b996610696c3c908701ba1384dab98b": "`idProjet`",
    "ipa/projets.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/projets.md.f766a77ee18dee78fe25be9ea9824b2e": "L'identifiant du projet à copier.",
    "ipa/projets.md.982fbcd7545c7049c2c12c9da0c11bba": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nconst idCopie = await client.projets.copierProjet({ idProjet });\n\n```",
    "ipa/projets.md.4d9112321361f90b1a4433e6989cd3d1": "`client.projets.inviterAuteur({ idProjet, idCompteAuteur, rôle })`",
    "ipa/projets.md.79f419cb2cc0b862dd5e971ae9dc0b55": "Inviter une autre utilisatrice à modifier un projet vous appartenant. Attention ! Une fois invitée, une personne ne peut pas être désinvitée.",
    "ipa/projets.md.f6850e48c21fd862bae7d9b25e4f183d": "L'identifiant du projet.",
    "ipa/projets.md.5f523e9c641763878a7c1d58f7ff551a": "`idCompteAuteur`",
    "ipa/projets.md.0b22551d38821b87dd5f2d8afb54bf99": "L'identifiant du compte de la personne à inviter.",
    "ipa/projets.md.0aba6bfc2bc9746b9de9cf27f5bf563b": "`rôle`",
    "ipa/projets.md.1b759b5f078d84d684dae5a31e658568": "`\"MODÉRATEUR\"",
    "ipa/projets.md.fc07da5e3e15db4bea9077d0c20d9797": "\"MEMBRE\"`",
    "ipa/projets.md.4dc9a33ff5acb9054e1343421196e5e0": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.inviterAuteur({ \n    idProjet, \n    idCompteAuteur: \"idDuCompteDeMonAmieÀQuiJeFaisTrèsConfiance\",\n    rôle: \"MODÉRATEUR\" \n});\n\n```",
    "ipa/projets.md.6ec0e30b6841687b879e0e5338c4bc0e": "`client.projets.effacerProjet({ idProjet })`",
    "ipa/projets.md.ad49abafa08d1648df6db75ab077d665": "Effacer un projet. Étant donné la structure distribuée de Constellation, cette action effacera le projet de votre dispositif, mais ne pourra pas forcer les autres membres du réseau à l'effacer également.",
    "ipa/projets.md.c57b36cc98c327251296f663588884fe": "L'identifiant du projet à effacer.",
    "ipa/projets.md.37a6145cbb7b9f31112b7dbee129a261": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.effacerProjet({ idProjet });\n\n```",
    "ipa/projets.md.19d9992b772a6159fd8d207452234c81": "`client.projets.suivreQualitéProjet({ idProjet })`",
    "ipa/projets.md.83c3a3c8348966d30a81788922942bea": "Suivre une mesure (subjective, de 0 à 1) de la qualité d'un projet. 1 indique la meilleure qualité.",
    "ipa/projets.md.013ed850c5ad93072899dd415f3953ad": "`(qualité: number) => void`",
    "ipa/projets.md.dd0fda298f2158b50cb23e92a1cba5be": "Une fonction qui sera appelée avec la qualité du projet chaque fois que celle-ci change.",
    "ipa/projets.md.a2302953a3703762977b7985697096a0": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst qualité = ref<number>();\nconst fOublierSuivi = await client.projets.suivreQualitéProjet({ \n    idProjet,\n    f: x => qualité.value = x\n});\n\n```",
    "ipa/projets.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/projets.md.63fb6e96cb1e3d9f3bec43d08a80d852": "Dans Constellation, chaque projet est défini par un code identifiant et peut ensuite être nommé dans autant de langues que vous le souhaitez.",
    "ipa/projets.md.8940cdee64abb90409a05f1fb2b33e52": "`client.projets.sauvegarderNomProjet({ idProjet, langue, nom })`",
    "ipa/projets.md.4b429010d3c94815594518ef86d0f8c3": "Sauvegarde le nom du projet dans une langue donnée.",
    "ipa/projets.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/projets.md.e7d5f9d0a1bce409258def54b586f763": "Le nom du projet.",
    "ipa/projets.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/projets.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/projets.md.43c83bdc6f12304f077c0a6d3b440b7d": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.sauvegarderNomProjet({\n    idProjet, \n    langue: \"fr\", \n    nom: \"Hydrologie fluviale\" \n});\n\n```",
    "ipa/projets.md.4a977d6fc00171c20c637c043e1f5e1f": "`client.projets.sauvegarderNomsProjet({ idProjet, noms })`",
    "ipa/projets.md.f887d2dc31425471e1c5e6bc64ab2208": "Sauvegarde le nom du projet dans plusieurs langues en même temps.",
    "ipa/projets.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/projets.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/projets.md.51e835bf43656e544ef24b003302deba": "Les noms du projet, indexés par langue.",
    "ipa/projets.md.2c8009e7c65f0981c11921d49de532bb": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.sauvegarderNomsProjet({ \n    idProjet, \n    noms: { fr: \"Hydrologie fluviale\", த: \"ஆறு நீரியல்\"}\n});\n\n```",
    "ipa/projets.md.c923ea02509d07e285e7a9cfd508b8e8": "`client.projets.effacerNomProjet({ idProjet, langue })`",
    "ipa/projets.md.af36fe901a85951018caeae9547cbf92": "Efface la traduction du nom du projet dans une langue donnée.",
    "ipa/projets.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/projets.md.8abf29e9654e6033588fec26d8b0996d": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.effacerNomProjet({ idProjet, langue: \"fr\" });\n```",
    "ipa/projets.md.329aee4c6d85b466a1462a3c7e12740e": "`client.projets.suivreNomsProjet({ idProjet, f })`",
    "ipa/projets.md.c850b0c03124ede8ee3c494ac58ed0d8": "Suit les noms (traduits en différentes langues) du projet.",
    "ipa/projets.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/projets.md.1f1f2e743277cf82ca8d042ab606f3aa": "Une fonction qui sera appelée avec les noms du projet chaque fois qu'ils changent",
    "ipa/projets.md.ae773733c054140692555d6a1345b639": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst fOublierNoms = await client.projets.suivreNomsProjet({ \n    idProjet,\n    f: async noms => {\n        console.log(noms);\n        await fOublierNoms();\n    }\n});\n\nawait client.projets.sauvegarderNomsProjet({ \n    idProjet, \n    noms: { fr: \"Hydrologie fluviale\", த: \"ஆறு நீரியல்\"}\n});\n\n```",
    "ipa/projets.md.8bc84316c4078bf66723fd019616d920": "Descriptions",
    "ipa/projets.md.e03b3d7d2e9429f1a9bc872833f73a8d": "Dans Constellation, chaque projet peut aussi être accompagné d'une description plus informative.",
    "ipa/projets.md.af5c56e0a7580c56e39d2c13abd124e1": "`client.projets.sauvegarderDescriptionProjet({ idProjet, langue, nom })`",
    "ipa/projets.md.f945d2b3b5548f66422f366901088ad9": "Sauvegarde la description du projet dans une langue donnée.",
    "ipa/projets.md.831669deb653fd69299f4826920d7f17": "`description`",
    "ipa/projets.md.d5b6ee2e783101b5f479a9597d2dad62": "La description du projet.",
    "ipa/projets.md.5cfad0ff573229b4d10313e00a0b7268": "La langue de la description.",
    "ipa/projets.md.dc6a6b473dd620a288c6097a1462fd03": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.sauvegarderDescriptionProjet({\n    idProjet, \n    langue: \"fr\", \n    description: \"Projet regroupant des bases de données d'hydrologie fluviale.\" \n});\n\n```",
    "ipa/projets.md.b268ad2f649581670d5c23808cdebb49": "`client.projets.sauvegarderDescriptionsProjet({ idProjet, descriptions })`",
    "ipa/projets.md.347148f60b52cd70035772ba9185e2f6": "Sauvegarde la description d'un projet dans plusieurs langues en même temps.",
    "ipa/projets.md.83246462d80faadb74ad1977ac553044": "`descriptions`",
    "ipa/projets.md.9aa45d4290fa95043f0ff54485d65b85": "Les descriptions du projet, indexées par langue.",
    "ipa/projets.md.67de1ffb21cb0da5f6a55d6509a88835": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.sauvegarderDescriptionsProjet({ \n    idProjet, \n    descriptions: { \n        fr: \"Projet regroupant des bases de données d'hydrologie fluviale.\", \n        த: \"ஆறு நீரியல் தரவுகள் சேர்க்கும் ஒரு திட்டம்.\"\n    }\n});\n\n```",
    "ipa/projets.md.65592f265d746db4ac2a486149e78d62": "`client.projets.effacerDescriptionProjet({ idProjet, langue })`",
    "ipa/projets.md.29489ea2d70c5fc15a38d07df2adf3c3": "Efface la traduction d'une description du projet dans une langue donnée.",
    "ipa/projets.md.4339b0b170bd749fed35ca6254907a0b": "La langue dont ont doit effacer la description.",
    "ipa/projets.md.3776288651c00aee3828541f96bc1ae5": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.effacerDescriptionProjet({ idProjet, langue: \"fr\" });\n```",
    "ipa/projets.md.ed9136f0cb39039a8c8625ab2a64ab60": "`client.projets.suivreDescriptionsProjet({ idProjet, f })`",
    "ipa/projets.md.2b2b516a2c0879fbdf20a12444977f73": "Suit les descriptions (traduites en différentes langues) du projet.",
    "ipa/projets.md.551a01fe6f185fb4ea5c0cd0c9f7e841": "`(descriptions: { [langue: string]: string }) => void`",
    "ipa/projets.md.e373cff5a9203d7867faf74709b7a803": "Une fonction qui sera appelée avec les descriptions du projet chaque fois qu'elles changent",
    "ipa/projets.md.fcc737dc8471ea2c55c0d6b1adaf0bfe": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst fOublierDescriptions = await client.projets.suivreDescriptionsProjet({ \n    idProjet,\n    f: async descrs => {\n        console.log(descrs);\n        await fOublierDescriptions();\n    }\n});\n\nawait client.projets.sauvegarderDescriptionProjet({ \n    idProjet, \n    langue: \"த\",\n    description: \"ஆறு நீரியல் தரவுகள் சேர்க்கும் ஒரு திட்டம்.\"\n});\n```",
    "ipa/projets.md.be53a0541a6d36f6ecb879fa2c584b08": "Image",
    "ipa/projets.md.192deef25309850dd943640477152298": "Les projets peuvent être avoir une image décorative qui apparaîtra sur l'interface.",
    "ipa/projets.md.64c9f81f36b18ede0732486b486fd8d6": "`client.projets.sauvegarderImage({ idProjet, image })`",
    "ipa/projets.md.b1fe034bcb6346160b1a97adecf6e6ec": "Sauvegarde une image décorative.",
    "ipa/projets.md.a94480ce7c3cee3a35330c424305586e": "`image`",
    "ipa/projets.md.76705eee3297a07ed0ae3723e378f96d": "`import(\"ipfs-core-types/src/utils\").ImportCandidate`",
    "ipa/projets.md.14e1d824fcec92cc182ba38a78970ae2": "L'image.",
    "ipa/projets.md.c65436ac80d2d26654f532bb690b4c83": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst image = fs.readFileSync(\"mon image locale.jpeg\");\nawait client.projets.sauvegarderImage({ idProjet, image });\n\n```",
    "ipa/projets.md.ae0674e65e3ce82d87daad33de176621": "`client.projets.effacerImage({ idProjet })`",
    "ipa/projets.md.258c8a8eac9f47d37be7f9d8f24d386b": "Efface l'image du projet.",
    "ipa/projets.md.95148fa82335eaec67b032611e3e7001": "```ts\n// ...continuant de ci-dessus...\n\nawait client.projets.effacerImage( { idProjet });\n```",
    "ipa/projets.md.ebbe4b0bab7a77863c31179d77eb0477": "`client.projets.suivreImage({ idProjet, f })`",
    "ipa/projets.md.17a08fb3716265159b5a3604b2a31404": "Suit l'image du projet.",
    "ipa/projets.md.ad993c1e79e8391d85e155840ad17742": "`(image: Uint8Array",
    "ipa/projets.md.38c02e5daa27f21971f6d045a6dbd111": "null) => void`",
    "ipa/projets.md.887f4ac4e69b5ad0877d3f66ee618ffc": "```ts\nimport { ref } from 'vue';\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst image = ref<Uint8Array | null>();\nconst fOublierImage = await client.projets.suivreImage({ f: x => image.value = x });\n\nawait fOublierImage();\n```",
    "ipa/projets.md.059c8595193d0680e728c17de17b3169": "Bases de données",
    "ipa/projets.md.69d866fb7e7ca7970c635ecb82952b4b": "Chaque projet Constellation regroupe plusieurs [bases de données](./bds.md).",
    "ipa/projets.md.b9d856abd68fe94bb17dc33b5e1f1162": "`client.projets.ajouterBdProjet({ idProjet, idBd })`",
    "ipa/projets.md.c1ca46d3d3322a52c4798522f0e25b92": "Ajoute des mots-clefs au projet.",
    "ipa/projets.md.a8dd721bfdcfe47a74f607a6003feefe": "`idBd`",
    "ipa/projets.md.9bd5a48360b1f507b65154a7c327c54f": "`string | string[]`",
    "ipa/projets.md.7c7918ba47098e4c85a7ee8d3bd01723": "L'identifiant de la base de donnée à ajouter.",
    "ipa/projets.md.bce52685d944744b18e0e16b5a10975e": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\n\nawait client.projets.ajouterBdProjet({ \n    idProjet, \n    idBd\n});\n```",
    "ipa/projets.md.57808dec4584b11e9fe6be3dd807db86": "`client.projets.effacerBdProjet({ idProjet, idBd })`",
    "ipa/projets.md.b2ace0aac9603a4d7e5d7f16c2184f20": "Enlève une base de données du projet.",
    "ipa/projets.md.7a27143a0f0100a0664fa8459e9a42d5": "L'identifiant de la base de données à enlever.",
    "ipa/projets.md.1dbc4f4ec88cce4e26e0c974649a9b56": "```ts\n// En continuant de ci-dessus...\n\nawait client.projets.effacerBdProjet({ \n    idProjet, \n    idBd\n});\n```",
    "ipa/projets.md.897f4c5e334c11b199de0a581566064b": "`client.projets.suivreBdsProjet({ idProjet, f })`",
    "ipa/projets.md.832131db58e47f034c80042bc19534ae": "Suit les bases de données associées au projet.",
    "ipa/projets.md.ec0ac24ebdfca2f135a035a5f998c865": "`(bds: string[]) => void`",
    "ipa/projets.md.2b3853546b0d698b57209f6cd6c847fa": "Une fonction qui sera appelée avec la liste des identifiants des bases de données associées au projet chaque fois que celle-ci change.",
    "ipa/projets.md.b94106b1ed429ecf6deeaf7e649143c0": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst bdsProjet = ref<string[]>();\n\nconst fOublierBds = await client.projets.suivreBdsProjet({ \n    idProjet,\n    f: x => bdsProjet.value = x,\n});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nawait client.projets.ajouterBdProjet({ \n    idProjet, \n    idBd\n});\n```",
    "ipa/projets.md.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "ipa/projets.md.06604714e87aa15b1dbf72c9f40d74ef": "Chaque projet Constellation peut être associé avec plusieurs [mots-clefs](./motsClefs.md).",
    "ipa/projets.md.7e342b16b1fd01d01107bb6e99b64d9f": "`client.projets.ajouterMotsClefsProjet({ idProjet, idsMotsClefs })`",
    "ipa/projets.md.adea957bf00f0906ea40de3763c2f11d": "`idsMotsClefs`",
    "ipa/projets.md.4a1257f33f6c6b5e2d7b45aa68e837e8": "Les identifiants des mots-clefs à ajouter.",
    "ipa/projets.md.fbcdc432f39aecb5fa5151f306cb6f4e": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({\n    idMotClef,\n    nom: \"Hydrologie\",\n    langue: \"fr\"\n})\n\nawait client.projets.ajouterMotsClefsProjet({ \n    idProjet, \n    idsMotsClefs: idMotClef\n});\n```",
    "ipa/projets.md.4bbc863adf4feba5370da93ad261c5ee": "`client.projets.effacerMotClefProjet({ idProjet, idMotClef })`",
    "ipa/projets.md.b593e8fee687b76e4a6bc5cc51fa40c7": "Enlève un mot-clef du projet.",
    "ipa/projets.md.d523bae0c6465e39b331c6733d75e69e": "`idMotClef`",
    "ipa/projets.md.fdee0cfeb255b6fae5f9195b0916e533": "L'identifiant du mot-clef à enlever.",
    "ipa/projets.md.e95de79ee46d2f363418552db8ec96ae": "```ts\n// En continuant de ci-dessus...\n\nawait client.projets.effacerMotClefProjet({ \n    idProjet, \n    idMotClef\n});\n```",
    "ipa/projets.md.686cb2f727f9374cc99f6a3da6e1c927": "`client.projets.suivreMotsClefsProjet({ idProjet, f })`",
    "ipa/projets.md.9809057b66dee3c62d381e1587909fd1": "Suit les mots-clefs associés au projet, soit directement, soit indirectement à travers les mots-clefs des bases de données incluses dans le projet.",
    "ipa/projets.md.cb28f6a14d4fa5d575d0b9408f26970e": "`(motsClefs: {idMotClef: string, source: \"projet\"",
    "ipa/projets.md.99dd3ccfe6a82da9f1e4f6f31a75451c": "\"bds\"}[]) => void`",
    "ipa/projets.md.7d8afe18214095bc8bcff6d88999c81b": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst motsClefs = ref<{idMotClef: string, source: \"projet\" | \"bds\"}[]>();\n\nconst fOublierMotsClefs = await client.projets.suivreMotsClefsProjet({ \n    idProjet,\n    f: x => motsClefs.value = x,\n});\n\nconst idMotClefHydrologie = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({\n    idMotClef,\n    nom: \"Hydrologie\",\n    langue: \"fr\"\n})\n\n// Ajouter des mots-clefs directement au projet\nawait client.projets.ajouterMotsClefsProjet({ \n    idProjet, \n    idsMotsClefs: idMotClefHydrologie\n});\n\n\n// Ajouter des mots-clefs à une base de données\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idMotClefFluviologie = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({\n    idMotClef,\n    nom: \"Fluviologie\",\n    langue: \"fr\"\n});\nawait client.bds.ajouterMotsClefsBd({ \n    idBd, idsMotsClefs: idMotClefFluviologie \n});\n\n// Ajouter la base de données au projet\nawait client.projets.ajouterBdProjet({ idProjet, idBd });\n\n```",
    "ipa/projets.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/projets.md.9a86e6ee3ad24a0e3b7faf4fee8f18ec": "Les variables ne peuvent pas être ajoutées directement à un projet, sinon à ses [bases de données](./bds.md) de celle-ci. Cependant, vous pouvez suivre la liste de variables associées à un projet.",
    "ipa/projets.md.32c3042f51e2e41bc4b282bfb51580ba": "`client.projets.suivreVariablesProjet({ idProjet, f })`",
    "ipa/projets.md.b5675703f6a86d2e510464cac6d05e04": "Suit les variables associées au projet.",
    "ipa/projets.md.f1cf11cb32c37e2baabd3c8b619eb429": "`(variables: string[]) => void`",
    "ipa/projets.md.c37e05348955d2ca45ec4895cd7ac196": "Une fonction qui sera appelée avec la liste des identifiants des variables associées au projet chaque fois que celle-ci change.",
    "ipa/projets.md.592dd08c4b0c53f0d9ac8d4bead8f3df": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst variables = ref<string[]>();\nconst fOublierVariables = await client.projets.suivreVariablesProjet({ \n    idProjet,\n    f: x => variables.value = x,\n});\n\n// Ajouter des variables à une base de données\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariableNumérique = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.tableaux.ajouterColonneTableau({\n    idTableau,\n    idVariable: idVariableNumérique,\n});\n\n// Ajouter la base de données au projet\nawait client.projets.ajouterBdProjet({ idProjet, idBd });\n\n```",
    "ipa/projets.md.9cc702f16eaa7eb1a212bde0150784f5": "Exportation données",
    "ipa/projets.md.ea46b905f84e9fe0842b10d8d22a3ded": "Vous pouvez exporter des données d'un projet Constellation vers un autre format (Excel, LibreOffice ou autre).",
    "ipa/projets.md.2a1aa6ebcb887567c5bc5322411c8cd0": "`client.projets.exporterDonnées({ idProjet, langues, nomFichier })`",
    "ipa/projets.md.9f2f53c3988f6667bd9524de818733d2": "Exporte les données d'une le projet mais ne le sauvegarde pas immédiatement au disque.",
    "ipa/projets.md.7ec046478beef4eeac7a429177adbe1a": ":::tip ASTUCE\nVous pouvez également [automatiser](./automatisations.md) ces actions !\n:::",
    "ipa/projets.md.c367293251b9dc85c3717b3636e2e8f0": "`langues`",
    "ipa/projets.md.33d75c5b6a7ab941e46a72f4ab4c83ed": "`string[] | undefined`",
    "ipa/projets.md.bf459fd82d02f8f79382424d7b0bc1b0": "Si vous voulez que les colonnes et les tableaux portent leurs noms respectifs au lieu de leurs identifiants uniques, la liste de langues (en ordre de préférence) dans laquelle vous souhaitez recevoir les données. Une liste vide utilisera, sans préférence, n'importe quelle langue parmi celles disponibles.",
    "ipa/projets.md.2e99ff4542ff31fec1f90b208355f495": "`nomFichier`",
    "ipa/projets.md.17153153d0625642e1d0e17f3fd71447": "`string | undefined`",
    "ipa/projets.md.8d437d00ab9b86b0f30c5de4f5c516e7": "Le nom du fichier que vous voulez créer. Si non spécifier, Constellation utilisera le nom du projet si ",
    "ipa/projets.md.14083129209edef23b1f62b9e19988ec": "`langues !== undefined`",
    "ipa/projets.md.fba4b25ac2a59fa9ea403ae188103305": " ou, à défaut, l'identifiant unique du projet.",
    "ipa/projets.md.0ddb7fc27f94a2e9ca55a997d2bdef8b": "`Promise<`",
    "ipa/projets.md.c1e91f0eb08908ab6c66a055bd097f26": "`donnéesProjetExportées`",
    "ipa/projets.md.70d05a2d34998c474a1816db4675446a": "#types-exportation",
    "ipa/projets.md.54f767565a8e4eb4e6a46684f0b8eba9": "`>`",
    "ipa/projets.md.15921dc5d1b7c7d93ad1376b9e8b667b": "Les données exportées, prètes à être écrites à un fichier de votre choix.",
    "ipa/projets.md.6bcccfb5c30ac77487d89825baa14be2": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\n// ... ajouter des bases de données ...\n\nconst donnéesExportées = await client.projets.exporterDonnées({ \n    idProjet, \n    langues: [\"fr\", \"த\", \"kaq\"]\n});\n\n// Faire quelque chose avec le document\n\n```",
    "ipa/projets.md.bd88e58d15f49e25c1ae42893ed5c50c": "`client.projets.exporterDocumentDonnées({ données, formatDoc, dossier, inclureFichiersSFIP })`",
    "ipa/projets.md.6c4051d4563cfa8797e3c53dc2f0e6d5": "Prend les données exportées par [`client.projets.exporterDonnées`](#clientprojetsexporterdonnées-idprojet-langues-nomfichier) et les sauvegarde sur le disque.",
    "ipa/projets.md.b012ddb71ae2b40f2d2b92df49cec86f": "`données`",
    "ipa/projets.md.dc397f7ebfa851f34cc7661fdd42c095": "#donnees-exportees",
    "ipa/projets.md.517a50fae718456d7f2dbc320de4bdf2": "Les données déjà exportées.",
    "ipa/projets.md.39b94b50583e407ebc8893cba9caaf3d": "`formatDoc`",
    "ipa/projets.md.e839b37aa1ff46af88e5615aaaac0454": "`xlsx.BookType | \"xls\"`",
    "ipa/projets.md.37d947fa8d87b1dddac9e4027816cdde": "Le format du fichier (",
    "ipa/projets.md.2d37f5ba6f77f0e9d6ccb4334633f95c": "`odt`",
    "ipa/projets.md.fc763cb31e9938f37737394681228f83": ", ",
    "ipa/projets.md.f67ac658cb3b4049ce505e96d7f20297": "`xlsx`",
    "ipa/projets.md.40a420a4cd4e001b8a23c84cdba5423f": "`csv`",
    "ipa/projets.md.392df60c6dbc9bbdf349711e42581555": "`txt`",
    "ipa/projets.md.ba3e54db702572ff33d9492a6c76bc63": " ou n'importe quel autre type supporté par ",
    "ipa/projets.md.ecf85ef8aca3b0de1c5e3d897537d0eb": "SheetJS",
    "ipa/projets.md.b1f8842af5145c24307c057e5cdba98a": "https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats",
    "ipa/projets.md.5058f1af8388633f609cadb75a75dc9d": ".",
    "ipa/projets.md.659277071084d035dee858dcb683f262": "`dossier`",
    "ipa/projets.md.d978c1c3b16c4481e2ba5360326f26e5": "Le dossier (optionnel) où sauvegarder les données.",
    "ipa/projets.md.a6563de476692446ca58dd65e53af9d7": "`inclureFichiersSFIP`",
    "ipa/projets.md.f0d0c937b986116f4c6a920937f6eeb9": "`boolean`",
    "ipa/projets.md.5d0d153b9422ae7b36a6473418d5e29d": "Si nous voulons sauvegarder les fichiers (images, vidéos ou autres) incluses dans le projet.",
    "ipa/projets.md.8c1ea1ae38c19b44d7d64ee7683d43c9": "L'adresse du fichier créé.",
    "ipa/projets.md.bc3ccc00d1e2af66c11217a8baa55639": "```ts\n// ... continuant de ci-dessus ...\n\nconst adresseFichier = await client.projets.exporterDocumentDonnées({ \n    données: donnéesExportées,\n    formatDoc: \"ods\",  // ou bien \"xlsx\",\n    dossier: \"./mes données exportées\"\n});\n\n// Vous pouvez maintenant ouvrir le document `adresseFichier`.\n\n```",
    "ipa/projets.md.87a831bc99060c55b50dbe91c6aab6e9": "Statut",
    "ipa/projets.md.2a1a3b04014d9802369eae56fca25cf3": "Les projets peuvent être identifiées en tant qu'actifs, bêta, obsolètes ou bien internes à une autre application.",
    "ipa/projets.md.cdc88f624f2bd164546715fdaa64d2b8": "`client.projets.changerStatutProjet({ idProjet, statut })`",
    "ipa/projets.md.ab4f937703fd0db56555a54f77cd329b": "Change le statut du projet.",
    "ipa/projets.md.8dabed49b3f49427e9ebb8df06611296": "`statut`",
    "ipa/projets.md.dbe854f71ebc8ce44e61d1902c5047a6": "`schémaStatut`",
    "ipa/projets.md.fec0b98d53537e6c675aad9400bef190": "#statut-1",
    "ipa/projets.md.44caf6426483d03863cf7163ead0cdf7": "Le statut du projet.",
    "ipa/projets.md.47906ec05217345258b27a893a002551": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nawait client.projets.changerStatutProjet({ \n    idProjet, \n    statut: {\n        statut: \"interne\"\n    }\n});\n```",
    "ipa/projets.md.85b6ee77aacfd942ddfdeb271556a926": "`client.projets.marquerObsolète({ idProjet, idNouvelle })`",
    "ipa/projets.md.1bac3287b0cd81789ef606decc199c0e": "Indique que le projet est maintenant obsolète.",
    "ipa/projets.md.efaf6443a9502b8b3a5f3eb002201d4a": "`idNouvelle`",
    "ipa/projets.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/projets.md.cc40d7d565e26e25aed8752fe00b9e7b": "L'identifiant (optionnel) d'un nouveau projet qui reprendra le rôle du projet obsolète.",
    "ipa/projets.md.719936e23e6efec5351cb1222a3d6426": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst idNouvelle = await client.projets.créerProjet();\nawait client.projets.marquerObsolète({ \n    idProjet, \n    idNouvelle\n});\n```",
    "ipa/projets.md.5e0ba43483c2d39ac7f962d8bda10d84": "`client.projets.marquerActif({ idProjet })`",
    "ipa/projets.md.4ca4c8741468f905bba93503b70da8ed": "Indique que le projet est actif (pas obsolète).",
    "ipa/projets.md.be60a32487ff92714ba26d5b09f9e253": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nawait client.projets.marquerActive({ idProjet });\n```",
    "ipa/projets.md.fa950b534acf65185a7591c5900331f9": "`client.projets.marquerBêta({ idProjet })`",
    "ipa/projets.md.a3297ae563118ef4674aa6402d76450e": "Indique que le projet est en phase d'essaie (bêta).",
    "ipa/projets.md.a3b72db8d4bfe2cd53977f7b60409493": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nawait client.projets.marquerBêta({ idProjet });\n```",
    "ipa/projets.md.e21f89c857c2c6784d02b7cc1572f41b": "`client.projets.marquerInterne({ idProjet })`",
    "ipa/projets.md.a6a5d77509f07bbf4b9ca7304565733a": "Indique que le projet est un projet interne pour une application tièrce et ne devrait probablement pas être directement visible à l'utilisateur ou bien modifiable à la main.",
    "ipa/projets.md.2600e9cf186d612175b8d7b3efe5d246": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nawait client.projets.marquerInterne({ idProjet });\n```",
    "ipa/projets.md.e847f68273c17f12a243217a8f4c0360": "`client.projets.suivreStatutProjet({ idProjet, f })`",
    "ipa/projets.md.1b3c742dd2ec0b5fd474fefbe6ea275d": "Suit le statut du projet.",
    "ipa/projets.md.3a40b18055830d039c6c39c3c4a7a14d": "`(statut:`",
    "ipa/projets.md.9a5bcb4926efe0675cf2dc40f5ee28e2": "`) => void`",
    "ipa/projets.md.4f72fd7fcfa9cb04f594b25e6714824d": "Une fonction qui sera appelée avec le statut du projet chaque fois que celui-ci change.",
    "ipa/projets.md.de315f20a7f996a40f4c2aae1d7765d9": "```ts\nimport { générerClient, type types } from \"@constl/ipa\";\nimport { ref } from \"vue\";\n\nconst client = générerClient({});\n\nconst idProjet = await client.projets.créerProjet();\n\nconst statut = ref<types.schémaStatut>();\nconst fOublierStatut = await client.projets.suivreStatutProjet({ \n    idProjet,\n    f: x => statut.value = x,\n});\n\nconst idTableau = await client.projets.marquerBêta({ idProjet });\n\n```",
    "ipa/projets.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/projets.md.942d58526bbb83de00049bac467d0576": "Types exportation",
    "ipa/projets.md.08127c0f140896a9bff73c79c9280cf3": "L'interface `donnéesProjetExportées` représente des données exportées d'un projet.",
    "ipa/projets.md.8a4b82353f3e3cdb42ecf883f87071da": "```ts\ninterface donnéesProjetExportées {\n  docs: { doc: WorkBook; nom: string }[];\n  fichiersSFIP: Set<{ cid: string; ext: string }>;\n  nomFichier: string;\n}\n```\n",
    "ipa/recherche.md.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "ipa/recherche.md.cff9a49c6245f133bc9e3aef8abeb6c9": "L'option recherche de Constellation permet de rechercher des données du réseau Constellation général.",
    "ipa/recherche.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/recherche.md.b2d77645b299d0652be9f8871fa5aab7": "Profils",
    "ipa/recherche.md.a11e86876f56131e5a0e785e12950789": "Ces fonctions vous permettent de rechercher des profils du réseau.",
    "ipa/recherche.md.55ebcece4f15f36c4110e1ec3c39c486": "`client.recherche.rechercherProfilSelonId({ idCompte, f, ... })`",
    "ipa/recherche.md.fd70df08a846e045c9b601fc6e5bb834": "Recherche des profils correspondant à un identifiant de compte.",
    "ipa/recherche.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/recherche.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/recherche.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/recherche.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/recherche.md.43204cdd0804bcf6344dab24da6e495a": "`idCompte`",
    "ipa/recherche.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/recherche.md.dc3a1b7065919998b54b440ed96e5380": "L'identifiant du compte à rechercher.",
    "ipa/recherche.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/recherche.md.c03993bf404e20f9a3b97a0db0b52408": "`(résultats: `",
    "ipa/recherche.md.563ae47b25532607837638b0f2627787": "`résultatRecherche <infoRésultatTexte>`",
    "ipa/recherche.md.b7d7f4a7dcf598e311fa020c747553d1": "#types",
    "ipa/recherche.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/recherche.md.5655a12ef8509610b02e762c33f45b8f": "`[]) => void`",
    "ipa/recherche.md.c96b3b78265fbc1b32da3712a852750c": "La fonction qui sera appellée avec les résultats de la recherche chaque fois que ceux-ci changent.",
    "ipa/recherche.md.03162729e7ce381831dcaabb00c033ab": "`nRésultatsDésirés`",
    "ipa/recherche.md.f7f7e5055ab31210aade95ff82a3eac2": "`number`",
    "ipa/recherche.md.b051acb4679f1db54ea6b5e1e59bf95f": "Le nombre de résultats désirés.",
    "ipa/recherche.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/recherche.md.2cda79e28d545c6665ec08f9850bcf23": "`Promise<{ fOublier: () => Promise<void>, fChangerN: (n: number) => Promise<void>; }>`",
    "ipa/recherche.md.8a4f2a8f48fa1cb3634790eb9d097421": "Fonctions à appeler pour arrêter le suivi ou pour changer le nombre de résultats désirés.",
    "ipa/recherche.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/recherche.md.6905a08fc6dea155171286b06b1e059c": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProfilSelonId({\n  idCompte: (await client.obtIdCompte()).slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.a10e3a12dda7dc2ca1899a53e7cbe988": "`client.recherche.rechercherProfilSelonNom({ nom, f, ... })`",
    "ipa/recherche.md.308cb7d98d02a25018050e1e5e79fdc3": "Recherche des profils selon leur nom.",
    "ipa/recherche.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/recherche.md.9ae7acb55e77dbc4834de0fdeccb6024": "Le nom à rechercher.",
    "ipa/recherche.md.325b70efe66cbf91c573fa6bab26473f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProfilSelonNom({\n  nom: \"moi\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.e1407b49b7dd25dea529e2ec7726c14c": "`client.recherche.rechercherProfilSelonActivité({ f, ... })`",
    "ipa/recherche.md.9b1945e4d989daf41e734e84c79ed54c": "Recherche des profils selon leur niveau d'activité. Utile pour trouver des profils actifs.",
    "ipa/recherche.md.7cb68bff4b6356b0b8074f4857db03bc": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatVide>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProfilSelonActivité({\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.a9742ac99c53cb794a563d1db8ef0622": "`client.recherche.rechercherProfilSelonCourriel({ courriel, f, ... })`",
    "ipa/recherche.md.f3e621d784b06bb7274f2c58d3a07f1a": "Recherche des profils selon leur courriel.",
    "ipa/recherche.md.ec0f4cc91567980c222a9d72aefacdd1": "`courriel`",
    "ipa/recherche.md.d665b63b03684ac8c05d563b60d90c75": "Le courriel à rechercher.",
    "ipa/recherche.md.7c10147c5623c2345d3287c8626810d0": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProfilSelonNom({\n  courriel: \"@mail.mcgill.ca\",  // Rechercher les utilisateurs étudiants de McGill\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.843add2b2bb573247165a0a597e3a00f": "`client.recherche.rechercherProfilSelonTexte({ texte, f, ... })`",
    "ipa/recherche.md.7ae096325946d6a0ef9367001784d977": "Recherche des profils selon tous leurs attributs (nom, contact ou autre).",
    "ipa/recherche.md.229f53cd17e42bf06009496c079d75ff": "`texte`",
    "ipa/recherche.md.283a42f33baaaa65d5ef8963d7e377eb": "Le texte à rechercher.",
    "ipa/recherche.md.c3fd1e215a41a567ed359908bdcb1a90": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProfilSelonTexte({\n  courriel: \"Julien\",  // Recherchera les noms et les courriels avec ce texte\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.bc896bb07ddddcde50fdc452db6b7089": "Mots-cles",
    "ipa/recherche.md.345e9b070a5083603e4b95e089bd4535": "Ces fonctions vous permettent de rechercher des mots-clefs du réseau.",
    "ipa/recherche.md.8397ce7c0853a29a09c7791a27aefdb1": "`client.recherche.rechercherMotsClefs({ f, ... })`",
    "ipa/recherche.md.b908ada4eb3dadedd9162a73723c34b7": "Recherche des mots-clefs du réseau sans aucun critère spécifique.",
    "ipa/recherche.md.57ad3ecb60bacb656485d36b278e191f": "`toutLeRéseau`",
    "ipa/recherche.md.f0d0c937b986116f4c6a920937f6eeb9": "`boolean`",
    "ipa/recherche.md.a78e6ebb6685398e1a5f59e8ceb2c086": "Si nous recherchons tout le réseau ou bien uniquement parmi nos mots-clefs à nous. Vrai par défaut.",
    "ipa/recherche.md.ae6325720f4d18ef9bb380676eb240c1": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherMotsClefs({\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.13de26cbdcb8daef4d179047d115bcfd": "`client.recherche.rechercherMotsClefsSelonId({ idMotClef, f, ... })`",
    "ipa/recherche.md.fe4400d9bdcfd179fb13e401aa29e834": "Recherche des mots-clefs selon leur identifiant unique.",
    "ipa/recherche.md.d523bae0c6465e39b331c6733d75e69e": "`idMotClef`",
    "ipa/recherche.md.a90d22f34ca233ad90ecf90f3f7945aa": "L'identifiant à rechercher.",
    "ipa/recherche.md.d7a203c982cfffe91f66d8a920120e47": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idMotClef = await client.motsClefs.créerMotClef();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherMotsClefs({\n  idMotClef: idMotClef.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.b072e5c4d6d11ec375bdd8a8e0d2d6a5": "`client.recherche.rechercherMotsClefsSelonNom({ nomMotClef, f, ... })`",
    "ipa/recherche.md.32da15c9a3f8312c77071cb8c307a766": "Recherche des mots-clefs selon leur nom.",
    "ipa/recherche.md.cc6c1b804d5406f3d2ebc5dded344a29": "`nomMotClef`",
    "ipa/recherche.md.9e4cc4f9f11053a1dfb828a87d79f529": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderNomMotClef({ idMotClef, langue: \"fr\", nom: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherMotsClefsSelonNom({\n  nomMotClef: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.f11a90e203655614a736af7379847de9": "`client.recherche.rechercherMotsClefsSelonDescr({ descrMotClef, f, ... })`",
    "ipa/recherche.md.030554a0c879ce64adeab6a7220a0cdc": "Recherche des mots-clefs selon leur description.",
    "ipa/recherche.md.37f19e7d3db5c3ffbc82fe61b0482eea": "`descrMotClef`",
    "ipa/recherche.md.4d845e0caea35990efb9be575968a78c": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderDescriptionMotClef({ idMotClef, langue: \"fr\", description: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherMotsClefsSelonDescr({\n  descrMotClef: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.31818347f55a41ade445bd076a48e79c": "`client.recherche.rechercherMotsClefsSelonTexte({ texte, f, ... })`",
    "ipa/recherche.md.c5d0721600854e587decb7552246dfc0": "Recherche tous les champs des mots-clefs.",
    "ipa/recherche.md.3881eb41be1c3f37539d3df5ac0f5f80": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.motsClefs.sauvegarderDescriptionMotClef({ idMotClef, langue: \"fr\", description: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherMotsClefsSelonTexte({\n  descrMotClef: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/recherche.md.c93298d3aa8f92f8844e32e26f8562f0": "Ces fonctions vous permettent de rechercher des variables du réseau.",
    "ipa/recherche.md.bf095c8a6f07054c80e202ff4afda0a8": "`client.recherche.rechercherVariables({ f, ... })`",
    "ipa/recherche.md.a9c4fff43d206ff6a17885341c9fcc64": "Recherche des variables du réseau sans aucun critère spécifique.",
    "ipa/recherche.md.ef9753272dd6f15ac19e6dcab1f1e2c7": "Si nous recherchons tout le réseau ou bien uniquement parmi nos variables à nous. Vrai par défaut.",
    "ipa/recherche.md.e4ec84fedfaf01ccff626b61502148a1": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherVariables({\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.1362d6e3295333bb8c4adbd46c543a92": "`client.recherche.rechercherVariablesSelonId({ idVariable, f, ... })`",
    "ipa/recherche.md.7e3a3915ba53f5ec48b03201bbf236ec": "Recherche des variables selon leur identifiant unique.",
    "ipa/recherche.md.ac1154b44c2979772eb845d22392cc29": "`idVariable`",
    "ipa/recherche.md.dbfa7d8adfb2c69b95346ee7c068028e": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherVariablesSelonId({\n  idVariable: idVariable.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.c335f9f271efdc1dc9ac989b6011fd08": "`client.recherche.rechercherVariablesSelonNom({ nomVariable, f, ... })`",
    "ipa/recherche.md.b9a69dd94323b1fc7c01962ecc331326": "Recherche des variables selon leur nom.",
    "ipa/recherche.md.85f96b81d249e69b5641d434457312df": "`nomVariable`",
    "ipa/recherche.md.ec140ce84cb092f89678a5794dc1f93f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderNomVariable({ idVariable, langue: \"fr\", nom: \"précipitation\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherVariablesSelonNom({\n  nomVariable: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.7e526ffcfde679b54595c06d95e93c4b": "`client.recherche.rechercherVariablesSelonDescr({ descrVariable, f, ... })`",
    "ipa/recherche.md.488c0e197b5986265d181e22ea51f06c": "Recherche des variables selon leur description.",
    "ipa/recherche.md.a8de0356e8583f69bc653bcff09d86b6": "`descrVariable`",
    "ipa/recherche.md.2ae5b4f31b4a7507709469d81e4cdc1c": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderDescriptionVariable({ idVariable, langue: \"fr\", description: \"précipitation\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherVariablesSelonDescr({\n  descrVariable: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.4fd3b14c9d4be6d0372169832d557b82": "`client.recherche.rechercherVariablesSelonTexte({ texte, f, ... })`",
    "ipa/recherche.md.46250528d49fa35a0ac6322476132481": "Recherche tous les champs des variables.",
    "ipa/recherche.md.39be1e2336d3edf4b5fd0a2b8a7f3b7e": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"image\" });\nawait client.variables.sauvegarderDescriptionVariable({ idVariable, langue: \"fr\", description: \"précipitation\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherVariablesSelonTexte({\n  descrVariable: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.059c8595193d0680e728c17de17b3169": "Bases de données",
    "ipa/recherche.md.462edfd2d14f4e33295ab1e15193ed3c": "Ces fonctions vous permettent de rechercher des bases de données du réseau.",
    "ipa/recherche.md.aa22e5909b98340a230c47b7ab2ceb1f": "`client.recherche.rechercherBds({ f, ... })`",
    "ipa/recherche.md.2c8664273a83adfdc5bbae41b46466bd": "Recherche des bases de données du réseau sans aucun critère spécifique.",
    "ipa/recherche.md.ef7f3de679611a230024ca0a55b4e3ec": "Si nous recherchons tout le réseau ou bien uniquement parmi nos bases de données à nous. Vrai par défaut.",
    "ipa/recherche.md.4666d56a57e2ec0d9384e62b84411d0b": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBds({\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.3f30e62ae9b662fdeb2b7891cb1e4ce4": "`client.recherche.rechercherBdsSelonId({ idBd, f, ... })`",
    "ipa/recherche.md.f202c659610f3979171cabec728e3762": "Recherche des bases de données selon leur identifiant unique.",
    "ipa/recherche.md.a8dd721bfdcfe47a74f607a6003feefe": "`idBd`",
    "ipa/recherche.md.5bbdd4a3dfffd307b62f688cddd753e2": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonId({\n  idBd: idBd.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.abf66b13ed6419edf1be75fb178ed0f9": "`client.recherche.rechercherBdsSelonNom({ nomBd, f, ... })`",
    "ipa/recherche.md.d7f70d6b0a3b36e10583f19685c0548c": "`nomBd`",
    "ipa/recherche.md.229829f9386449e3d4d3d3373ee9ca23": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nawait client.bds.sauvegarderNomBd({ idBd, langue: \"fr\", nom: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonNom({\n  nomBd: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.dcca7e65ad9252ce5ba81d534616dc2f": "`client.recherche.rechercherBdsSelonDescr({ descrBd, f, ... })`",
    "ipa/recherche.md.517f9486fef8c6df7cf5dff263b600dd": "Recherche des bases de données selon leur description.",
    "ipa/recherche.md.a059d06601a923e1f9b994a05e792e25": "`descrBd`",
    "ipa/recherche.md.102e61cd811d1ba4f5949e0d8f363940": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nawait client.bds.sauvegarderDescriptionBd({ idBd, langue: \"fr\", description: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonDescr({\n  descrBd: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.a58803080fa97651849cb6e5db9b9aa9": "`client.recherche.rechercherBdsSelonIdMotClef({ idMotClef, f, ... })`",
    "ipa/recherche.md.81cbcb3a7a4821af697a4459fadc2cec": "Recherche des bases de données selon les identifiants uniques de leurs mots-clefs.",
    "ipa/recherche.md.e41ad5f3eb6f0a7246aed9fa50a73053": "`résultatRecherche <infoRésultatRecherche <infoRésultatTexte> >`",
    "ipa/recherche.md.909932ce3fa01e0c10aec5c37580201f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.bds.ajouterMotsClefsBd({ idBd, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonIdMotClef({\n  idMotClef: idMotClef.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.e8dbb76ed80f5f57f9ea6c9eefc7d7ec": "`client.recherche.rechercherBdsSelonIdVariable({ idVariable, f, ... })`",
    "ipa/recherche.md.daa3802d2eeec5b9795c72c5a70a297a": "Recherche des bases de données selon les identifiants uniques de leurs variables.",
    "ipa/recherche.md.c7a478fe4149b3e0347d4df4685dabd7": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable })\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonIdVariable({\n  idVariable: idVariable.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.1e1b3a598e7ede9d5ae27817caa6126c": "`client.recherche.rechercherBdsSelonNomMotClef({ nomMotClef, f, ... })`",
    "ipa/recherche.md.8ca7a6038d67cedbc86385742be691a7": "Recherche des bases de données selon les noms de leurs mots-clefs.",
    "ipa/recherche.md.c67106990441abade401b385e0af6b16": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.bds.ajouterMotsClefsBd({ idBd, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonNomMotClef({\n  nomMotClef: \"agronomie\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.motsClefs.sauvegarderNomMotClef({\n  idMotClef,\n  langue: \"es\",\n  nom: \"agronomía\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.7f906f7846a3704c1315e39bbe86eb1b": "`client.recherche.rechercherBdsSelonNomVariable({ nomVariable, f, ... })`",
    "ipa/recherche.md.3f85a333bb3439a7bb855ab67e4e9d3d": "Recherche des bases de données selon les noms de leurs variables.",
    "ipa/recherche.md.642a6050d3842ff4bcea132383fe8437": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable })\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonNomVariable({\n  nomVariable: \"température\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.variables.sauvegarderNomVariable({\n  idVariable,\n  langue: \"fr\",\n  nom: \"Température maximale\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.26568561947c981dffb3b7b5001da30e": "`client.recherche.rechercherBdsSelonMotClef({ texte, f, ... })`",
    "ipa/recherche.md.d5bc81a7cb4ae2465edecce53aca115f": "Recherche des bases de données selon leurs mots-clefs.",
    "ipa/recherche.md.11997a4c5f46b5daaf6894cd6fb5879f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.bds.ajouterMotsClefsBd({ idBd, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonMotClef({\n  texte: \"agronomie\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.motsClefs.sauvegarderNomMotClef({\n  idMotClef,\n  langue: \"es\",\n  nom: \"agronomía\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.675c7f0f2ef391ccad82c1c243de8047": "`client.recherche.rechercherBdsSelonVariable({ texte, f, ... })`",
    "ipa/recherche.md.2b7a5fb61efeb719fea29e62c1122c83": "Recherche des bases de données selon leurs variables.",
    "ipa/recherche.md.70a45a82cb1ff4f7d5ca929fb865bc47": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable })\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonVariable({\n  texte: \"température\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.variables.sauvegarderNomVariable({\n  idVariable,\n  langue: \"fr\",\n  nom: \"Température maximale\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.2637c9a8db3cda1c02b372295df9392b": "`client.recherche.rechercherBdsSelonTexte({ texte, f, ... })`",
    "ipa/recherche.md.8a691ad310615cba32366d8d0e1c196d": "Recherche tous les champs des bases de données.",
    "ipa/recherche.md.2a7486f22730478b73bbb3cd162d4b79": "`résultatRecherche< infoRésultatTexte | infoRésultatRecherche <infoRésultatTexte> >`",
    "ipa/recherche.md.1932122b690c1ebf212bdfabc20a6bf9": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<types.résultatRecherche<\n  types.infoRésultatTexte | types.infoRésultatRecherche<types.infoRésultatTexte>\n>>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"image\" });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\nawait client.variables.sauvegarderDescriptionVariable({ idVariable, langue: \"fr\", description: \"précipitation\" });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherBdsSelonTexte({\n  texte: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.cbdf99436836fee4fcd8aa74a49ef09f": "Projets",
    "ipa/recherche.md.37d2a46869a81f787693b5032e8b6f3f": "Ces fonctions vous permettent de rechercher des projets du réseau.",
    "ipa/recherche.md.d343821abfd72ba9401ce262e8bd46e6": "`client.recherche.rechercherProjets({ f, ... })`",
    "ipa/recherche.md.51ebbde995653ff743fe4f23e69eadc3": "Si nous recherchons tout le réseau ou bien uniquement parmi nos projets à nous. Vrai par défaut.",
    "ipa/recherche.md.80231013c3bacd656c1614f0cbe5a1ac": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjets({\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.7f134d2c892b4d27a37e963120ba1852": "`client.recherche.rechercherProjetsSelonId({ idProjet, f, ... })`",
    "ipa/recherche.md.ea05ce5c4e7ca665e6711745953b3913": "Recherche des projets selon leur identifiant unique.",
    "ipa/recherche.md.1b996610696c3c908701ba1384dab98b": "`idProjet`",
    "ipa/recherche.md.16576e869768cc9d8da361dfc1ef2f94": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idProjet = await client.projets.créerProjet();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonId({\n  idProjet: idProjet.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.9254d40003f43e8b2782b64e3e5cdf59": "`client.recherche.rechercherProjetsSelonNom({ nomProjet, f, ... })`",
    "ipa/recherche.md.34da886fc9f354c04fca052fc56057b3": "`nomProjet`",
    "ipa/recherche.md.6e874ab6caf4c524e8069dc64ef0c3bf": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.sauvegarderNomProjet({ idProjet, langue: \"fr\", nom: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonNom({\n  nomProjet: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.786c91743a9a4bfd58bfb76397b10a69": "`client.recherche.rechercherProjetsSelonDescr({ descrProjet, f, ... })`",
    "ipa/recherche.md.206789d7bef3785f80be227591c3268e": "Recherche des projets selon leur description.",
    "ipa/recherche.md.c155d1323b6dc252749c71fe18abe12b": "`descrProjet`",
    "ipa/recherche.md.5da154a1c93c6fa9818adfd606b6f443": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.sauvegarderDescriptionProjet({ idProjet, langue: \"fr\", description: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonDescr({\n  descrProjet: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.41bcc12bcfc0739e4a8bee690945a95a": "`client.recherche.rechercherProjetsSelonIdMotClef({ idMotClef, f, ... })`",
    "ipa/recherche.md.c9b0d65c15de58f084afc6ed97d835ca": "Recherche des projets selon les identifiants uniques de leurs mots-clefs.",
    "ipa/recherche.md.89ac9b65757f29318ab0332d7d15ffe9": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idProjet = await client.projets.créerProjet();\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.projets.ajouterMotsClefsProjet({ idProjet, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonIdMotClef({\n  idMotClef: idMotClef.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.dca747c582a86b2cc414c73373965c3b": "`client.recherche.rechercherProjetsSelonIdVariable({ idVariable, f, ... })`",
    "ipa/recherche.md.c261114ce6fe2cb11faa7e978e960949": "Recherche des projets selon les identifiants uniques de leurs variables.",
    "ipa/recherche.md.e9174663377c5fb0c31e1b48749022dc": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idProjet = await client.projets.créerProjet();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\nawait client.projets.ajouterBdProjet({ idBd, idProjet });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonIdVariable({\n  idVariable: idVariable.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.5054604dfb8303b7560eeb0fc36812ad": "`client.recherche.rechercherProjetsSelonNomMotClef({ nomMotClef, f, ... })`",
    "ipa/recherche.md.b663ba11d0b91564a63bdc5d07a13f69": "Recherche des projets selon les noms de leurs mots-clefs.",
    "ipa/recherche.md.c79cba095b72234230ef79921ba5fffa": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idProjet = await client.projets.créerProjet();\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.projets.ajouterMotsClefsProjet({ idProjet, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonNomMotClef({\n  nomMotClef: \"agronomie\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.motsClefs.sauvegarderNomMotClef({\n  idMotClef,\n  langue: \"es\",\n  nom: \"agronomía\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.d762204ece43c03455de6292ac45d5d9": "`client.recherche.rechercherProjetsSelonNomVariable({ nomVariable, f, ... })`",
    "ipa/recherche.md.90f16b15203346a956c212321da0afd7": "Recherche des projets selon les noms de leurs variables.",
    "ipa/recherche.md.0efe23e965be11751a590f8840efc827": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable })\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.ajouterBdProjet({ idBd, idProjet });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonNomVariable({\n  nomVariable: \"température\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.variables.sauvegarderNomVariable({\n  idVariable,\n  langue: \"fr\",\n  nom: \"Température maximale\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.446487545edd2cdc4d4bec3d73c32ed3": "`client.recherche.rechercherProjetsSelonMotClef({ texte, f, ... })`",
    "ipa/recherche.md.7d3a83b6112c7eeb95099782c9eba314": "Recherche des projets selon leurs mots-clefs.",
    "ipa/recherche.md.77f78c279c4eabde468375f2ea3a9bb3": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idProjet = await client.projets.créerProjet();\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.projets.ajouterMotsClefsProjet({ idProjet, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonMotClef({\n  texte: \"agronomie\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.motsClefs.sauvegarderNomMotClef({\n  idMotClef,\n  langue: \"es\",\n  nom: \"agronomía\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.d2059a20dd15511c0d9e4243ff9f3c88": "`client.recherche.rechercherProjetsSelonVariable({ texte, f, ... })`",
    "ipa/recherche.md.c3926cfec5ed5e6479b9b03a7054d5e0": "Recherche des projets selon leurs variables.",
    "ipa/recherche.md.01b7ef4dfad7f85dce4c3bd337ee3654": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable })\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.ajouterBdProjet({ idBd, idProjet });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonVariable({\n  texte: \"température\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.variables.sauvegarderNomVariable({\n  idVariable,\n  langue: \"fr\",\n  nom: \"Température maximale\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.9010d19ef47fb8905669f24380b9032e": "`client.recherche.rechercherProjetsSelonIdBd({ idBd, f, ... })`",
    "ipa/recherche.md.3742ac81e2efabb8514a3605ad80f186": "Recherche des projets selon les identifiants de leurs bases de données.",
    "ipa/recherche.md.1b7dfe99ee085c1d97bc530024536f5f": "L'identifiant de la base de donnnées à rechercher.",
    "ipa/recherche.md.2366d017e7cb47a43e731445735b7427": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nawait client.projets.ajouterBdProjet({ idBd, idProjet });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonVariable({\n  idBd: idBd.slice(-10),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.41106f91284af88e0e0a21d13b0637ee": "`client.recherche.rechercherProjetsSelonBd({ texte, f, ... })`",
    "ipa/recherche.md.bfdc7eeafbde93be6fc25d81ff1a5278": "Recherche des projets selon leurs bases de données.",
    "ipa/recherche.md.a6773a4ae73a90b494d57ef51ef53c06": "`résultatRecherchce< infoRésultatRecherche <infoRésultatTexte | infoRésultatRecherche <infoRésultatTexte> > >`",
    "ipa/recherche.md.75a3bed64e354890299cb36e11c66ee8": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<\n    types.infoRésultatRecherche<\n      types.infoRésultatTexte | types.infoRésultatRecherche<types.infoRésultatTexte>\n    >\n  >\n>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nawait client.projets.ajouterBdProjet({ idBd, idProjet });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonVariable({\n  texte: \"insecte\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.bds.sauvegarderNomBd({\n  idBd,\n  langue: \"fr\",\n  nom: \"Populations d'insectes\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.c9e0dc1077205fd5e795bf61047f1775": "`client.recherche.rechercherProjetsSelonTexte({ texte, f, ... })`",
    "ipa/recherche.md.e7e0275e36c3c6404136bc28bba00e40": "Recherche tous les champs des projets.",
    "ipa/recherche.md.5c7162bb6586e155cb61a5efd0bec0cc": "`résultatRecherche <infoRésultatTexte | infoRésultatRecherche< infoRésultatTexte | infoRésultatRecherche <infoRésultatTexte> > >`",
    "ipa/recherche.md.41a9bf18dd9b56ed93bbb7335d2775fd": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<types.résultatRecherche<\n  types.infoRésultatTexte\n  | types.infoRésultatRecherche<\n      types.infoRésultatTexte | types.infoRésultatRecherche<types.infoRésultatTexte>\n    >\n>>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"image\" });\nawait client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\nawait client.variables.sauvegarderDescriptionVariable({ idVariable, langue: \"fr\", description: \"précipitation\" });\n\nconst idProjet = await client.projets.créerProjet();\nawait client.projets.ajouterBdProjet({ idBd, idProjet });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherProjetsSelonTexte({\n  texte: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "ipa/recherche.md.171cb29f1b47f365f9535c7817a7cafb": "Ces fonctions vous permettent de rechercher des nuées du réseau.",
    "ipa/recherche.md.941f4ecb1ff633987f00e0ede761dcbf": "`client.recherche.rechercherNuées({ f, ... })`",
    "ipa/recherche.md.b789a835a768a2ea03e31c8c6e54e28d": "Recherche des nuées du réseau sans aucun critère spécifique.",
    "ipa/recherche.md.ac0c0701e751b4d93809ec4672fe8d6e": "Si nous recherchons tout le réseau ou bien uniquement parmi nos nuées à nous. Vrai par défaut.",
    "ipa/recherche.md.99619f30441839a42117e369e97fbca4": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuées({\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.70dff2802cbfcbd358275117bfdee159": "`client.recherche.rechercherNuéesSelonId({ idNuée, f, ... })`",
    "ipa/recherche.md.d04fc9c100a0e71625b44dc8c66d3f27": "Recherche des nuées selon leur identifiant unique.",
    "ipa/recherche.md.1a4d911c2dc6208111919d9564d8dace": "`idNuée`",
    "ipa/recherche.md.102fcf9fdf6e434135a903e638c92da3": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonId({\n  idNuée: idNuée.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.f9044ffad08b8ab19573e8ae39a5cfd1": "`client.recherche.rechercherNuéesSelonNom({ nomNuée, f, ... })`",
    "ipa/recherche.md.4d0dbd7661cf61c6a8924ac45f61ab21": "`nomNuée`",
    "ipa/recherche.md.e95612de7ef9a68b774e79ac37862e50": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nawait client.nuées.sauvegarderNomNuée({ idNuée, langue: \"fr\", nom: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonNom({\n  nomNuée: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.1921543624fc23bfa6d55949d1476795": "`client.recherche.rechercherNuéesSelonDescr({ descrNuée, f, ... })`",
    "ipa/recherche.md.499e5dd045802e828147d4a65442e6c8": "Recherche des nuées selon leur description.",
    "ipa/recherche.md.312dc7c439f0fbd36699f8535b8e7d18": "`descrNuée`",
    "ipa/recherche.md.30b6d4fefbfb9660f00df4a6d2dfbd95": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatTexte>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nawait client.nuées.sauvegarderDescriptionNuée({ idNuée, langue: \"fr\", description: \"hydrologie\" });\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonDescr({\n  descrNuée: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.892b29bdb8b62b6acbb33998d1aac658": "`client.recherche.rechercherNuéesSelonIdMotClef({ idMotClef, f, ... })`",
    "ipa/recherche.md.249d42550039623dd5317d397c728973": "Recherche des nuées selon les identifiants uniques de leurs mots-clefs.",
    "ipa/recherche.md.b787d601ff93d013ad299581a0702cdf": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.nuées.ajouterMotsClefsNuée({ idNuée, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonIdMotClef({\n  idMotClef: idMotClef.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.a399cff8a5f99ef6306a9aae4de32549": "`client.recherche.rechercherNuéesSelonIdVariable({ idVariable, f, ... })`",
    "ipa/recherche.md.b70c8fdad5b65245c11add6399c4bee5": "Recherche des nuées selon les identifiants uniques de leurs variables.",
    "ipa/recherche.md.f107d99e08495e52fa4a56c15a2faa76": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idTableau = await client.nuées.ajouterTableauNuée({ idNuée });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.nuées.ajouterColonneTableauNuée({ idTableau, idVariable })\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonIdVariable({\n  idVariable: idVariable.slice(-5),\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.7c7bd8b2946e6a2f0bbebbff3a2a35d3": "`client.recherche.rechercherNuéesSelonNomMotClef({ nomMotClef, f, ... })`",
    "ipa/recherche.md.eb52bd5e2e0b03dc79e3b42ce7b2a61c": "Recherche des nuées selon les noms de leurs mots-clefs.",
    "ipa/recherche.md.6dd7047af7b2d9d3bff43f34b1c37350": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.nuées.ajouterMotsClefsNuée({ idNuée, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonNomMotClef({\n  nomMotClef: \"agronomie\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.motsClefs.sauvegarderNomMotClef({\n  idMotClef,\n  langue: \"es\",\n  nom: \"agronomía\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.05d3401c93a153b7b5b89236c702dd24": "`client.recherche.rechercherNuéesSelonNomVariable({ nomVariable, f, ... })`",
    "ipa/recherche.md.a36dbbca403805328b3705b72463cd43": "Recherche des nuées selon les noms de leurs variables.",
    "ipa/recherche.md.527a1fc5770e6476344755e5c017997f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idTableau = await client.nuées.ajouterTableauNuée({ idNuée });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.nuées.ajouterColonneTableauNuée({ idTableau, idVariable })\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonNomVariable({\n  nomVariable: \"température\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.variables.sauvegarderNomVariable({\n  idVariable,\n  langue: \"fr\",\n  nom: \"Température maximale\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.032cb1fca626352e1f5543c4b56f6c65": "`client.recherche.rechercherNuéesSelonMotClef({ texte, f, ... })`",
    "ipa/recherche.md.7ed38067487928cccea2285b200824fb": "Recherche des nuées selon leurs mots-clefs.",
    "ipa/recherche.md.40b2bfc75509e0e45be5ff787fcb613f": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idMotClef = await client.motsClefs.créerMotClef();\nawait client.nuées.ajouterMotsClefsNuée({ idNuée, idsMotsClefs: idMotClef });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonMotClef({\n  texte: \"agronomie\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.motsClefs.sauvegarderNomMotClef({\n  idMotClef,\n  langue: \"es\",\n  nom: \"agronomía\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.263be0706c11950dc6102c4d16b8239e": "`client.recherche.rechercherNuéesSelonVariable({ texte, f, ... })`",
    "ipa/recherche.md.3d8680deb0d5b5fad36f867c920b6909": "Recherche des nuées selon leurs variables.",
    "ipa/recherche.md.37b389da95f5d226a8c7c7818e4d7a38": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<\n  types.résultatRecherche<types.infoRésultatRecherche<types.infoRésultatTexte>>\n>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idTableau = await client.nuées.ajouterTableauNuée({ idNuée });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.nuées.ajouterColonneTableauNuée({ idTableau, idVariable })\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonVariable({\n  texte: \"température\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait client.variables.sauvegarderNomVariable({\n  idVariable,\n  langue: \"fr\",\n  nom: \"Température maximale\"\n})\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.e3bc330587f331fade69406296aac98e": "`client.recherche.rechercherNuéesSelonTexte({ texte, f, ... })`",
    "ipa/recherche.md.226e9a1dc02c4d241634558f4aead6cc": "Recherche tous les champs des nuées.",
    "ipa/recherche.md.c85e423b01fc593b6463a07925d2d2a0": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type types } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst résultats = ref<types.résultatRecherche<\n  types.infoRésultatTexte | types.infoRésultatRecherche<types.infoRésultatTexte>\n>>();\n\nconst idNuée = await client.nuées.créerNuée({});\nconst idTableau = await client.nuées.ajouterTableauNuée({ idNuée, idVariable });\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"image\" });\n\nawait client.nuées.ajouterColonneTableauNuée({ idTableau, idVariable });\nawait client.variables.sauvegarderDescriptionVariable({ idVariable, langue: \"fr\", description: \"précipitation\" });\n\nconst { \n  fOublier, \n  fChangerN \n} = await client.recherche.rechercherNuéesSelonTexte({\n  texte: \"hydro\",\n  f: x => résultats.value = x,\n  nRésultatsDésirés: 10,\n});\n\nawait fChangerN(3);  // On veut 3 résultats maximum\nawait fOublier();  // Arrêter le suivi\n```",
    "ipa/recherche.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/recherche.md.986425c90f6aec47b3bb9f30b461d860": "Plusieurs types sont associés aux résultats de recherche.",
    "ipa/recherche.md.8e6cc7fa8c5ed2a74069676043edfc09": "```ts\ninterface résultatRecherche<T extends infoRésultat> {\n  résultatObjectif: résultatObjectifRecherche<T>;\n  id: string;\n}\ninterface résultatObjectifRecherche<T extends infoRésultat>\n  extends infoRésultatRecherche<T> {\n  score: number;\n}\ntype infoRésultat =\n  | infoRésultatTexte\n  | infoRésultatVide\n  | infoRésultatRecherche;\n\ninterface infoRésultatTexte {\n  type: \"texte\";\n  texte: string;\n  début: number;\n  fin: number;\n}\n\ninterface infoRésultatVide {\n  type: \"vide\";\n}\n\ninterface infoRésultatRecherche<T extends infoRésultat = infoRésultat> {\n  type: \"résultat\";\n  de: string;\n  clef?: string;\n  info: T;\n}\n```\n",
    "ipa/règles.md.5120290b9c4b69dc2054936b425541d2": "Règles",
    "ipa/règles.md.0ed50a2af562650f925cc0573d80c843": "Les règles vous permettent de contrôler automatiquement la qualité des données dans vos [bases de données](./bds.md) autant que dans vos [nuées](./nuées.md) de données.",
    "ipa/règles.md.fb61758d0f0fda4ba867c3d5a46c16a7": "Sources",
    "ipa/règles.md.27a3f73ddb262172efb308e1168a9e3b": "Les règles peuvent être appliquées soit aux [variables](./variables.md#regles), soit directement aux [tableaux](./tableaux.md#regles).",
    "ipa/règles.md.459dbdca8a5b26b4aacc1ed420314deb": ":::info\nLorsque multiples règles s'appliquent à une colonne d'un tableau, soit-ce par sa variable ou bien directement du tableau lui-même, elles sont toutes appliquées aux valeurs de la colonne. Par exemple, si une variable représentant la température minimale a la règle `tempMin >= -80` et la colonne a la règle `tempMin <= tempMax`, la règle de validation effective sera `-80 <= tempMin <= tempMax`.\n:::",
    "ipa/règles.md.944114b8540cb103c76f1bbf9a9d4b11": "Types de règles",
    "ipa/règles.md.5e0bca4c6da825156e31189300f4429d": "Constellation inclut quatre types de règles.",
    "ipa/règles.md.8527d90eab498e5b12cdb7bb487698e1": "1. Catégorie variable",
    "ipa/règles.md.9385bd23be503e13e9b2e51ca9a42d96": "Ces règles sont appliquées automatiquement selon la catégorie associée à la variable et s'assurent que les valeurs de la variable sont de la bonne catégorie. Vous n'avez pas besoin de les spécifier manuellement.",
    "ipa/règles.md.5a23caa2cb35f1359ea151f9894eb616": "2. Existe",
    "ipa/règles.md.75455af7d3cb88f1a48a9fe4e3c817eb": "Les règles de type `existe` précisent que les valeurs manquantes ne sont pas acceptables. Elles peuvent être appliquées à tout type de variable.",
    "ipa/règles.md.d712a32bbaaba811c37bd28d8c28b22f": "```TypeScript\nimport type { valid } from \"@constl/ipa\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"image\" });\n\nconst règle: valid.règleExiste =  {\n    typeRègle: \"existe\",\n    détails: {},\n};\n\n// Les colonnes associées à cette variable ne peuvent pas contenir de données manquantes\nawait client.variables.ajouterRègleVariable({ idVariable, règle })\n```",
    "ipa/règles.md.1947b1db0ded141caf27ee5930fc8814": "3. Bornes",
    "ipa/règles.md.a7f9943e57cb57e60cb8ba869ddc1d70": "Les règles de type `bornes` limitent les valeurs possibles d'une variable numérique ou d'horodatage. Les bornes peuvent être relatives à une valeur fixe ou bien à une autre variable ou colonne dans le tableau.",
    "ipa/règles.md.02f36d19c77a29db48e1d5c32603f27c": "::: tip\nChaque règle effectue une seule comparaison. Pour borner une variable des deux côtés, utiliser deux règles bornes.\n:::",
    "ipa/règles.md.dc5047da3245776d3120d54a402f0b0d": "Bornes fixes",
    "ipa/règles.md.79ca2728bc60a790fb11985ca728a0d8": "Les bornes fixes précisent une valeur contre laquelle les valeurs des données seront comparées. L'opération de comparaison peut être l'une de `'>'`, `'<'`, `'≥' | '>='` ou `'≤' | '<='`.",
    "ipa/règles.md.869f10858eca681342060a94d6adca04": "```TypeScript\nimport type { valid } from \"@constl/ipa\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderNomVariable({ \n    idVariable, nom: \"précipitation\", langue: \"fr\" \n});\n\n// La précipitation doit être positive\nconst règle: valid.règleBornes<valid.détailsRègleBornesFixe> = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \"≥\",  // ou bien \">=\" ; c'est pareil\n    },\n};\n\nawait client.variables.ajouterRègleVariable({ idVariable, règle })\n```",
    "ipa/règles.md.c3ff6b6b3baafd64319b364394ab1679": "Bornes dynamiques",
    "ipa/règles.md.a20ad61991d1be645cb1acb6196f91fd": "Les bornes dynamiques comparent les données à une valeur dynamique provenant d'une autre colonne du même tableau. Ces comparaisons s'effectuent ligne par ligne ; c'est-à-dire, chaque valeur sera comparée à la valeur de la variable ou colonne référence dans la même ligne du tableau.",
    "ipa/règles.md.cea7e0fc79c7d3ee7ee796da842ec97d": "```TypeScript\nimport type { valid } from \"@constl/ipa\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariableTempMin = await client.variables.créerVariable({ \n    catégorie: \"numérique\" \n});\nawait client.variables.sauvegarderNomVariable({ \n    idVariable: idVariableTempMin, nom: \"température minimum\", langue: \"fr\" \n});\n\nconst idVariableTempMax = await client.variables.créerVariable({ \n    catégorie: \"numérique\" \n});\nawait client.variables.sauvegarderNomVariable({ \n    idVariable: idVariableTempMax, nom: \"température maximum\", langue: \"fr\" \n});\n\n// La température minimum ne peut pas être supérieure à la température maximum correspondante\nconst règle: valid.règleBornes<valid.détailsRègleBornesDynamiqueVariable> = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"dynamiqueVariable\",\n        val: idVariableTempMax,\n        op: \"≤\",  // ou bien \"<=\" ; c'est pareil\n    },\n};\n\nawait client.variables.ajouterRègleVariable({ idVariable: idVariableTempMin, règle });\n\n```",
    "ipa/règles.md.6cc7e7cc2090773c73c37c2dc35469a7": "Nous pouvons également ajouter une comparaison directement à un tableau, en connectant la règle à l'identifiant de la colonne au lieu de celui de la variable.",
    "ipa/règles.md.ae41dbec1f0cc266b0f5016b7be2f161": "```TypeScript\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idColonneTempMin = await client.tableaux.ajouterColonneTableau({\n    idTableau,\n    idVariable: idVariableTempMin,\n});\nconst idColonneTempMax = await client.tableaux.ajouterColonneTableau({\n    idTableau,\n    idVariable: idVariableTempMax,\n});\nconst règleTempMax: valid.règleBornes<valid.détailsRègleBornesDynamiqueColonne> = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"dynamiqueColonne\",\n        val: idColonneTempMin,\n        op: \"≥\",\n    },\n};\n\nawait client.tableaux!.ajouterRègleTableau({\n    idTableau,\n    idColonne: idColonneTempMax,\n    règle: règleTempMax,\n});\n\n```",
    "ipa/règles.md.fdb65217a8abb8da2c894dfa545e6f7d": "4. Valeurs catégoriques",
    "ipa/règles.md.8e2e484afcf423124500de0ac801095c": "Les règles de type `catégorique` s'appliquent à toute catégorie de variable et indiquent que les valeurs de la variable doivent figurer parmi une liste de valeurs possibles. Ces règles peuvent s'appliquer à des variables autant qu'à des tableaux.",
    "ipa/règles.md.41cf959adc98386b54829d71a6ed5d37": "Fixes",
    "ipa/règles.md.efa97accd8846b6632662895b34bf38f": "Les règles catégoriques fixes incluent une liste fixe de valeurs permises.",
    "ipa/règles.md.b6ce64692298d34f52909b372ab7f88a": "```TypeScript\nimport type { valid } from \"@constl/ipa\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\n// Une base de données\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableauObservations = await client.bds.ajouterTableauBd({ idBd })\n\n// Une variable pour le site d'échantillonnage\nconst idVariableSiteÉchantillon = await client.variables.créerVariable({ \n    catégorie: \"chaîneNonTraductible\" \n});\nawait client.variables.sauvegarderNomVariable({ \n    idVariable: idVariableSiteÉchantillon, \n    nom: \"Identifiant site\", \n    langue: \"fr\" \n});\nawait client.variables.sauvegarderDescriptionVariable({\n    idVariable: idVariableSiteÉchantillon, \n    description: \"Identifiant du site d'échantillonnage\", \n    langue: \"fr\"\n});\nconst idColonneSiteÉchantillon = await client.tableaux.ajouterColonneTableau({\n    idTableau,\n    idVariable: idVariableSiteÉchantillon\n});\n\n// Une variable pour le niveau d'eau\nconst idVariableNiveauDEau = await client.variables.créerVariable({ \n    catégorie: \"numérique\" \n});\nawait client.variables.sauvegarderNomVariable({ \n    idVariable: idVariableNiveauDEau, nom: \"Niveau d'eau\", langue: \"fr\" \n});\nconst idColonneNiveauDEau = await client.tableaux.ajouterColonneTableau({\n    idTableau,\n    idVariable: idVariableNiveauDEau\n});\n\n// Le site doit être l'un des sites d'échantillonnage connus\nconst règleFixe: valid.règleValeurCatégorique = {\n    typeRègle: \"valeurCatégorique\",\n    détails: { \n        type: \"fixe\", \n        options: [  // Liste des identifiants pour vos sites\n            \"Saint-Laurent 1\", \"Saint-Laurent 2\"\n        ]\n    },\n};\n\nawait client.tableaux.ajouterRègleTableau({ \n    idTableau: idTableauObservations, \n    idColonne: idColonneSiteÉchantillon,\n    règle: règleFixe \n});\n\n```",
    "ipa/règles.md.05cff8647a3b84f52468770528471405": "Dynamiques",
    "ipa/règles.md.ec327f480d9be9829e7ffe94103a4f54": "Mais peut-être que vos sites d'échantillonnage risquent d'évoluer avec le temps. Dans ce cas, il serait mieux de créer un autre tableau avec les informations de vos sites (identifiant, longitude et latitude) et lier les deux tableaux ensemble. Ceci peut se faire avec une règle catégorique dynamique.",
    "ipa/règles.md.84c1d69b5777d6cbd8e106b261a66f06": ":::tip ASTUCE\nDans ce cas-ci, nous ajoutons le tableau à la même base de données, mais il pourrait aussi bien appartenir à une base de données à part.\n:::",
    "ipa/règles.md.a0675b0b9f94eb4313cf1588b639c562": "```TypeScript\n// On ajoute un autre tableau.\nconst idTableauInfoSites = await client.bds.ajouterTableauBd({ idBd });\n\nconst idVariableIdSite = await client.variables.créerVariable({ \n    catégorie: \"chaîneNonTraductible\" \n});\nconst idColonneIdSite = await client.tableaux.ajouterColonneTableau({\n    idTableau: idTableauInfoSites,\n    idVariable: idVariableIdSite,\n});\n\nconst règleDynamique: règleValeurCatégorique = {\n    typeRègle: \"valeurCatégorique\",\n    détails: {\n        type: \"dynamique\",\n        tableau: idTableauInfoSites,\n        colonne: idColonneIdSite,\n    },\n};\n\nawait client.variables.ajouterRègleTableau({ \n    idTableau: idTableauObservations, \n    idColonne: idColonneSiteÉchantillon,\n    règle: règleFixe \n});\n```",
    "ipa/règles.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/règles.md.45c3800d42726eb2c249b038f309c9a6": "Types règles",
    "ipa/règles.md.8c82cf7c7ce8825faf14df72483ff622": "Ces types spécifient les structures des règles de tableau et de variable.",
    "ipa/règles.md.536dac3641b176590796e92d94c578ed": "```ts\ntype règleColonne<T extends règleVariable = règleVariable> = {\n  règle: règleVariableAvecId<T>;\n  source: sourceRègle;\n  colonne: string;\n};\n\ntype règleVariableAvecId<T extends règleVariable = règleVariable> = {\n  id: string;\n  règle: T;\n};\n\ntype règleVariable =\n  | règleExiste\n  | règleBornes\n  | règleValeurCatégorique\n  | règleCatégorie;\n\n```",
    "ipa/règles.md.8126be2298e4f89f4333fef817005d46": "Types erreurs",
    "ipa/règles.md.953e3faf3bcaae2073f14c8065d4269b": "Ces types sont associés aux erreurs de validation des données et des règles elles-mêmes.",
    "ipa/règles.md.c5addf0a85fac73fac293d528422a2cb": "```ts\ntype erreurValidation<T extends règleVariable = règleVariable> = {\n  empreinte: string;\n  erreur: {\n    règle: règleColonne<T>;\n  };\n};\n\ntype erreurRègle =\n  | erreurRègleCatégoriqueColonneInexistante\n  | erreurRègleBornesColonneInexistante\n  | erreurRègleBornesVariableNonPrésente;\n\ntype erreurRègleCatégoriqueColonneInexistante = {\n  règle: règleColonne<\n    règleValeurCatégorique<détailsRègleValeurCatégoriqueDynamique>\n  >;\n  détails: \"colonneCatégInexistante\";\n};\n\ntype erreurRègleBornesColonneInexistante = {\n  règle: règleColonne<règleBornes<détailsRègleBornesDynamiqueColonne>>;\n  détails: \"colonneBornesInexistante\";\n};\n\ntype erreurRègleBornesVariableNonPrésente = {\n  règle: règleColonne<règleBornes<détailsRègleBornesDynamiqueVariable>>;\n  détails: \"variableBornesNonPrésente\";\n};\n\n```",
    "ipa/réseau.md.836d64c92151a341b114b051cb4cbc83": "Réseau",
    "ipa/réseau.md.c7bf8fdb459633335fc461bc6acaf989": "La section `réseau` de Constellation permet de réseauter avec d'autres membres du réseau.",
    "ipa/réseau.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/réseau.md.0694c96d837ebdb6adafc1a1e7ae184d": "Connexions",
    "ipa/réseau.md.a3255ecdf0d9445b01a3247443ee3af9": "Ces fonctions suivent la connection du compte sur le réseau Constellation.",
    "ipa/réseau.md.03e8fb6c417d2dac1a00d2780a4f83d1": "`client.réseau.suivreConnexionsMembres({ f })`",
    "ipa/réseau.md.9b2f48fac309deb106500240941edd66": "Suit les connexions aux autres comptes Constellation.",
    "ipa/réseau.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/réseau.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/réseau.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/réseau.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/réseau.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/réseau.md.f3e9a6d5d90730a49a7add0f20cd9d18": "`(membres: `",
    "ipa/réseau.md.74afe85a36717cf498cf056f55535141": "`statutMembre`",
    "ipa/réseau.md.37a570085b7b29e12a33e962e79e8b69": "#types-connexions",
    "ipa/réseau.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/réseau.md.9a5bcb4926efe0675cf2dc40f5ee28e2": "`) => void`",
    "ipa/réseau.md.8e680cf634d3d6cb0bcb070aa2d6f958": "Cette fonction sera appelée avec la liste des connexions chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/réseau.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/réseau.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/réseau.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/réseau.md.4461b77b7fdf716ecbd0fe679b15bd6a": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type réseau } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst connexions = ref<réseau.statutMembre[]>();\n\nconst fOublier = await client.réseau.suivreConnexionsMembres({\n    f: x => connexions.value = x,\n})\n\n```",
    "ipa/réseau.md.46a76817853dce5613068551af9b02c5": "`client.réseau.suivreConnexionsDispositifs({ f })`",
    "ipa/réseau.md.aec50f36940d2a86a44e0e708a423efd": "Suit les connexions aux autres dispositifs des comptes Constellation.",
    "ipa/réseau.md.06e3ae36665818d7738aab62fc2073c6": "`(dispositifs: `",
    "ipa/réseau.md.0982d8f7c2722845c951eaa33e6d310c": "`statutDispositif`",
    "ipa/réseau.md.f20484d7941d38d0e958f819c9009428": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type réseau } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst connexions = ref<réseau.statutDispositif[]>();\n\nconst fOublier = await client.réseau.suivreConnexionsDispositifs({\n    f: x => connexions.value = x,\n})\n\n```",
    "ipa/réseau.md.c2a9cb97a33212e7befea43e8bd94d93": "`client.réseau.suivreConnexionsPostesSFIP({ f })`",
    "ipa/réseau.md.aeadb6fb0ca3b5ce3bad2c87d53bf556": "Suit les connexions aux autres postes du [Systèmes de fichiers Interplanétaire](https://ipfs.io) sur lequel est bâti Constellation.",
    "ipa/réseau.md.c0dfc65e4f691b268cfe44331a5034a7": "`(connexions: { adresse: string; pair: string }[]) => void`",
    "ipa/réseau.md.b59544eddacba5b02f3627c31ea9a462": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst connexions = ref<{ adresse: string; pair: string }[]>();\n\nconst fOublier = await client.réseau.suivreConnexionsPostesSFIP({\n    f: x => connexions.value = x,\n})\n\n```",
    "ipa/réseau.md.f2c9e12ef8d75d6da11f8570415a87b3": "`client.réseau.suivreComptesRéseau({ f, profondeur, idCompteDébut })`",
    "ipa/réseau.md.366cd2762de32708c6477c12e59acff9": "Suit les membres qui font parti du réseau personnel d'un compte (en ligne ou non). Les résultats incluent la profondeur  et le niveau de confiance envers chaque membre retrouvé. Une confiance de 0 indique un inconnu, une confiance de 1 une personne de confiance et une valeur négative un compte bloqué.",
    "ipa/réseau.md.b4cd5631d080bfcffb4f0a73337eca81": "`infoMembreRéseau`",
    "ipa/réseau.md.34a09f3445d1a48c2987df6f75ed15e4": "`[]) => void`",
    "ipa/réseau.md.89ad46dda367826f51dfe992998d231a": "`profondeur`",
    "ipa/réseau.md.f7f7e5055ab31210aade95ff82a3eac2": "`number`",
    "ipa/réseau.md.420a38c7b00b37ec13e9a94b50944761": "La profondeur à rechercher dans le réseau (relatif au compte original).",
    "ipa/réseau.md.d7cd8997bcc8c68db2878e8510e756f8": "`idCompteDébut`",
    "ipa/réseau.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/réseau.md.94e0288bb7824a81f1233b4ac9bea160": "Le compte à partir duquel lancer la recherche. Si non spécifié, le compte actuel sera utilisé par défaut.",
    "ipa/réseau.md.de6ae804eefada20d4d4fd6a2fcb06c9": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type réseau } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst comptes = ref<réseau.infoMembreRéseau[]>();\n\nconst fOublier = await client.réseau.suivreComptesRéseau({\n    f: x => comptes.value = x,\n})\n\n```",
    "ipa/réseau.md.88f6df77d3f9942078c4123733999d02": "`client.réseau.suivreComptesRéseauEtEnLigne({ f, profondeur, idCompteDébut })`",
    "ipa/réseau.md.c5d21c598878b3de7fcd8abe64fa50d0": "Suit les membres qui font parti du réseau personnel d'un compte (en ligne ou non) et inclut aussi les membres en ligne (qu'ils fassent parti du réseau personnel ou non). Les résultats incluent la profondeur  et le niveau de confiance envers chaque membre retrouvé. Une confiance de 0 indique un inconnu, une confiance de 1 une personne de confiance et une valeur négative un compte bloqué. Une profondeur infinie indique une personne qui ne fait pas partie de votre réseau.",
    "ipa/réseau.md.97707783d4f47a26c2c5e90191ca5c9b": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type réseau } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst comptes = ref<réseau.infoMembreRéseau[]>();\n\nconst fOublier = await client.réseau.suivreComptesRéseauEtEnLigne({\n    f: x => comptes.value = x,\n})\n\n```",
    "ipa/réseau.md.c187a15e80d48dbc68306dd51db94693": "Confiance",
    "ipa/réseau.md.d2bdc9790162d827b1c1cf1fe735fdf5": "Constellation étant un réseau distribué, nous ne pouvons pas simplement effacer les comptes des personnes qui ne sont pas gentilles. Ce que nous pouvons faire, au contraire, est de permettre aux utilisatrices d'identifier des comptes auquels elles font confiance (ou non). **Ces relations de confiances sont transitives** ; c'est-à-dire, indiquer votre confiance ou non envers un compte Constellation affectera la confiance que vos contacts accorderont, eux aussi, à ce compte.",
    "ipa/réseau.md.cadcce16ab26128aa45efe1a45d015a1": ":::tip CONSEIL\nSi vous développez des interfaces graphiques basées sur Constellation, il est recommendé de ne pas laisser paraître les comptes dont la confiance est inférieure à 0.\n:::",
    "ipa/réseau.md.d2ba35124c5a238485e08e08316a5601": "`client.réseau.faireConfianceAuMembre({ idCompte })`",
    "ipa/réseau.md.caa0ae023e807f430610c4d49fca16dc": "Indique que vous faites confiance à un compte Constellation (`confiance = 1`).",
    "ipa/réseau.md.43204cdd0804bcf6344dab24da6e495a": "`idCompte`",
    "ipa/réseau.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/réseau.md.3364a084e04910e7e0c0159226ab0c0a": "L'identifiant de compte à qui faire confiance.",
    "ipa/réseau.md.a134015b53a178b0aa67ef4df7162985": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.réseau.faireConfianceAuMembre({\n    idCompte: \"idCompteDeQuelquUnDeChouette\",\n})\n\n```",
    "ipa/réseau.md.c4ad499a642c4a067e537fa71738e42b": "`client.réseau.nePlusFaireConfianceAuMembre({ idCompte })`",
    "ipa/réseau.md.e3c57d07a0456e4bfdda5efea69534b1": "Indique que vous ne faites plus confiance à un compte Constellation (la confiance retournera à 0).",
    "ipa/réseau.md.c5caa27a68778aa7b307b2f34777733e": "L'identifiant de compte à qui ne plus faire confiance.",
    "ipa/réseau.md.74518cf9c337c07efd460c4fe23a893d": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.réseau.nePlusFaireConfianceAuMembre({\n    idCompte: \"idCompteDeQuelquUnDePasSiChouetteAprèsTout\",\n})\n\n```",
    "ipa/réseau.md.48bb7d398d7581e830c2c0d484b41765": "`client.réseau.bloquerMembre({ idCompte, privé })`",
    "ipa/réseau.md.f34a0703ccbdf6ec9dc17bbf9b82c047": "Indique que vous voulez bloquer un compte Constellation (`confiance = -1`).",
    "ipa/réseau.md.a94301ae97d627465f5162ebfddcba12": "L'identifiant de compte à bloquer.",
    "ipa/réseau.md.d5aee2a4465a1c559a4ea9a948d8ea36": "`privé`",
    "ipa/réseau.md.5d83b385ea9fcbf16e7f0cf3831be79c": "`boolean | undefined`",
    "ipa/réseau.md.01e2f665371e6939025ba2b239c2cdf1": "Si le bloquage doit être privé ou non (vrai par défaut).",
    "ipa/réseau.md.7c20234f2da6ba03047d6368e1ceebe1": ":::warning AVERTISSEMENT\nSi le bloquage est publique, tout le monde saura que vous avez bloqué ce compte, et il sera également bloqué chez les personnes qui vous font confiance. Mais la personne qui vous avez bloqué pourrait finir par le savoir (peut-être que ce serait grave, ou bien peut-être pas si grave que ça; je n'en sais rien). ",
    "ipa/réseau.md.5268ff8a592854dc7b1f65dbbe4653a8": "Si le bloquage est privé, le compte sera bloqué uniquement sur ce dispositif, et vous devrez donc le bloquer à nouveau sur chacun des dispositifs de votre compte.\n:::",
    "ipa/réseau.md.ac7a0230fc366e89ebc258041f7182a9": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nawait client.réseau.bloquerMembre({\n    idCompte: \"idCompteDeQuelquUnQuiNestVraimentPasGentil\",\n})\n\n```",
    "ipa/réseau.md.212e63e40e3406b9b29de61deed7e43f": "`client.réseau.débloquerMembre({ idCompte })`",
    "ipa/réseau.md.78cfc3938f91e7c739e4856d680c6bc8": "Débloque un compte qui avait été bloqué.",
    "ipa/réseau.md.2ed5678120bbf16d324e58241283c75c": "L'identifiant du compte qu'on veut débloquer.",
    "ipa/réseau.md.983654298925429dbd79943a8032f6d2": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst confiance = ref<number>();\n\nconst fOublier = await client.réseau.débloquerMembre({\n    idCompte: \"idCompteDeQuelquUnQuiVientDeSExcuser\"\n});\n\n```",
    "ipa/réseau.md.bb8ba8a50657a19b2eaa4a32b118efd5": "`client.réseau.suivreFiables({ f, idCompte })`",
    "ipa/réseau.md.738496251dbf9db720dc39cfa8c4f8b1": "Suit les comptes à qui on fait confiance.",
    "ipa/réseau.md.bf53c3f255c1a8aba78723cccdbcad78": "`(fiables: string[]) => void`",
    "ipa/réseau.md.e596f059ca82e2abaef63a68b16e0286": "Cette fonction sera appelée avec la liste des comptes auxquels ",
    "ipa/réseau.md.b3382ff90b527e24a046f7d13eade513": " fait confiance chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.a8bbb8ff9673befcfe113d55b70b9c40": "L'identifiant du compte dont on veut suivre les relations de confiance. Si non spécifié, Constellation utilisera le compte actuel.",
    "ipa/réseau.md.396c3b6d7b6bf7b237b13b5ef5477bba": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst fiables = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreFiables({\n    f: x => fiables.value = x,\n})\n\n```",
    "ipa/réseau.md.f50538ebc89cf0f15b89d7a2be222847": "`client.réseau.suivreBloqués({ f, idCompte })`",
    "ipa/réseau.md.d69cdff2bff97f9bd672be6a442df1a2": "Suit les comptes qui ont été bloqués.",
    "ipa/réseau.md.2ed8bd6fb2549017a9bbc156e81f4afb": "`(bloqués: { idCompte: string; privé: boolean }[]) => void`",
    "ipa/réseau.md.acf2167c800e6159217342205eebd175": "Cette fonction sera appelée avec la liste des comptes qui ont été bloquées par ",
    "ipa/réseau.md.cec39fdf0a93f4ba02952095b97476e4": " chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.c673eee204bc66e5f7f3ea6b93c2c215": ":::tip CONSEIL\nLe champ `privé` dans les réponses indique si le compte est bloqué de manière privé ou publique (`privé = true` n'est possible que si `idCompte === client.idCompte`. )\n:::",
    "ipa/réseau.md.63570c666b3591d2f2f6188075027d9c": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst bloqués = ref<{ idCompte: string; privé: boolean }[]>();\n\nconst fOublier = await client.réseau.suivreBloqués({\n    f: x => bloqués.value = x,\n})\n\n```",
    "ipa/réseau.md.89882175b203de05c862596778b6cfff": "`client.réseau.suivreBloquésPubliques({ f, idCompte })`",
    "ipa/réseau.md.4d0ee91f95e89f44eefcec087def5457": "Suit les comptes qui ont été bloqués de manière publique.",
    "ipa/réseau.md.042282ce1f43731ca8fa872f939bf8c6": "`(bloqués: string[]) => void`",
    "ipa/réseau.md.4aa52251f8d85e9cd2f17e0751c2ffc4": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst bloqués = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreBloquésPubliques({\n    f: x => bloqués.value = x,\n})\n\n```",
    "ipa/réseau.md.137f4a4d2a55ce1ace42b8c500ecb2a5": "`client.réseau.suivreConfianceMonRéseauPourMembre({ idCompte, f, ... })`",
    "ipa/réseau.md.9bacdca3a20f43b66efed22cc174b288": "Suit la confiance de mon réseau envers un compte.",
    "ipa/réseau.md.8e2f7fa35075a2894d3ae9b76663246f": "L'identifiant du compte envers lequel veut suivre le niveau de confiance.",
    "ipa/réseau.md.4ea843707eae023cf8f06c4a82286822": "Cette fonction sera appelée avec le niveau de confiance chaque fois que celui-ci est modifiée.",
    "ipa/réseau.md.c21fc1bf15367fe70679e31b4f87d992": "La profondeur de la recherche.",
    "ipa/réseau.md.2765556bd4bbf7fbcbd96576ecee5df1": "`idCompteRéférence`",
    "ipa/réseau.md.68b2d6c9244b61c67c21b47c4050e0bb": "L'identifiant du compte dont on veut suivre le niveau de confiance envers ",
    "ipa/réseau.md.c08bdbc3632c4f21f9829532d2e5e291": ". Si non spécifié, Constellation utilisera le compte actuel.",
    "ipa/réseau.md.1a3766f89ed31f7833a41a1103d688a6": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst confiance = ref<number>();\n\nconst fOublier = await client.réseau.suivreConfianceMonRéseauPourMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => confiance.value = x,\n})\n\n```",
    "ipa/réseau.md.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "ipa/réseau.md.90796eeeedcae7e4cb48f39d3c52631a": "Ces fonctions servent à visualiser les données d'un autre membre du réseau Constellation. Elles vérifient également que, si la personne en question n'a pas créé l'objet elle-même, qu'elle a bel et bien accepté l'invitation de s'y joindre en tant qu'auteur.",
    "ipa/réseau.md.f4409c241e3c309b8776a7751a5909b9": ":::tip CONSEIL\nLes fonctionnalités-ci servent à trouver toutes les données appartement à un membre en particulier. Si vous voulez au contraire rechercher des données du réseau Constellation en entier selon un critère donné, voir la section [`client.recherche`](./recherche.md).\n:::",
    "ipa/réseau.md.a1be9b8527e71d372c43c5092dd2f369": "`client.réseau.suivreBdsMembre({ idCompte, f })`",
    "ipa/réseau.md.f5fd22be442ef8fba1f9f3cb754a125c": "Suit les bases de données appartenant à un utilisateur Constellation, en vérifiant et que la personne a été invitée à être auteur de la base de données, et qu'elle a accepté ladite invitation.",
    "ipa/réseau.md.b73102f84eb1f24f9bc7b503d8c1cca5": "L'identifiant de compte de la personne d'intérêt.",
    "ipa/réseau.md.ec0ac24ebdfca2f135a035a5f998c865": "`(bds: string[]) => void`",
    "ipa/réseau.md.1a10ccd1347b45f62932e48b0acf4044": "Cette fonction sera appelée avec la liste des identifiants des bases de données chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.f75bdd6c9d54aa981cd26cd9ba5fed87": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst bds = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreBdsMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => bds.value = x,\n})\n\n```",
    "ipa/réseau.md.d1c7abb949f148b5e692e5bfb6caf671": "`client.réseau.suivreProjetsMembre({ idCompte, f })`",
    "ipa/réseau.md.6fc7f10e32275401c047b54c72a080fb": "Suit les projets appartenant à une utilisatrice Constellation, en vérifiant et que la personne a été invitée à être auteur du projet, et qu'elle a accepté ladite invitation.",
    "ipa/réseau.md.e2d816694d3ce9d86bc11e8bbff5217b": "`(projets: string[]) => void`",
    "ipa/réseau.md.603b55a247eb6b0b421ee762bc3bf7f2": "Cette fonction sera appelée avec la liste des identifiants des projets chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.8fdfa8f1f0744d0078dd06eeb5635b17": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst projets = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreProjetsMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => projets.value = x,\n})\n\n```",
    "ipa/réseau.md.8ac14cedeb9bd184846047c8e3b0485a": "`client.réseau.suivreVariablesMembre({ idCompte, f })`",
    "ipa/réseau.md.24e5745320fa510338a51580180fedc7": "Suit les variables appartenant à une utilisatrice Constellation, en vérifiant et que la personne a été invitée à être auteur de la variable, et qu'elle a accepté ladite invitation.",
    "ipa/réseau.md.f1cf11cb32c37e2baabd3c8b619eb429": "`(variables: string[]) => void`",
    "ipa/réseau.md.3a5cc3bb49de6c2385cff189e0e07cfa": "Cette fonction sera appelée avec la liste des identifiants des variables chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.9ecf925874d88c6959b7823301b0ffa0": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst variables = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreVariablesMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => variables.value = x,\n})\n\n```",
    "ipa/réseau.md.8db3beb1e2dedc077676450b204bd663": "`client.réseau.suivreMotsClefsMembre({ idCompte, f })`",
    "ipa/réseau.md.4f677b9c4bfd966171adc7e84ca6c462": "Suit les mots-clefs appartenant à une utilisatrice Constellation, en vérifiant et que la personne a été invitée à être auteur du mot-clef, et qu'elle a accepté ladite invitation.",
    "ipa/réseau.md.9b6014625768a05b681dedfe2ec7d7eb": "`(motsClefs: string[]) => void`",
    "ipa/réseau.md.81fa8212fa7ffe49b9ede87601c1726b": "Cette fonction sera appelée avec la liste des identifiants des mots-clefs chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.1466644458c134e23b4efb90e1067dff": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst motsClefs = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreMotsClefsMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => motsClefs.value = x,\n})\n\n```",
    "ipa/réseau.md.35f13d7086e73287507724b4433cd775": "`client.réseau.suivreNuéesMembre({ idCompte, f })`",
    "ipa/réseau.md.2e9fc27bcb4000c70b42ff6329bd1e6e": "Suit les nuées appartenant à une utilisatrice Constellation, en vérifiant et que la personne a été invitée à être auteur du projet, et qu'elle a accepté ladite invitation.",
    "ipa/réseau.md.4215a3a4e078b3d2877fa0a261a4faea": "`(nuées: string[]) => void`",
    "ipa/réseau.md.28e209e48976dd1e97c9ff9fed5c45a1": "Cette fonction sera appelée avec la liste des identifiants des nuées chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.a8dd93a57c5f818db4000f2c1cfded26": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst nuées = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreNuéesMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => nuées.value = x,\n})\n\n```",
    "ipa/réseau.md.6064fc1e6cb599980d916a9497f7a03a": "`client.réseau.suivreFavorisMembre({ idCompte, f })`",
    "ipa/réseau.md.64c88988e2ed9e4daae77237428df1cb": "Suit les favoris d'une utilisatrice Constellation.",
    "ipa/réseau.md.d834e1068698e7597fcfcd2815a6c369": "`(favoris: `",
    "ipa/réseau.md.f673294f695dd0ff75b75085639d3e39": "`ÉlémentFavorisAvecObjet`",
    "ipa/réseau.md.21bb570f7914cd71a591db86eb7da90d": "./favoris.md#types",
    "ipa/réseau.md.66279598d24fc9ea4149def955061dbb": "Cette fonction sera appelée avec la liste des favoris chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.3e3555dd3582596d61c09428c861d634": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type favoris as favo } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst favoris = ref<favo.ÉlémentFavorisAvecObjet[]>();\n\nconst fOublier = await client.réseau.suivreFavorisMembre({\n    idCompte: \"idCompteDeQuelquUnDautre\",\n    f: x => favoris.value = x,\n})\n\n```",
    "ipa/réseau.md.22694b1cc91d580323395da0c141f2f8": "`client.réseau.suivreFavorisObjet({ idObjet, f, profondeur })`",
    "ipa/réseau.md.1dd3ba91d264bfc04b0d11eb59f7ee28": "Suit les personnes qui ont marqué un objet (base de données, projet, variable ou autre) en tant que favoris.",
    "ipa/réseau.md.532842e26e0445d7e416376d2cad4be8": "`idObjet`",
    "ipa/réseau.md.1a6eb0acaaa15376eebdd19e01b0b7cd": "L'identifiant de l'objet d'intérêt.",
    "ipa/réseau.md.a8b875b6d3bf840f127de36edb9c777e": "`(favoris: ( `",
    "ipa/réseau.md.7fcef753eab4fc3c347240b4ec2d0b36": "` & {idCompte: string} ) []) => void`",
    "ipa/réseau.md.303e996c50735171c07c2eb8a890e8db": "La profondeur à rechercher dans le réseau (relatif au compte actuel).",
    "ipa/réseau.md.6890d8184f4db4d9dcf79641eb1a4545": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type favoris as favo } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst favoris = ref<(favo.ÉlémentFavorisAvecObjet & { idCompte: string })[]>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst fOublier = await client.réseau.suivreFavorisMembre({\n    idObjet: idBd,\n    f: x => favoris.value = x,\n    profondeur: 10,\n})\n\n```",
    "ipa/réseau.md.7cde1dc1c1d108098bde2a59ea8f644c": "`client.réseau.suivreRéplications({ idObjet, f, profondeur })`",
    "ipa/réseau.md.361ffd88e35ebe41bbd7610e6d9086f6": "Suit les réplications d'un objet (base de données, projet, variable ou autre) à travers le réseau Constellation. Similaire à [`client.réseau.suivreFavorisObjet`](#clientréseausuivrefavorisobjet-idobjet-f-profondeur), mais inclut aussi de l'information sur la disponibilité en ligne des copies de l'objet.",
    "ipa/réseau.md.534302e6322db90413d89c012dfa93a6": "`infoRéplications`",
    "ipa/réseau.md.32e324f8de2d5c3ad960c7ff13b42e8e": "#types-replications",
    "ipa/réseau.md.bac17d8ac2bd0fe26057870d19c37336": "Cette fonction sera appelée avec la liste des réplications chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.8854715f0ed039e4533099c391ce124a": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type réseau } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst réplications = ref<réseau.infoRéplications>();\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\n\nconst fOublier = await client.réseau.suivreRéplications({\n    idObjet: idBd,\n    f: x => réplications.value = x,\n    profondeur: 10,\n})\n\n```",
    "ipa/réseau.md.c5291623d143b713c7d7b45951c65207": "Protocoles",
    "ipa/réseau.md.8a45af30566c76693d028d69855362e2": "Constellation permet d'initialiser des dispositifs avec une [liste de protocoles tiers](./client.md#initialisation). Ces protocoles permettent à des applications construites sur Constellation de retrouver leurs membres sur le réseau.",
    "ipa/réseau.md.bf2b6a75d223345c043930e1579ac27e": "`client.réseau.suivreProtocolesMembre({ f, idCompte })`",
    "ipa/réseau.md.9a6397549dd23174582acf5053946584": "Suit les protocoles associés à un membre du réseau Constellation.",
    "ipa/réseau.md.35116c62fb64bf0ff3cf1e4a648c5aa6": "`(protocoles: string[]) => void`",
    "ipa/réseau.md.aec1d977e5e90370f32e817c1a5b04c0": "Cette fonction sera appelée avec la liste des protocoles du compte chaque fois que celle-ci est modifiée.",
    "ipa/réseau.md.bae3c7cdb0c00458d5b033bd6cdbf1b2": "`string",
    "ipa/réseau.md.f4efb63c5af80bb6b89f1ed96d48c4e5": "\\ undefined`",
    "ipa/réseau.md.0a5a361c18d6aa7c956228440d9b1d7b": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst protocoles = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreProtocolesMembre({\n    f: x => protocoles.value = x,\n})\n\n```",
    "ipa/réseau.md.c0e7f4808a82a350f91db73467852040": "`client.réseau.suivreProtocolesDispositif({ f, idDispositif })`",
    "ipa/réseau.md.9bc1c0b19cfc26d722b5a36f12e3b4a3": "Suit les protocoles associés à un dispositif sur le réseau Constellation.",
    "ipa/réseau.md.612aa3c03cf8ec07463117f8e9de0a69": "`idDispositif`",
    "ipa/réseau.md.535556d33cf4e6ee9a1b24f4f0e752dd": "L'identifiant du dispositif dont veut connaître les protocoles. Si non spécifié, Constellation utilisera le dispositif actuel.",
    "ipa/réseau.md.4f3f3614e33bf8fe09f762580726260e": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst protocoles = ref<string[]>();\n\nconst fOublier = await client.réseau.suivreProtocolesDispositif({\n    f: x => protocoles.value = x,\n})\n\n```",
    "ipa/réseau.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/réseau.md.461f44ebd16c7fd1108f3d9f856e6ff2": "Plusieurs types sont associés avec le réseautage Constellation.",
    "ipa/réseau.md.49dcbab63b2d3a85064cd587c6de4fd5": "Types connexions",
    "ipa/réseau.md.ed2945dd44d7b5b45156b44a3b1ad77d": "Ces types sont associés avec les connexions du réseau.",
    "ipa/réseau.md.aba3953d0bad57c93c4d5bfc50f28aa7": "```ts\ninterface infoMembre {\n  idCompte: string;\n  protocoles: string[];\n  dispositifs: infoDispositif[];\n}\n\ninterface statutMembre {\n  infoMembre: infoMembre;\n  vuÀ?: number;\n}\n\ntype infoDispositif = {\n  idSFIP: string;\n  idDispositif: string;\n  idCompte: string;\n  clefPublique: string;\n  signatures: { id: string; publicKey: string };\n  encryption?: { type: string; clefPublique: string };\n};\n\ntype infoMembreRéseau = {\n  idCompte: string;\n  profondeur: number;\n  confiance: number;\n};\n```",
    "ipa/réseau.md.60b46606dda7800cde997c6e89d5c5f8": "Types réplications",
    "ipa/réseau.md.52f1b5304084f9c7be84cc637307a9be": "```ts\ninterface infoRéplications {\n  membres: statutMembre[];\n  dispositifs: (épingleDispositif & {\n    idDispositif: string;\n    idCompte?: string;\n    vuÀ?: number;\n  })[];\n}\n```",
    "ipa/tableaux.md.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "ipa/tableaux.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/tableaux.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/tableaux.md.2e8c5b52995ac6f5d77aa95ca9142393": "Dans Constellation, chaque tableau est défini par un code identifiant et peut ensuite être nommé dans autant de langues que vous le souhaitez.",
    "ipa/tableaux.md.98048168f29c16e5d45f3197a6f3495f": "`client.tableaux.sauvegarderNomTableau({ idTableau, langue, nom })`",
    "ipa/tableaux.md.d0256e50bc2a8312c020343c8b55daf9": "Sauvegarde le nom du tableau dans une langue donnée.",
    "ipa/tableaux.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/tableaux.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/tableaux.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/tableaux.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/tableaux.md.e8d5298dcd65a16b5613dbb681452969": "`idTableau`",
    "ipa/tableaux.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/tableaux.md.6926c7de36f1434eca48312b23cfef79": "L'identifiant du tableau.",
    "ipa/tableaux.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/tableaux.md.0ba18d257f46ea71ef045466b1553633": "Le nom du tableau.",
    "ipa/tableaux.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/tableaux.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/tableaux.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/tableaux.md.491e295e7066aa64a069b0794749e958": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nawait client.tableaux.sauvegarderNomTableau({\n    idTableau, \n    langue: \"fr\", \n    nom: \"Hydrologie\" \n});\n\n```",
    "ipa/tableaux.md.3b7040958297b362a917a33ac47d6851": "`client.tableaux.sauvegarderNomsTableau({ idTableau, noms })`",
    "ipa/tableaux.md.b7e4d4885c813c76df413fe0d7b7cfac": "Sauvegarde le nom du tableau dans plusieurs langues en même temps.",
    "ipa/tableaux.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/tableaux.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/tableaux.md.48d8402211e2b9c91a342ee2f0e27a4d": "Les noms du tableau, indexés par langue.",
    "ipa/tableaux.md.9425eb1dfd6c7717925371d60f9e41cf": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nawait client.tableaux.sauvegarderNomsTableau({ \n    idTableau, \n    noms: { fr: \"Observations\", த: \"கண்காணிப்புகள்\"}\n});\n\n```",
    "ipa/tableaux.md.0b4cb1b34e690fdc63f508f59b83dc7b": "`client.tableaux.effacerNomTableau({ idTableau, langue })`",
    "ipa/tableaux.md.81e042e6c15355dd4b4697183ecba50e": "Efface la traduction du nom du tableau dans une langue donnée.",
    "ipa/tableaux.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/tableaux.md.c3632ad6bc954b61cb3de25b63ce85e1": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nawait client.tableaux.effacerNomTableau({ idTableau, langue: \"fr\" });\n```",
    "ipa/tableaux.md.5db19f168c2eeaac91a2290fb849fda0": "`client.tableaux.suivreNomsTableau({ idTableau, f })`",
    "ipa/tableaux.md.3952a1687f51152ae99b7e10a80bec91": "Suit les noms (traduits en différentes langues) du tableau.",
    "ipa/tableaux.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/tableaux.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/tableaux.md.b969b0290a368728517e9f3473ed848a": "Une fonction qui sera appelée avec les noms du tableau chaque fois qu'ils changent",
    "ipa/tableaux.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/tableaux.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/tableaux.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/tableaux.md.7b5ebd88e59cb5409207661c8b67cef2": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\n\nconst fOublierNoms = await client.tableaux.suivreNomsTableau({ \n    idTableau,\n    f: async noms => {\n        console.log(noms);\n        await fOublierNoms();\n    }\n});\n\nawait client.tableaux.sauvegarderNomsTableau({ \n    idTableau, \n    noms: { fr: \"Observations\", த: \"கண்காணிப்புகள்\"}\n});\n\n```",
    "ipa/tableaux.md.be920cea70712eb09d7f19a3ad4179c7": "Colonnes",
    "ipa/tableaux.md.0765fb44f34044b607fc59af29bac0d8": "Chaque colonne d'un tableau est associé à une variable Constellation.",
    "ipa/tableaux.md.c2875885d0772b123c08f8329e35f41f": "`client.tableaux.ajouterColonneTableau({ idTableau, idVariable, idColonne })`",
    "ipa/tableaux.md.c9715e524493e96ab3d1e66a3a6326f6": "Ajoute une colonne à un tableau.",
    "ipa/tableaux.md.ac1154b44c2979772eb845d22392cc29": "`idVariable`",
    "ipa/tableaux.md.84f28ba30dec248d02d9195d26e40858": "L'identifiant de la variable à associer à la colonne.",
    "ipa/tableaux.md.2cdcce046ca11704a543b9771a6bc86f": "`idColonne`",
    "ipa/tableaux.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/tableaux.md.b321f50cd87f33b943ef9b2f15f482bb": "Identifiant unique (par tableau) pour la colonne. Si non spécifié, Constellation en créera un.",
    "ipa/tableaux.md.3a9ad32b15fa01ed0883900fe7113e01": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"horoDatage\" });\n\nconst idColonne = await client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\n\n```\n",
    "ipa/tableaux.md.53c66fb929f55356c208a42786441d7f": "`client.tableaux.effacerColonneTableau({ idTableau, idColonne })`",
    "ipa/tableaux.md.16d5ba75b2cb75688f4e6099c27572cb": "Efface une colonne d'un tableau.",
    "ipa/tableaux.md.78029cc5253f85a3d58930f1a4235594": "L'identifiant de la colonne.",
    "ipa/tableaux.md.0fec619ca41c5906c07745f04249d59b": "```ts\n// ...continuant de ci-dessus...\nconst idColonne = await client.tableaux.effacerColonneTableau({ idTableau, idVariable });\n```",
    "ipa/tableaux.md.464287fdc17d33bb9306715b79e1a682": "`client.tableaux.suivreColonnesTableau({ idTableau, f, catégories })`",
    "ipa/tableaux.md.2f8e0a852801bcdf9eb11a25af40b383": "Suit les colonnes d'un tableau.",
    "ipa/tableaux.md.5647ada95dfb024b7fb5c21e3f2ca2eb": "`(colonnes:`",
    "ipa/tableaux.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/tableaux.md.595717e257563101464e68c27c46ecb6": "`InfoCol`",
    "ipa/tableaux.md.d92e1f1a9725ebf69853225c869a7214": "#types-colonnes",
    "ipa/tableaux.md.4ce5548d70d3ef3f44456461d3366286": "` | `",
    "ipa/tableaux.md.d4dd3549666bcdd035c0f0c188383962": "`InfoColAvecCatégorie`",
    "ipa/tableaux.md.9a5bcb4926efe0675cf2dc40f5ee28e2": "`) => void`",
    "ipa/tableaux.md.8ccc4b8933a23fd494fee8f70811037b": "Une fonction qui sera appellée avec les colonnes du tableau chaque fois que celles-ci changent.",
    "ipa/tableaux.md.39d2c7e1232952abff96c98d2ea3c96b": "`catégories`",
    "ipa/tableaux.md.5d83b385ea9fcbf16e7f0cf3831be79c": "`boolean | undefined`",
    "ipa/tableaux.md.bc750fd447955611e7a0d5f4f4d07d82": "Si on veut obtenir aussi les catégories des variables des colonnes. Vrai par défaut.",
    "ipa/tableaux.md.317393fa9d7ae1bf9e2d131640d3de69": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type tableaux } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"horoDatage\" });\n\nconst idColonne = await client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\n\nconst colonnes = ref<tableaux.InfoColAvecCatégorie>();\nconst fOublierColonnes = await client.tableaux.suivreColonnesTableau({ \n    idTableau,\n    f: x => colonnes.value = x\n});\n\n```",
    "ipa/tableaux.md.88fa71f0a6e0dfedbb46d91cc0b37a50": "Index",
    "ipa/tableaux.md.94c14811b9af84c9110cb51d125211d0": "Les colonnes d'un tableau peuvent être identifiées en tant que colonnes indexes. Les valeurs de ces colonnes ne peuvent pas être dupliquées parmi les données. Par exemple, si vous spécifiez l'horodatage et le site d'échantillonnage en tant que colonnes indexes, Constellation, lors de tout fusionnement de données, s'assurera que les indexes ne soient pas dupliqués et combinera les rangées avec des sites et horodatages identiques.",
    "ipa/tableaux.md.0dadc7c088b318c78bd72cd68218d3aa": "`client.tableaux.changerColIndex({ idTableau, idColonne, val })`",
    "ipa/tableaux.md.0f4cadbfb438d91142d41d4062f21681": "Change le statut d'index d'une colonne.",
    "ipa/tableaux.md.924309e48fe24bad5f02549d829f3d21": "`val`",
    "ipa/tableaux.md.f0d0c937b986116f4c6a920937f6eeb9": "`boolean`",
    "ipa/tableaux.md.1def5af1d8b164ff755aa5b8b9e2081e": "Si la colonne est une colonne indexe ou non.",
    "ipa/tableaux.md.88da41ddc2d90a416e30e9892a8ffd75": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"horoDatage\" });\n\nconst idColonne = await client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\n\nawait client.tableaux.changerColIndex({ \n    idTableau,\n    idColonne,\n    val: true\n});\n\n```",
    "ipa/tableaux.md.f2d6cee9a88e653fc5b218ac870a3d21": "`client.tableaux.suivreIndex({ idTableau, f })`",
    "ipa/tableaux.md.ca75d3b5768b939d9b8d012bf980703c": "`(colonnes: string[]) => void`",
    "ipa/tableaux.md.a7a387ae223cb16b65002f7c989a6311": "Une fonctionne qui sera appellée avec les identifiants des colonnes indexes chaque fois que ceux-ci changent.",
    "ipa/tableaux.md.e3afa0e21e611f737ad3551c00f3f860": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\n\nconst indexes = ref<string[]>();\nconst fOublierIndexes = await client.tableaux.suivreIndex({ \n    idTableau,\n    f: x => indexes.value = x\n});\n\n```",
    "ipa/tableaux.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/tableaux.md.bafe26ecf4f48dc15774f25a796a5a4f": "Vous pouvez suivre la liste des variables associées avec un tableau.",
    "ipa/tableaux.md.14cd286b8d40dfe4236da7d66a0a2092": "`client.tableaux.suivreVariables({ idTableau, f })`",
    "ipa/tableaux.md.4bb73a5e9ed5c4561f4ab1617987f168": "Suit les variables associées au tableau.",
    "ipa/tableaux.md.b6f5ae07b20f4368683b161d6c447260": "`suivreVariables`",
    "ipa/tableaux.md.f1cf11cb32c37e2baabd3c8b619eb429": "`(variables: string[]) => void`",
    "ipa/tableaux.md.5b0094d04fdb60f17c78f56f6161b2b3": "Une fonction qui sera appelée avec la liste des identifiants des variables associées au tableau chaque fois que celle-ci change.",
    "ipa/tableaux.md.460b8298e78689d9f11b06eedda97000": "Données",
    "ipa/tableaux.md.f62530d9a1a7cd4b156aa6d7efd3ced4": "Ces fonctions vous permettent d'observer et de modifier les données d'un tableau.",
    "ipa/tableaux.md.ec898919c65487679a883bca112aca55": "`client.tableaux.ajouterÉlément({ idTableau, vals })`",
    "ipa/tableaux.md.b6cb71e3b1ac6ee377fc9dae6da01ee6": "Ajoute un élément à un tableau.",
    "ipa/tableaux.md.548ea3fa41e6b9eb5c1c0082d48d6557": "`vals`",
    "ipa/tableaux.md.a30c3a80cff5e28dba7695ccd7c8dc74": "`élémentBdListeDonnées`",
    "ipa/tableaux.md.1cac7a4f1ef1356e7b4c4581e8af3976": "#types-donnees",
    "ipa/tableaux.md.91102763ccc1eb302066a32af0106721": "Les données à ajouter.",
    "ipa/tableaux.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/tableaux.md.dd3bbe0b996a4ace656743b1a912a54e": "L'empreinte (identifiant unique) de l'élément ajouté.",
    "ipa/tableaux.md.8fd9f1c7b060ed6d0d4a2bb34da6d7e1": "```ts\nimport { ref } from \"vue\";\nimport { générerClient, type bds, type tableaux } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\n// Créer nos variables\nconst idVarSite = await client.variables.créerVariable({ \n    catégorie: 'chaîneNonTraductible'\n});\nconst idVarDate = await client.variables.créerVariable({ \n    catégorie: 'horoDatage'\n});\nconst idVarTempérature = await client.variables.créerVariable({ \n    catégorie: 'numérique'\n});\n\n// Créer notre base de données\nconst idBd = await client.bds.créerBd({ licence: \"ODbl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\nconst idColSite = await client.tableaux.ajouterColonneTableau({\n  idTableau,\n  idVariable: idVarSite,\n});\nconst idColDate = await client.tableaux.ajouterColonneTableau({\n  idTableau,\n  idVariable: idVarDate,\n});\nconst idColTempérature = await client.tableaux.ajouterColonneTableau({\n  idTableau,\n  idVariable: idVarTempérature,\n});\n\n// Enfin, ajouter les données\nconst empreinteDonnées = await client.tableaux.ajouterÉlément({ \n  schémaBd, \n  idNuéeUnique, \n  clefTableau: CLEF_TABLEAU,\n  vals: {\n    \"site\": \"mon site d'observation\",\n    \"date\": Date.now(),\n    \"température\": 52.2,\n  },\n});\n```",
    "ipa/tableaux.md.d84b999a8d0cc6176c7745dccd76565b": "`client.tableaux.modifierÉlément({ idTableau, vals, empreintePrécédente })`",
    "ipa/tableaux.md.25e51c6bd9d0825aa692be29fc8af915": "Modifie un élément d'un tableau.",
    "ipa/tableaux.md.83a764faaacf61cdc8f4d20883a7e57b": "{ [idColonne: string]: ",
    "ipa/tableaux.md.96a1512c6abe31665661fbb7588fc6f2": "`élémentsBd`",
    "ipa/tableaux.md.937082e8024a3078e9c8a2d248e8b37a": "./tableaux.md#types-donnees",
    "ipa/tableaux.md.3d0401d7425836ed8040113c4b4a974b": " | undefined }",
    "ipa/tableaux.md.f451ecc636a1182d90e012802f9b9b43": "Les données à jour. Si une colonne n'apparaît pas sur ",
    "ipa/tableaux.md.6b1ee11822ed68c5b5cf1692a5f653f5": ", elle ne sera pas modifiée. Si, au contraire, elle est égale à ",
    "ipa/tableaux.md.25ff8226df52176acc18ba77dacc683d": "`undefined`",
    "ipa/tableaux.md.7ec1e4a3e6842d7d4bbed0fa7361706c": ", la valeur correspondante sera effacée.",
    "ipa/tableaux.md.7dc9eabe4196ed9317f17df83f35dd85": "`empreintePrécédente`",
    "ipa/tableaux.md.c648dfe9da0fd2c93ad9a81cab747705": "L'empreinte de l'élément à modifier.",
    "ipa/tableaux.md.e2dd3407eca4ac211d09e8c3de170251": "L'empreinte (identifiant unique) de l'élément modifié.",
    "ipa/tableaux.md.99bac733ecb8d826684ccf1153af735b": "```ts\n// ...continuant de ci-dessus...\n\nawait client.tableaux.modifierÉlément({ \n  idTableau,\n  vals: {\n    [idColTempérature]: 38.2 ,\n  },\n  empreintePrécédente: empreinteDonnées,\n});\n```",
    "ipa/tableaux.md.6ce4b0a94886bf4b5cd8fafe2531622d": "`client.tableaux.effacerÉlément({ idTableau, empreinte })`",
    "ipa/tableaux.md.f8d4d1c3d0872b5d3d127537c899d3d7": "Efface un élément d'un tableau.",
    "ipa/tableaux.md.f4f02dc821adc9777eaa1a06be937642": "`empreinte`",
    "ipa/tableaux.md.a8d2d930ef5182a5b06a28823d7d0ac1": "L'empreinte de la rangée à effacer.",
    "ipa/tableaux.md.3f99f67621fb3de4184eb1c7a16ab176": "```ts\n// ...continuant de ci-dessus...\nawait client.tableaux.effacerÉlément({ \n  idTableau, \n  empreinte: empreinteDonnées,\n});\n```",
    "ipa/tableaux.md.36f4a1378c85fa41f309af18b56a7d07": "`client.tableaux.suivreDonnées({ idTableau, f, clefsSelonVariables })`",
    "ipa/tableaux.md.c8184be658e7da138913c6cf7a41efbc": "Suit les données d'un tableau.",
    "ipa/tableaux.md.9b74c6b2fddc0917eb088a5767f3bd8d": "`(données:`",
    "ipa/tableaux.md.7efa417fe12389bf82e9a41c886a30c0": "`élémentDonnées`",
    "ipa/tableaux.md.5655a12ef8509610b02e762c33f45b8f": "`[]) => void`",
    "ipa/tableaux.md.fb0697a8e150a414148ca32df9881dc5": "La clef du tableau dont nous voulons suivre les données. Doit exister dans ",
    "ipa/tableaux.md.244538f6a60292b90b45b70c8f0b0451": "`schémaBd`",
    "ipa/tableaux.md.5058f1af8388633f609cadb75a75dc9d": ".",
    "ipa/tableaux.md.0a0dbefd760bbe2305e67b1a4af2c801": "`clefsSelonVariables`",
    "ipa/tableaux.md.22239e428763346e9aae3fc365aa35b5": "Si nous voulons utiliser les identifiants des variables (au lieu de l'identifiant des colonnes) pour les clefs des valeurs. Faux par défaut.",
    "ipa/tableaux.md.e3b005f6370fc65f8f6068cc55a91972": "```ts\n// ...continuant de ci-dessus...\n\nconst données = ref<tableaux.élémentDonnées[]>();\nconst fOublierDonnées = await client.tableaux.suivreDonnées({ \n    idTableau,\n    f: x => données.value = x,\n });\n\n```",
    "ipa/tableaux.md.5120290b9c4b69dc2054936b425541d2": "Règles",
    "ipa/tableaux.md.aad87cc963663feb6706f5116c5ddf5a": "Vous pouvez ajouter des règles de validation des données directement aux tableaux. Pour voir toutes les possibilités de règles permises, voir la [section correspondante](./règles.md).",
    "ipa/tableaux.md.fc4aabb3475ce66eddf62bad9954b41f": "`client.tableaux.ajouterRègleTableau({ idTableau, idColonne, règle })`",
    "ipa/tableaux.md.20f3f948d4757f9bb36b79c63362e485": "Ajoute une règle de validation à un tableau.",
    "ipa/tableaux.md.312a6f6ae6c74e6a4c4a5a9235b83978": "`règle`",
    "ipa/tableaux.md.ea27b8ef203d9ac9968686564c5428db": "`valid.règleVariable`",
    "ipa/tableaux.md.238d3fa8d4efe133aab319dd4eb74e19": "./règles.md",
    "ipa/tableaux.md.76baf246356359181e566fd3984505d9": "La règle à ajouter.",
    "ipa/tableaux.md.a8a64f8103dd7f2e1d461f8a57116375": "L'identifiant unique de la nouvelle règle.",
    "ipa/tableaux.md.89d036abfb387299bc838b8ab2d92e38": "```ts\nimport { ref } from \"vue\";\nimport { générerClient } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({ licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst idColonne = await client.tableaux.ajouterColonneTableau({ idTableau, idVariable });\n\nconst règle: valid.règleBornes = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \">=\",\n    },\n};\nconst idRègle = await client.tableaux.ajouterRègleTableau({ idTableau, idColonne, règle })\n\n```",
    "ipa/tableaux.md.b83977452dcb20294068416598807153": "`client.tableaux.effacerRègleTableau({ idTableau, idRègle })`",
    "ipa/tableaux.md.c42fa0f1ef0ef0aed43546488e232ae0": "L'identifiant de la règle à effacer.",
    "ipa/tableaux.md.5384faebceb69ab6791a8fec160e8ea8": "```ts\n// ...continuant de ci-dessus...\nawait client.tableaux.effacerRègleTableau({ idTableau, idRègle })\n\n```",
    "ipa/tableaux.md.a184e7c2acaf8c9dc02bf5807187b00a": "`client.tableaux.suivreRègles({ idTableau, f })`",
    "ipa/tableaux.md.87464439bac8c87aef02e1ee307732a3": "Suit les règles associées au tableau.",
    "ipa/tableaux.md.3b9dc3cb82a65eb8b6fabc2f8e2d90b1": "`(règles:`",
    "ipa/tableaux.md.ad76241556ef743256b99a23c65e8b42": "`valid.règleColonne`",
    "ipa/tableaux.md.fcc008f3fb3dd311a61c968c746bdf1a": "./règles.md#types",
    "ipa/tableaux.md.d1096589395d68637bfaa6476c791a82": "` []) => void`",
    "ipa/tableaux.md.d3ef75669bccbbbbdeda0a849490a59d": "Une fonction qui sera appelée avec les règles du tableau chaque fois que celles-ci changent.",
    "ipa/tableaux.md.2f44c85e3f46dabfe39f6f5afa5e3e3d": "```ts\n// ...continuant de ci-dessus...\n\nconst règles = ref<valid.règleColonne[]>();\n\nconst fOublierRègles = await client.tableaux.suivreRègles({ \n    idTableau,\n    f: x => règles.value = x,\n});\n\n```",
    "ipa/tableaux.md.13148717f8faa9037f37d28971dfc219": "Validation",
    "ipa/tableaux.md.d9a2e10e52df2c1d66f051829260f250": "Constellation vous permet de valider les données des tableaux.",
    "ipa/tableaux.md.d2051760ab9ee53f1ab6bed802c5d4f0": "`client.tableaux.suivreValidDonnées({ idTableau, f })`",
    "ipa/tableaux.md.8ec04d0631a5e88263c02a71f80af17d": "Suit les erreurs de validation des données du tableau.",
    "ipa/tableaux.md.f3215e29611cbcec53d6185b806b382e": "`(erreurs:`",
    "ipa/tableaux.md.0413a92fdfa91d7c0ccbfbd0d8bea881": "`valid.erreurValidation`",
    "ipa/tableaux.md.5c273ef87df0d75336aabd7d5f8e199b": "./règles.md#types-erreurs",
    "ipa/tableaux.md.34a09f3445d1a48c2987df6f75ed15e4": "`[]) => void`",
    "ipa/tableaux.md.452ae0f366811cef9be13a05bd8cdbce": "Une fonction qui sera appelée avec les erreurs de validation du tableau chaque fois que celles-ci changent.",
    "ipa/tableaux.md.b68d04d88e3b2426d574d21c01401773": "```ts\n// ...continuant de ci-dessus...\n\nconst erreursValidation = ref<valid.erreurValidation[]>();\n\nconst fOublierRègles = await client.tableaux.suivreValidDonnées({ \n    idTableau,\n    f: x => erreursValidation.value = x,\n});\n\n```",
    "ipa/tableaux.md.41e4f99666ecbd03eba9be5101c51746": "`client.tableaux.suivreValidRègles({ idTableau, f })`",
    "ipa/tableaux.md.476c87266c12ba882fe7aa7bc76307ce": "Suit les erreurs présentes dans les règles elles-mêmes. Ces erreurs peuvent indiquer si:",
    "ipa/tableaux.md.a0a73106765d1a65338712b38f37e68c": "* La colonne associée à une règle catégorique n'existe pas.\n* La colonne associée à une règle de bornes n'existe pas sur ce tableau.\n* Aucune colonne sur ce tableau n'a la variable associée à une règle de bornes.",
    "ipa/tableaux.md.c6645c5b184e9d120a79ccd63f9b4379": "`valid.erreurRègle`",
    "ipa/tableaux.md.fad974c4f8173b7506adc3d2dda9ccb0": "Une fonction qui sera appelée avec les erreurs des règles du tableau chaque fois que celles-ci changent.",
    "ipa/tableaux.md.da4c15322d69e12ade4cf40b3dfabc40": "```ts\n// ...continuant de ci-dessus...\n\nconst erreursRègles = ref<valid.erreurRègle[]>();\n\nconst fOublierRègles = await client.tableaux.suivreValidRègles({ \n    idTableau,\n    f: x => erreursRègles.value = x,\n});\n\n```",
    "ipa/tableaux.md.6beae5f4ff97c574d7967ab1601e70f8": "Importation et exportation",
    "ipa/tableaux.md.5b5a7ae6801462855017d7f4939a2346": "Vous pouvez importer et exporter des données d'un tableau.",
    "ipa/tableaux.md.7ec046478beef4eeac7a429177adbe1a": ":::tip ASTUCE\nVous pouvez également [automatiser](./automatisations.md) ces actions !\n:::",
    "ipa/tableaux.md.73714d0664e7f6e22e63415a7819f2ea": "`client.tableaux.importerDonnées({ idTableau, données, conversions, cheminBaseFichiers })`",
    "ipa/tableaux.md.8cfe86b4636bb96bd63e2f58a81e98d0": "Importer des données vers un tableau Constellation.",
    "ipa/tableaux.md.b012ddb71ae2b40f2d2b92df49cec86f": "`données`",
    "ipa/tableaux.md.c7b8f376121a1386fc36be23bee97a97": "#types-données",
    "ipa/tableaux.md.0d8556e5cc1087ebe3a2605b5fc85d58": "Les données à importer.",
    "ipa/tableaux.md.6d91eb42a6d9632eae8594c8e5598f78": "`conversions`",
    "ipa/tableaux.md.0c9333cfc1a99870847f7c69a0f6e3bd": "`{ [col: string]: `",
    "ipa/tableaux.md.edec212d64cdba91ce558a4c213e9696": "`tableaux.conversionDonnées`",
    "ipa/tableaux.md.a11d3efee67b1e28e8bd768ed0679fd0": "#types-conversions-donnees",
    "ipa/tableaux.md.039ab1a5bc871e33ea3ba64c5386e35b": "` } | undefined`",
    "ipa/tableaux.md.9ad125d43bd98a8cb502a20731bde6d1": "Optionnellement, des conversions à appliquer aux données importées.",
    "ipa/tableaux.md.0c9f1735559482b502d882be63cbcc03": "`cheminBaseFichiers`",
    "ipa/tableaux.md.2a3006cb2ab91067834b32f39c0dca8f": "Optionnellement, un dossier de base pour résoudre des références à des fichiers locaux (par exemples, des documents ou des images) pour des variables de type ",
    "ipa/tableaux.md.a94480ce7c3cee3a35330c424305586e": "`image`",
    "ipa/tableaux.md.fc763cb31e9938f37737394681228f83": ", ",
    "ipa/tableaux.md.f06bcbd707a49700b741f743ef5e3415": "`audio`",
    "ipa/tableaux.md.5417cd01ccc019ea15a55a6cb71d7d8b": "`vidéo`",
    "ipa/tableaux.md.7d45451a4b0968045d4e14a2332a931a": " ou bien ",
    "ipa/tableaux.md.56c73af88810974cf47383c425bfe5f6": "`fichier`",
    "ipa/tableaux.md.109ff9b76ed4b3026a5c7adc72d80712": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\nconst idTableau = await client.tableaux.créerTableau({ idBd });\n\nconst idVarDate = await client.variables.créerVariable({\n  catégorie: \"horoDatage\",\n});\nconst idVarEndroit = await client.variables.créerVariable({\n  catégorie: \"chaîneNonTraductible\",\n});\nconst idVarTempMin = await client.variables.créerVariable({\n  catégorie: \"numérique\",\n});\nconst idVarTempMax = await client.variables.créerVariable({\n  catégorie: \"numérique\",\n});\n\nconst idsCols = {};\nfor (const idVariable of [\n  idVarDate,\n  idVarEndroit,\n  idVarTempMin,\n  idVarTempMax,\n]) {\n  const idCol = await client.tableaux!.ajouterColonneTableau({\n    idTableau,\n    idVariable,\n  });\n  idsCols[idVar] = idCol;\n}\n\nconst nouvellesDonnées = [\n  {\n    [idsCols[idVarEndroit]]: \"ici\",\n    [idsCols[idVarDate]]: \"2023-01-01\",\n    [idsCols[idVarTempMin]]: 101,  // Ouach! Fahrenheit...\n  },\n  {\n    [idsCols[idVarEndroit]]: \"là\",\n    [idsCols[idVarDate]]: \"2023-01-01\",\n    [idsCols[idVarTempMax]]: 110,\n  },\n];\n\n// Convertir à centigrades\nconst fÀC = {\n  type: \"numérique\";\n  opération: [\n    { op: \"-\", val: 32 },\n    { op: \"*\", val: 5/9 }\n  ]\n}\n\n// Finalement, importer les données\nawait client.tableaux.importerDonnées({\n  idTableau,\n  données: nouvellesDonnées,\n  conversions: {  \n    [idsCols[idVarTempMin]]: fÀC,\n    [idsCols[idVarTempMaxx]]: fÀC,\n  }\n});\n```",
    "ipa/tableaux.md.7a031f9b44f799bfc40dc5942cf2fbef": "`client.tableaux.exporterDonnées({ idTableau, langues, doc, nomFichier })`",
    "ipa/tableaux.md.5f7fc11a8243fa011a34dcd3a58890ff": "Exporte des données d'un tableau Constellation, mais ne le sauvegarde pas immédiatement au disque.",
    "ipa/tableaux.md.c367293251b9dc85c3717b3636e2e8f0": "`langues`",
    "ipa/tableaux.md.33d75c5b6a7ab941e46a72f4ab4c83ed": "`string[] | undefined`",
    "ipa/tableaux.md.bf459fd82d02f8f79382424d7b0bc1b0": "Si vous voulez que les colonnes et les tableaux portent leurs noms respectifs au lieu de leurs identifiants uniques, la liste de langues (en ordre de préférence) dans laquelle vous souhaitez recevoir les données. Une liste vide utilisera, sans préférence, n'importe quelle langue parmi celles disponibles.",
    "ipa/tableaux.md.ffc8fb0482c8fe3b3d0e67036ec6a661": "`doc`",
    "ipa/tableaux.md.3c0fa5ae41f551cae68bccbb01c61bb2": "`xlsx.WorkBook | undefined`",
    "ipa/tableaux.md.e0a35c6f6a2cdc7899cd06e83e9ef843": "Optionnellement, un document ",
    "ipa/tableaux.md.b708ada1f2493564d0da2aa6c16cf8db": "`xlsx.WorkBook`",
    "ipa/tableaux.md.04745789ca63176408a4f8fa36438e5e": " existant auquel ajouter le tableau. Si non défini, un nouveau document ",
    "ipa/tableaux.md.451ce78486e3e651fb2fbd899c133ed9": " sera créé.",
    "ipa/tableaux.md.2e99ff4542ff31fec1f90b208355f495": "`nomFichier`",
    "ipa/tableaux.md.17153153d0625642e1d0e17f3fd71447": "`string | undefined`",
    "ipa/tableaux.md.756bc801d26c53b64d352b850e246c1e": "Le nom du fichier que vous voulez créer. Si non spécifier, Constellation utilisera le nom du tableau si ",
    "ipa/tableaux.md.14083129209edef23b1f62b9e19988ec": "`langues !== undefined`",
    "ipa/tableaux.md.d5d29832e23e79e90fc1db99325c5d3a": " ou, à défaut, l'identifiant unique du tableau.",
    "ipa/tableaux.md.0ddb7fc27f94a2e9ca55a997d2bdef8b": "`Promise<`",
    "ipa/tableaux.md.e3d9e70bcc2ea18b27ba77bde0bf4980": "`donnéesBdExportées`",
    "ipa/tableaux.md.eebd67afe2148ed38395bf5c78d79e8a": "./bds.md#donnees-exportees",
    "ipa/tableaux.md.54f767565a8e4eb4e6a46684f0b8eba9": "`>`",
    "ipa/tableaux.md.15921dc5d1b7c7d93ad1376b9e8b667b": "Les données exportées, prètes à être écrites à un fichier de votre choix.",
    "ipa/tableaux.md.34005a26967e5dc17bf7c6e83a988b69": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idBd = await client.bds.créerBd({  licence: \"ODBl-1_0\" });\nconst idTableau = await client.bds.ajouterTableauBd({ idBd });\n\n// ... ajouter des colonnes et des données ...\n\nconst donnéesExportées = await client.tableaux.exporterDonnées({ \n    idTableau, \n    langues: [\"fr\", \"த\", \"kaq\"],\n});\n\n// Faire quelque chose avec le document\n\n```",
    "ipa/tableaux.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/tableaux.md.88ca3f2a93dcdedd044cab7aac0fa7b2": "Plusieurs types sont associés aux tableaux Constellation et à leurs données.",
    "ipa/tableaux.md.6508ba6139841bc0a75feeb79ccf0b26": "Types données",
    "ipa/tableaux.md.30228c115bf3e6afcbce2b8f7bae6699": "```ts\n// Représente une rangé de données provenant d'un tableau\ninterface élémentDonnées<\n  T extends élémentBdListeDonnées = élémentBdListeDonnées\n> {\n  données: T;\n  empreinte: string;  // Identifiant unique de la rangé de données\n}\n\ntype élémentBdListeDonnées = {\n  [key: string]: élémentsBd;\n};\n\n// Représente tout type de données pouvant être sauvegardé à orbit-db\ntype élémentsBd =\n  | number\n  | boolean\n  | string\n  | { [clef: string]: élémentsBd }\n  | Array<élémentsBd>;\n\n```",
    "ipa/tableaux.md.7f7bce8c3f6af37ec44701dd6c09645b": "Types colonnes",
    "ipa/tableaux.md.48d09da3885091f11ab5430e51187d1d": "Ces types sont associés avec les informations des colonnes des tableaux.",
    "ipa/tableaux.md.0e9b7db3f9d8b5b8b733bb3bcfe78cb5": "```ts\ntype InfoCol = {\n  id: string;\n  variable: string;\n  index?: boolean;\n};\n\ntype InfoColAvecCatégorie = InfoCol & {\n  catégorie?: catégorieVariables;\n};\n```",
    "ipa/tableaux.md.e7932b453533f4f2d45f224b0bf84bf6": "Types conversions données",
    "ipa/tableaux.md.827274fd0fda54161c064f87a069035f": "```ts\nexport type conversionDonnées =\n  | conversionDonnéesNumérique\n  | conversionDonnéesDate\n  | conversionDonnéesChaîne;\n\nexport type conversionDonnéesNumérique = {\n  type: \"numérique\";\n  opération?: opérationConversionNumérique | opérationConversionNumérique[];\n  systèmeNumération?: string;\n};\n\nexport type opérationConversionNumérique = {\n  op: \"+\" | \"-\" | \"/\" | \"*\" | \"^\";\n  val: number;\n}\n\nexport type conversionDonnéesDate = {\n  type: \"horoDatage\";\n  système: string;\n  format: string;\n};\nexport type conversionDonnéesChaîne = {\n  type: \"chaîne\";\n  langue: string;\n};\n```",
    "ipa/variables.md.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "ipa/variables.md.9f24cc97cfc481bfdca087fd086f8c2a": "Les variables sont associées aux colonnes des tableaux de données. Elles peuvent être partagées entre différentes bases de données.",
    "ipa/variables.md.0634ec80feac6987af705c33449d4690": "[[toc]]",
    "ipa/variables.md.cbf5d231135412fb14429e086c09a722": "Général",
    "ipa/variables.md.e0006ec65d1a392004c2c5834d98a47b": "Actions générales pour gérer vos variables.",
    "ipa/variables.md.6b19ef926bbe4ddb1429dd483aa9003a": "`client.variables.suivreVariables({ f })`",
    "ipa/variables.md.18454950df403106e1fdaa0eb550ad78": "Recherche les variables appartenant au compte présent. Pour rechercher des variables d'autres utilisatrices sur le réseau Constellation, voir la section [réseau](./réseau.md).",
    "ipa/variables.md.e7785de91330713fc2d12404bb6bd556": "Paramètres",
    "ipa/variables.md.d4700b697a54fbd43a1a613d32694e7f": "Nom",
    "ipa/variables.md.a1fa27779242b4902f7ae3bdd5c6d508": "Type",
    "ipa/variables.md.b5a7adde1af5c87d7fd797b6245c2a39": "Description",
    "ipa/variables.md.24b1449403422d266770859e99901e50": "`f`",
    "ipa/variables.md.f1cf11cb32c37e2baabd3c8b619eb429": "`(variables: string[]) => void`",
    "ipa/variables.md.a652cf91f00bd45d0eb779d08ddbc122": "Cette fonction sera appelée avec la liste des identifiants des variables retrouvées chaque fois que celle-ci est modifiée.",
    "ipa/variables.md.7727eb7488be3ef30da590f1f667181e": "Retour",
    "ipa/variables.md.2c5fc3367e0c1fc67cebead576bf1245": "`Promise<() => Promise<void>>`",
    "ipa/variables.md.8eda9abb84df311d55792bad87adc0fb": "Fonction à appeler pour arrêter le suivi.",
    "ipa/variables.md.63264e32bdd7447cda85527b16d39cb4": "Exemple",
    "ipa/variables.md.0d8edcfb580c3f5fa89f94ca061d9c52": "```ts\nimport { ref } from \"vue\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst variables = ref<string[]>();\nawait client.variables.suivreVariables({ f: x => variables.value = x });\n\n```",
    "ipa/variables.md.590100c043bc8f151893c4c902a6f8e4": "`client.variables.créerVariable({ catégorie })`",
    "ipa/variables.md.e02660969f3d6eee9770a88d7d68a802": "Crée une nouvelle variable.",
    "ipa/variables.md.e8b7f1e8f4451e2b876378d5456daf3c": "`catégorie`",
    "ipa/variables.md.8f4fa719f5e3868d8710a5651aee660a": "`catégorieVariables`",
    "ipa/variables.md.a6e262e82fb81209c1dd3be3ea96b9ed": "#catégorievariables",
    "ipa/variables.md.7215ee9c7d9dc229d2921a40e899ec5f": " ",
    "ipa/variables.md.6544f41493de8c467288a7b6f13614d5": "`|`",
    "ipa/variables.md.43c45c52581201ad41e82528d7be6dd5": "`catégorieBaseVariables`",
    "ipa/variables.md.8a62d6cba24d3f84878c90598a1fd5d5": "#catégoriebasevariables",
    "ipa/variables.md.be1910e71debc2d358a11d4b5c72dcb7": "La catégorie de la variable.",
    "ipa/variables.md.c01ffa91a699d5ba4c2c064e6a8651ba": "`Promise<string>`",
    "ipa/variables.md.264ddc4fba7d8f5250c954cd6d3bf2ed": "L'identifiant de la nouvelle variable.",
    "ipa/variables.md.75d5c5e7bd4ae11c85470547e6a2b417": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: 'numérique' });\n\n```",
    "ipa/variables.md.e01f7f5bfc152527ebb81a11040cbc9d": "`client.variables.copierVariable({ idVariable })`",
    "ipa/variables.md.c1c1598bf13f3a0af58b1400e980fbe9": "Crée une copie d'une variable.",
    "ipa/variables.md.ac1154b44c2979772eb845d22392cc29": "`idVariable`",
    "ipa/variables.md.979a72bfc50ecce24e3bd7ae7d658940": "`string`",
    "ipa/variables.md.d1faede5ad16297b1dce8b6754b06698": "L'identifiant de la variable à copier.",
    "ipa/variables.md.d14cc34d764da3b247c887ef90ed348e": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: 'numérique' });\nconst idCopie = await client.variables.copierVariable({ idVariable });\n\n```",
    "ipa/variables.md.a51a4b2d2ae4ab06398cc4207c4f6c50": "`client.variables.inviterAuteur({ idVariable, idCompteAuteur, rôle })`",
    "ipa/variables.md.748b4a8931de25af1f6a850243ab448b": "Inviter une autre utilisatrice à modifier une variable qui vous appartient. Attention ! Une fois invitée, une personne ne peut pas être désinvitée.",
    "ipa/variables.md.d52d59fbb3a7e4e67c5a4d55b1a4b8cf": "L'identifiant de la variable.",
    "ipa/variables.md.5f523e9c641763878a7c1d58f7ff551a": "`idCompteAuteur`",
    "ipa/variables.md.0b22551d38821b87dd5f2d8afb54bf99": "L'identifiant du compte de la personne à inviter.",
    "ipa/variables.md.0aba6bfc2bc9746b9de9cf27f5bf563b": "`rôle`",
    "ipa/variables.md.1b759b5f078d84d684dae5a31e658568": "`\"MODÉRATEUR\"",
    "ipa/variables.md.fc07da5e3e15db4bea9077d0c20d9797": "\"MEMBRE\"`",
    "ipa/variables.md.77b001322c8f2811c5d92da7b7f80caa": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"chaîne\" });\nawait client.variables.inviterAuteur({ \n    idVariable, \n    idCompteAuteur: \"idDuCompteDeMonAmiÀQuiJeFaisConfiance\",\n    rôle: \"MODÉRATEUR\" \n});\n\n```",
    "ipa/variables.md.567489003c2b585a2f97e3f522750940": "`client.variables.effacerVariable({ idVariable })`",
    "ipa/variables.md.9f901ff73a97056a564b9535146fd2ed": "Effacer une variable. Étant donné la structure distribuée de Constellation, cette action effacera la variable de votre dispositif, mais ne pourra pas forcer les autres membres du réseau à l'effacer également.",
    "ipa/variables.md.38eab1f9f4fba95fec810f383802a0e4": "L'identifiant de la variable à effacer.",
    "ipa/variables.md.2aed4b1aa154a54b9e12b2985f274b2f": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: 'numérique' });\nawait client.variables.effacerVariable({ idVariable });\n\n```",
    "ipa/variables.md.5fe66f7496aabe43b025eab258405b79": "`client.variables.suivreQualitéVariable({ idVariable })`",
    "ipa/variables.md.60b44a9f03a8b6c127e1545eacee16c5": "Suivre une mesure (subjective, de 0 à 1) de la qualité d'une variable. 1 indique la meilleure qualité.",
    "ipa/variables.md.013ed850c5ad93072899dd415f3953ad": "`(qualité: number) => void`",
    "ipa/variables.md.9662bf68e6c1ede94efdcb2f37c13160": "Une fonction qui sera appelée avec la qualité de la variable chaque fois que celle-ci change.",
    "ipa/variables.md.92f3cf5e69adbe46f53222192d3c8bfc": "```ts\nimport { ref } from \"vue\";\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst qualité = ref<number>();\nconst fOublierSuivi = await client.variables.suivreQualitéVariable({ \n    idVariable,\n    f: x => qualité.value = x\n});\n\n```",
    "ipa/variables.md.b4d433ccc86a815a173147b0e9fa3502": "Noms",
    "ipa/variables.md.cccb122097877a7416b54a9275163d30": "Dans Constellation, chaque variable est définie par un code identifiant et peut ensuite être nommée dans autant de langues que vous le souhaitez.",
    "ipa/variables.md.ebe53770b16324e2da07f82de6eb5e4a": "`client.variables.sauvegarderNomVariable({ idVariable, langue, nom })`",
    "ipa/variables.md.40cd40643fe4737b8c8636094a6195a3": "Sauvegarde le nom de la variable dans une langue donnée.",
    "ipa/variables.md.1025b45e6ad7a8048372b495709cf7fd": "`nom`",
    "ipa/variables.md.6c7bfd384936bda0e24b6851052034a5": "Le nom de la variable.",
    "ipa/variables.md.67981a549a8956361a72495b33d25e45": "`langue`",
    "ipa/variables.md.f468c1447f4223ee2f2fbc9703160529": "La langue du nom.",
    "ipa/variables.md.f7ec0599828e632b4c9fcb6d49b8a425": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderNomVariable({\n    idVariable, \n    langue: \"fr\", \n    nom: \"Précipitation\" \n});\n\n```",
    "ipa/variables.md.d518a8279b5ebe87a1b674ccdc5d6b45": "`client.variables.sauvegarderNomsVariable({ idVariable, noms })`",
    "ipa/variables.md.e134e9c26dd42dcaabd677ac2b303b29": "Sauvegarde le nom de la variable dans plusieurs langues en même temps.",
    "ipa/variables.md.0179bd621b91910ce9f3dcb4b5861b2d": "`noms`",
    "ipa/variables.md.e8e285ce1e0ec1d43de8ba6de56a2fc1": "`{ [langue: string]: string }`",
    "ipa/variables.md.4786891a95f2e11ae267bccbed893be5": "Les noms de la variable, indexés par langue.",
    "ipa/variables.md.4607988408fddb9f84e46dcf186a25a1": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderNomsVariable({ \n    idVariable, \n    noms: { fr: \"Précipitation\", த: \"மழைப்பொழிவு\"}\n});\n\n```",
    "ipa/variables.md.3054809015c7a6a61d5b9bceac81c987": "`client.variables.effacerNomVariable({ idVariable, langue })`",
    "ipa/variables.md.64ee5edbc727f6396219c1a095345544": "Efface la traduction du nom de la variable dans une langue donnée.",
    "ipa/variables.md.fbb8d44f9cc34da58fde9449e4750520": "La langue dont ont doit effacer le nom.",
    "ipa/variables.md.429e088ee59bdab5dfd2810ba16c8719": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.effacerNomVariable({ idVariable, langue: \"fr\" });\n```",
    "ipa/variables.md.6a1b0bc22d93993d44e1b46da0c7ef2c": "`client.variables.suivreNomsVariable({ idVariable, f })`",
    "ipa/variables.md.b7761d83705baa1abd36299951570b9e": "Suit les noms (traduits en différentes langues) de la variable.",
    "ipa/variables.md.8db07cf080d915c176916c6c667f6a5e": "`(noms: { [langue: string]: string }) => void`",
    "ipa/variables.md.a28813b10a38d8e8dae09b372607c538": "Une fonction qui sera appelée avec les noms de la variable chaque fois qu'ils changent",
    "ipa/variables.md.11bfca28f7533612950981255a4d5b0c": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst fOublierNoms = await client.variables.suivreNomsVariable({ \n    idVariable,\n    f: async noms => {\n        console.log(noms);\n        await fOublierNoms();\n    }\n});\n\nawait client.variables.sauvegarderNomsVariable({ \n    idVariable, \n    noms: { fr: \"Précipitation\", த: \"மழைப்பொழிவு\"}\n});\n\n```",
    "ipa/variables.md.8bc84316c4078bf66723fd019616d920": "Descriptions",
    "ipa/variables.md.dccbca193f1859c56fafe89a68c38da0": "Dans Constellation, chaque variable peut aussi être accompagnée d'une description plus informative.",
    "ipa/variables.md.f62e8db90de38c81c7c21c9d283f3f92": "`client.variables.sauvegarderDescriptionVariable({ idVariable, langue, nom })`",
    "ipa/variables.md.527868817e269ac8617e64f95b345f7c": "Sauvegarde la description de la variable dans une langue donnée.",
    "ipa/variables.md.831669deb653fd69299f4826920d7f17": "`description`",
    "ipa/variables.md.d577834ce65a99991320de04df6cd100": "La description de la variable.",
    "ipa/variables.md.5cfad0ff573229b4d10313e00a0b7268": "La langue de la description.",
    "ipa/variables.md.49af2fef155ac340e24dc2b573464a47": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderDescriptionVariable({\n    idVariable, \n    langue: \"fr\", \n    description: \"Quantité de précipitation\" \n});\n\n```",
    "ipa/variables.md.a02aaf2acd2472a8be5944c6374c56c3": "`client.variables.sauvegarderDescriptionsVariable({ idVariable, descriptions })`",
    "ipa/variables.md.8db4d19a670428ab0727d1c517b048c8": "Sauvegarde la description d'une variable dans plusieurs langues en même temps.",
    "ipa/variables.md.83246462d80faadb74ad1977ac553044": "`descriptions`",
    "ipa/variables.md.8d7897f34440191a4e44685d3dfc0a5b": "Les descriptions de la variable, indexées par langue.",
    "ipa/variables.md.06a5514c2bf366697cdcee141e2a6500": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\nawait client.variables.sauvegarderDescriptionsVariable({ \n    idVariable, \n    descriptions: { \n        fr: \"La quantité de précipitation\", \n        த: \"மழைப்பொழிவு அளவு\"\n    }\n});\n\n```",
    "ipa/variables.md.a0193fd7d011fdf675227e7cf6c81086": "`client.variables.effacerDescriptionVariable({ idVariable, langue })`",
    "ipa/variables.md.50b9ea2f8d00aa978ce2fe1302a2e248": "Efface la traduction d'une description de la variable dans une langue donnée.",
    "ipa/variables.md.4339b0b170bd749fed35ca6254907a0b": "La langue dont ont doit effacer la description.",
    "ipa/variables.md.5fbe4016263254c4c4105ef1dab981ee": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nawait client.variables.sauvegarderDescriptionsVariable({ \n    idVariable, \n    descriptions: { \n        fr: \"La quantité de précipitation\", \n        த: \"மழைப்பொழிவு அளவு\"\n    }\n});\nawait client.variables.effacerDescriptionVariable({ idVariable, langue: \"fr\" });\n```",
    "ipa/variables.md.7a4b068d373d82fe6c5211a761ce7bbe": "`client.variables.suivreDescriptionsVariable({ idVariable, f })`",
    "ipa/variables.md.b5517ab797f18d856e2c39f2e6de589e": "Suit les descriptions (traduites en différentes langues) de la variable.",
    "ipa/variables.md.551a01fe6f185fb4ea5c0cd0c9f7e841": "`(descriptions: { [langue: string]: string }) => void`",
    "ipa/variables.md.d254f7ea302bd91fd024f3da2cbfcacf": "Une fonction qui sera appelée avec les descriptions de la variable chaque fois qu'elles changent",
    "ipa/variables.md.cd721e5ce068a465bcecab0178e3df02": "```ts\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst fOublierDescriptions = await client.variables.suivreDescriptionsVariable({ \n    idVariable,\n    f: async descrs => {\n        console.log(descrs);\n        await fOublierDescriptions();\n    }\n});\n\nawait client.variables.sauvegarderDescriptionVariable({ \n    idVariable, \n    langue: \"fr\",\n    description: \"Concentration de Na+ dans le sol\"\n});\n\n```",
    "ipa/variables.md.83f62264e331203b7b0b16be3a8667ca": "Catégories",
    "ipa/variables.md.50750c729da34a22e5accad4f3bb11e2": "Chaque variable est associée à une [catégorie](#types), qui, comme dans un tableau Excel ou LibreOffice peut être numérique, de texte, ou de date. Cependant, Constellation vous offre aussi beaucoup d'autres formes de données possibles, tels les fichiers audio, image et vidéo que vous pouvez ajouter directement dans les cellules de vos bases de données.",
    "ipa/variables.md.f1333e5bab5c0e9f29c67945248754d1": "`client.variables.sauvegarderCatégorieVariable({ idVariable, catégorie })`",
    "ipa/variables.md.c944aeaf650b440bb8e7b87b290cb4e5": "Sauvegarde la catégorie de la variable.",
    "ipa/variables.md.c5d02d9671ce7a83955bdc8c720f947e": "#categorievariables",
    "ipa/variables.md.e48241b7b97a3ca6f1503346b4fbe0de": "#categoriebasevariables",
    "ipa/variables.md.7077fafc654d450bd220ae10f40d8fb0": "```ts\n\nimport { générerClient } from \"@constl/ipa\";\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\n// Changer la catégorie à une variable de type chaîne\nawait client.variables.sauvegarderCatégorieVariable({ \n    idVariable, \n    catégorie: \"chaîne\"\n});\n\n// Changer la catégorie à une liste de nombres\nawait client.variables.sauvegarderCatégorieVariable({ \n    idVariable, \n    catégorie: {\n      type: \"liste\",\n      catégorie: \"numérique\"\n    }\n});\n\n```",
    "ipa/variables.md.20035736a01edcbd75a20fc409d36f4b": "`client.variables.suivreCatégorieVariable({ idVariable, f })`",
    "ipa/variables.md.2659a846446a93ee426cef5a2fc0db23": "Suit la catégorie de la variable.",
    "ipa/variables.md.4f5f8b7028f545f4fce8934f98c880ba": "`(catégorie:`",
    "ipa/variables.md.9a5bcb4926efe0675cf2dc40f5ee28e2": "`) => void`",
    "ipa/variables.md.4e6d09524df38c00f7f79078d4ca347b": "Une fonction qui sera appelée avec la catégorie de la variable chaque fois que celle-ci change.",
    "ipa/variables.md.9954ed7b41c2ed75f09e542a2bcdf6e2": "```ts\nimport { générerClient } from \"@constl/ipa\";\nimport { ref } from \"vue\";\n\nconst client = générerClient({});\n\nconst catégorie = ref();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst fOublierCatégorie = await client.variables.suivreCatégorieVariable({ \n    idVariable,\n    f: x => catégorie.value = x,\n});\n\nawait client.variables.sauvegarderCatégorieVariable({ \n    idVariable, \n    catégorie: \"vidéo\"\n});\n\n```",
    "ipa/variables.md.3059d560a99ef0118d62a23fc1de0329": "Unités",
    "ipa/variables.md.624eadf6a8998bf2fa0072fa4a7cba8e": "...à venir",
    "ipa/variables.md.5120290b9c4b69dc2054936b425541d2": "Règles",
    "ipa/variables.md.2319f6868fbc0e076473fcc5bdc47e35": "Vous pouvez ajouter des règles à vos variables Constellation. Ces règles seront utilisées pour valider les données associées à ces variables. Les règles peuvent être ajoutées soit aux variables (décrit ci-dessous), soit directement aux [tableaux](./tableaux.md#regles) des bases de données. Dans ce premier cas, les règles s'appliqueront à tous les tableaux qui utilisent cette variable.",
    "ipa/variables.md.646ea508616f458b0b526d8287b9f335": "::: tip\nLes règles peuvent être de différentes formes. Elles peuvent s'assurer qu'une variable numérique reste dans les bornes prévues - disons, que la latitude et la longitude restent bien sur la planète Terre - ou bien vérifier que les valeurs font partie d'une liste de valeurs catégoriques permises. Elles peuvent aussi être relatives (par exemple, que la température minimum ne peut être supérieure à la température maximum).",
    "ipa/variables.md.4f85e433aba221be24276333f8817c4f": "Pour en apprendre plus sur les règles, voir la [section correspondante](./règles.md).\n:::",
    "ipa/variables.md.139137358fd519493b857a5b332698ad": "`client.variables.ajouterRègleVariable({ idVariable, règle, idRègle })`",
    "ipa/variables.md.312a6f6ae6c74e6a4c4a5a9235b83978": "`règle`",
    "ipa/variables.md.ea27b8ef203d9ac9968686564c5428db": "`valid.règleVariable`",
    "ipa/variables.md.238d3fa8d4efe133aab319dd4eb74e19": "./règles.md",
    "ipa/variables.md.76baf246356359181e566fd3984505d9": "La règle à ajouter.",
    "ipa/variables.md.fbeffaafc235458d961fd6e94589a7a5": "`idRègle`",
    "ipa/variables.md.03343629a6c50dd85d477193d9a7363e": "`string | undefined`",
    "ipa/variables.md.f61d78fcd2d304cf870db01b7e98a431": "Un identifiant unique pour la règle. Si non spécifié, Constellation en générera un de manière aléatoire.",
    "ipa/variables.md.a8a64f8103dd7f2e1d461f8a57116375": "L'identifiant unique de la nouvelle règle.",
    "ipa/variables.md.e07e194b0038636288b591200b325764": "```ts\nimport { générerClient, type valid } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst règle: valid.règleBornes = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \">=\",\n    },\n};\n\n// La variable doit être une valeur non-négative\nconst idRègle = await client.variables.ajouterRègleVariable({ \n    idVariable, \n    règle: \n});\n\n```",
    "ipa/variables.md.6f43a1fc2e9c1ef0ad372e9d4d6bda5f": "`client.variables.modifierRègleVariable({ idVariable, règleModifiée, idRègle })`",
    "ipa/variables.md.a418b1b9829eee540b2bbc3bb3599eca": "Permet de modifier une règle existante.",
    "ipa/variables.md.ae2bdc2bdecdaeb332e2555114d84880": "`règleModifiée`",
    "ipa/variables.md.1e57c798a5da2e932a39d74939201ada": "La règle modifiée.",
    "ipa/variables.md.bd2b048a189185e9cfdb559b6107bb40": "L'identifiant de la règle originale.",
    "ipa/variables.md.7bb73907c8853602a3143f4e2558da91": "```ts\nimport { générerClient, type valid } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst règle: valid.règleBornes = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \">=\",\n    },\n};\n\n// La variable doit être une valeur non-négative\nconst idRègle = await client.variables.ajouterRègleVariable({ \n    idVariable, \n    règle: \n});\n\n// Après tout, elle doit être positive\nconst règleModifiée: valid.règleBornes = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \">\",\n    },\n};\nawait client.variables.modifierRègleVariable({ \n    idVariable, \n    règleModifiée,\n    idRègle\n});\n```",
    "ipa/variables.md.083a0b4373cd90b6533e51b5c95dc711": "`client.variables.effacerRègleVariable({ idVariable, idRègle })`",
    "ipa/variables.md.d16a40c80fe4a30fce8048bb38f9683a": "Efface une règle existante.",
    "ipa/variables.md.c42fa0f1ef0ef0aed43546488e232ae0": "L'identifiant de la règle à effacer.",
    "ipa/variables.md.ae0564d27e430dd89e982ec39d7cd28c": "```ts\nimport { générerClient, type valid } from \"@constl/ipa\";\n\nconst client = générerClient({});\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst règle: valid.règleBornes = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \">=\",\n    },\n};\n\n// La variable doit être une valeur non-négative\nconst idRègle = await client.variables.ajouterRègleVariable({ \n    idVariable, \n    règle\n});\n\n// On change d'avis !\nawait client.variables.effacerRègleVariable({\n    idVariable,\n    idRègle\n});\n\n```",
    "ipa/variables.md.0872c35ed5ba556ce1cb20b2eee85c5a": "`client.variables.suivreRèglesVariable({ idVariable, f })`",
    "ipa/variables.md.8052e9ff04f4a6b35338e04298610079": "Suit les règles associées à la variable.",
    "ipa/variables.md.3b9dc3cb82a65eb8b6fabc2f8e2d90b1": "`(règles:`",
    "ipa/variables.md.6fc27107c2e9df89e30d4f6318997350": "`règleVariableAvecId`",
    "ipa/variables.md.fcc008f3fb3dd311a61c968c746bdf1a": "./règles.md#types",
    "ipa/variables.md.34a09f3445d1a48c2987df6f75ed15e4": "`[]) => void`",
    "ipa/variables.md.0c9d63c3170550a6448714e28b08292d": "Une fonction qui sera appelée avec les règles de la variable chaque fois que celles-ci changent.",
    "ipa/variables.md.a5a09b10025865f24216cda274bfaab3": "```ts\nimport { générerClient, type valid } from \"@constl/ipa\";\nimport { ref } from \"vue\";\n\nconst client = générerClient({});\n\nconst règles = ref<valid.règleVariableAvecId[]>();\n\nconst idVariable = await client.variables.créerVariable({ catégorie: \"numérique\" });\n\nconst fOublierRègles = await client.variables.suivreRèglesVariable({ \n    idVariable,\n    f: x => règles.value = x,\n});\n\nconst règle: valid.règleBornes = {\n    typeRègle: \"bornes\",\n    détails: {\n        type: \"fixe\",\n        val: 0,\n        op: \">=\",\n    },\n};\n\n// La variable doit être une valeur non-négative\nawait client.variables.ajouterRègleVariable({ \n    idVariable, \n    règle: \n});\n\n```",
    "ipa/variables.md.f2d346b1bb7c1c85ab6f7f21e3666b9f": "Types",
    "ipa/variables.md.829a8174e54f11535343b5d28d277f4c": "Quelques types TypeScript sont associés aux variables Constellation.",
    "ipa/variables.md.8efa4e84b75633466de7b10d831c9f13": "catégorieVariables",
    "ipa/variables.md.b39467246b75db93f3a648ab67c93c36": "Les variables peuvent être de catégorie `simple` (une seule valeur permise) ou bien `liste` (plusieurs valeurs permises, mais toutes du même type).",
    "ipa/variables.md.6a0d39f6398290498601e87d3e1b9502": "```ts\ntype catégorieVariables =\n  | {\n      type: \"simple\";\n      catégorie: catégorieBaseVariables;\n    }\n  | {\n      type: \"liste\";\n      catégorie: catégorieBaseVariables;\n    };\n```",
    "ipa/variables.md.a38787961583700bdee43ce90a9e49a9": "catégorieBaseVariables",
    "ipa/variables.md.262e51047f6a30e004b5ac9774c1277e": "Les variables Constellation sont associées à l'une de plusieurs catégories de base possibles.",
    "ipa/variables.md.b6fe636e624e4fb22a51cf211c84f03b": "* `numérique` : Une valeur numérique, telle la longitude ou la précipitation.\n* `horoDatage` : Une date, avec ou sans heure précisée (par exemple, date de prélévement d'un échantillon).\n* `intervaleTemps` : Une intervale de temps entre deux `horoDatages`. Par exemple, l'intervale de temps sur lequel a été calculé la température maximale de la journée.\n* `chaîneNonTraductible` : Du texte qui peut être traduit en différentes langues (par exemple, le nom d'une espèce animale observée).\n* `chaîne` : Du texte qui ne doit pas être traduit (par exemple, le code identifiant un échantillon).\n* `booléen` : Valeur vraie ou fausse (par exemple, s'il a plu hier).\n* `géojson` : Données géographiques de format [geoJSON](https://geojson.org/).\n* `vidéo` : Une vidéo.\n* `audio` : Un fichier audio.\n* `image` : Un fichier image.\n* `fichier` : Un fichier de type arbitraire.",
    "ipa/variables.md.1c0052ae90a7243940041c3cff470ca6": "::: tip\n**Astuce de pro** : Pour d'autres catégories éventuelles qui ne correspondraient pas bien à l'une des catégories incluses avec Constellation ci-dessus (par exemple, des structures JSON propres à votre application), nous vous recommandons de sauvegarder les données sous format texte avec une variable de catégorie `chaîne`. Votre application pourra ensuite les accéder en tant que variable chaîne et les décoder comme convient.\n:::",
    "ipa/variables.md.16c3313b4b8206674e7abf138f29d9ab": "Ces catégories sont représentées par le type suivant :",
    "ipa/variables.md.0cc49646dc4f5e0c613b4ab17d943007": "```ts\ntype catégorieBaseVariables =\n  | \"numérique\"\n  | \"horoDatage\"\n  | \"intervaleTemps\"\n  | \"chaîne\"\n  | \"chaîneNonTraductible\"\n  | \"booléen\"\n  | \"géojson\"\n  | \"vidéo\"\n  | \"audio\"\n  | \"image\"\n  | \"fichier\";\n```\n",
    "nav.0.text.6602bbeb2956c035fb4cb5e844a4861b": "Guide",
    "nav.1.text.f45c1c0a2cc7150d2ef7af26c4265544": "Appli",
    "nav.1.link.cedce24b39179850faf2080a51cb1a7c": "https://réseau-constellation.ca",
    "sidebar.0.text.6602bbeb2956c035fb4cb5e844a4861b": "Guide",
    "sidebar.0.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "sidebar.0.items.1.text.7cd8fb6e31cc946c078d2740c76a9899": "Installation",
    "sidebar.0.items.2.text.d4390e0d6ef1cad7b9e07133f2cfc008": "Pair à pair",
    "sidebar.0.items.3.text.501d6b699dd3dc08c0043e1c03bc1a41": "Terminologie",
    "sidebar.1.text.9a103932a77831a6270ab0002f15b3d5": "Exemples",
    "sidebar.1.items.0.text.23171fe4fd6ef39d7a0b5e888493cf86": "Science citoyenne",
    "sidebar.1.items.1.text.6bac750358f0e788f6eaa7e33c5f4fdd": "Diffusion de données",
    "sidebar.2.text.8fc523b9c07fd1b49bda2fd8e57d9cdb": "Avancé",
    "sidebar.2.items.0.text.610a2fb96f43ee902032d4e471ffa71f": "Autres langages",
    "sidebar.2.items.0.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "sidebar.2.items.0.items.1.text.2344521e389d6897ae7af9abf16e7ccc": "Julia",
    "sidebar.2.items.0.items.2.text.a7f5f35426b927411fc9231b56382173": "Python",
    "sidebar.2.items.0.items.3.text.e1e1d3d40573127e9ee0480caf1283d6": "R",
    "sidebar.2.items.0.items.4.text.be3169e3127dfdc26720c2c879e4b7d9": "Nœud local",
    "sidebar.2.items.0.items.5.text.bb0c7e5159e187193d3ad0cea7a94f74": "Nouveaux langages",
    "sidebar.2.items.1.text.6125574ce9b6ca4cd5bc0d2a40d17cfc": "Développement d'applis",
    "sidebar.2.items.1.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "sidebar.2.items.1.items.1.text.6dc83e2729ce1ef701d1302f05ba3adf": "Applis Internet",
    "sidebar.2.items.1.items.2.text.f99147ddc67fab8ad31f3ba60bea772d": "Applis Électron",
    "sidebar.2.items.1.items.3.text.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "sidebar.3.text.40dfb1449b924e60bb6b65c5d16a43df": "Documentation IPA",
    "sidebar.3.items.0.text.0b79795d3efc95b9976c7c5b933afce2": "Introduction",
    "sidebar.3.items.1.text.577d7068826de925ea2aec01dbadf5e4": "Client",
    "sidebar.3.items.2.text.820c6916ebfb13d1738ab6a13cf0a69b": "Profil",
    "sidebar.3.items.3.text.146392100d99ac2f71a8fbf37b0ed2b0": "Mots-clefs",
    "sidebar.3.items.4.text.03df896fc71cd516fdcf44aa699c4933": "Variables",
    "sidebar.3.items.5.text.21e4164bfdb63312a661b92332eedbec": "Licences",
    "sidebar.3.items.6.text.059c8595193d0680e728c17de17b3169": "Bases de données",
    "sidebar.3.items.7.text.3bfcbb1710331a008e6d2ef80a1ffd77": "Tableaux",
    "sidebar.3.items.8.text.cbdf99436836fee4fcd8aa74a49ef09f": "Projets",
    "sidebar.3.items.9.text.6fc52d448f58219f4beaea9a4b4112f8": "Nuées",
    "sidebar.3.items.10.text.0e29ad704b1df5897c46c7bb0d9a52fc": "Favoris",
    "sidebar.3.items.11.text.57179211c41c3b53fcde10a442a77d58": "Automatisations",
    "sidebar.3.items.12.text.5120290b9c4b69dc2054936b425541d2": "Règles",
    "sidebar.3.items.13.text.2e794d6856491e41c34f85ac2f1e754c": "Recherche",
    "sidebar.3.items.14.text.836d64c92151a341b114b051cb4cbc83": "Réseau",
    "socialLinks.0.icon.bf215181b5140522137b3d4f6b73544a": "github",
    "socialLinks.0.link.d9cad51f6cb78a047910eade2d86eb1d": "https://github.com/reseau-constellation",
    "footer.message.0921d67919ecf0874fab3e560f6fc7a0": "Disponible sous licence AGPL-3.0",
    "footer.copyright.c87033cbb65d6ff52f6376e2cf2d9c77": "© 2021+ Contributeurs Constellation",
    "editLink.pattern.5a9d06d24907aaa0542d2fdb05c8ae17": "https://github.com/reseau-constellation/ipa/edit/main/docu/src/:path",
    "editLink.text.bfb0f26b1fa393db41c4d82ab007882b": "Éditer sur GitHub",
    "docFooter.prev.92a8590f994876baec182f3b28a6563a": "Page précédente",
    "docFooter.next.b0e02934a7f7f753e7e3f73bdf94c3fa": "Prochaine page",
    "darkModeSwitchLabel.d45db514d9389d60dc5c229eaf7edbdf": "Thème",
    "search.provider.f5ddaf0ca7929578b408c909429f68f2": "local",
    "outlineTitle.b87746339b0bd0dff6cdd6de2a8b279a": "Sur cette page",
    "sidebarMenuLabel.b61541208db7fa7dba42c85224405911": "Menu",
    "lastUpdatedText.2849ca53fc1e67155cf0492d958c2a3c": "Dernière mise à jour",
    "returnToTopLabel.26b1859a1163e8334bd20f7560871d10": "Haut de page",
    "titre.974724855beee3a55e93d0b47b1ee3d9": "Constellation"
}